/* automatically generated by rust-bindgen 0.68.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const USE_HAL_ADC_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_COMP_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_CORDIC_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_CRYP_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_DAC_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_EXTI_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_FDCAN_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_FMAC_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_HRTIM_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_I2C_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_I2S_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_IRDA_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_LPTIM_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_NAND_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_NOR_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_OPAMP_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_PCD_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_QSPI_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_RNG_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_RTC_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_SAI_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_SMARTCARD_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_SMBUS_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_SPI_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_SRAM_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_TIM_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_UART_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_USART_REGISTER_CALLBACKS: u32 = 0;
pub const USE_HAL_WWDG_REGISTER_CALLBACKS: u32 = 0;
pub const HSE_VALUE: u32 = 8000000;
pub const HSE_STARTUP_TIMEOUT: u32 = 100;
pub const HSI_VALUE: u32 = 16000000;
pub const HSI48_VALUE: u32 = 48000000;
pub const LSI_VALUE: u32 = 32000;
pub const LSE_VALUE: u32 = 32768;
pub const LSE_STARTUP_TIMEOUT: u32 = 5000;
pub const EXTERNAL_CLOCK_VALUE: u32 = 12288000;
pub const VDD_VALUE: u32 = 3300;
pub const TICK_INT_PRIORITY: u32 = 15;
pub const USE_RTOS: u32 = 0;
pub const PREFETCH_ENABLE: u32 = 0;
pub const INSTRUCTION_CACHE_ENABLE: u32 = 1;
pub const DATA_CACHE_ENABLE: u32 = 1;
pub const USE_SPI_CRC: u32 = 0;
pub const __STM32G4_CMSIS_VERSION_MAIN: u32 = 1;
pub const __STM32G4_CMSIS_VERSION_SUB1: u32 = 2;
pub const __STM32G4_CMSIS_VERSION_SUB2: u32 = 2;
pub const __STM32G4_CMSIS_VERSION_RC: u32 = 0;
pub const __STM32G4_CMSIS_VERSION: u32 = 16908800;
pub const __CM4_REV: u32 = 1;
pub const __MPU_PRESENT: u32 = 1;
pub const __NVIC_PRIO_BITS: u32 = 4;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __FPU_PRESENT: u32 = 1;
pub const __MINGW32_VERSION: u32 = 5000002;
pub const __MINGW32_MAJOR_VERSION: u32 = 5;
pub const __MINGW32_MINOR_VERSION: u32 = 0;
pub const __MINGW32_PATCHLEVEL: u32 = 2;
pub const __MSVCR60_DLL: u32 = 1536;
pub const __MSVCR61_DLL: u32 = 1537;
pub const __MSVCR70_DLL: u32 = 1792;
pub const __MSVCR71_DLL: u32 = 1793;
pub const __MSVCR80_DLL: u32 = 2048;
pub const __MSVCR90_DLL: u32 = 2304;
pub const __MSVCR100_DLL: u32 = 4096;
pub const __MSVCR110_DLL: u32 = 4352;
pub const __MSVCR120_DLL: u32 = 4608;
pub const __MSVCRT_VERSION__: u32 = 1536;
pub const __W32API_VERSION: u32 = 5000002;
pub const __W32API_MAJOR_VERSION: u32 = 5;
pub const __W32API_MINOR_VERSION: u32 = 0;
pub const __W32API_PATCHLEVEL: u32 = 2;
pub const OSVERSION_MASK: u32 = 4294901760;
pub const SPVERSION_MASK: u32 = 65280;
pub const SUBVERSION_MASK: u32 = 255;
pub const _WIN32_WINNT_NT4: u32 = 1024;
pub const _WIN32_WINNT_NT4E: u32 = 1025;
pub const _WIN32_WINNT_NT4SP3: u32 = 1027;
pub const _WIN32_WINDOWS_95: u32 = 1024;
pub const _WIN32_WINDOWS_98: u32 = 1040;
pub const _WIN32_WINDOWS_ME: u32 = 1168;
pub const _WIN32_WINNT_WIN2K: u32 = 1280;
pub const _WIN32_WINNT_WINXP: u32 = 1281;
pub const _WIN32_WINNT_WS03: u32 = 1282;
pub const _WIN32_WINNT_WIN6: u32 = 1536;
pub const _WIN32_WINNT_VISTA: u32 = 1536;
pub const _WIN32_WINNT_WS08: u32 = 1536;
pub const _WIN32_WINNT_LONGHORN: u32 = 1536;
pub const _WIN32_WINNT_WIN7: u32 = 1537;
pub const _WIN32_WINNT_WIN8: u32 = 1538;
pub const _WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _WIN32_IE_IE50: u32 = 1280;
pub const _WIN32_IE_IE501: u32 = 1281;
pub const _WIN32_IE_IE55: u32 = 1360;
pub const _WIN32_IE_IE56: u32 = 1376;
pub const _WIN32_IE_IE60: u32 = 1536;
pub const _WIN32_IE_IE60SP1: u32 = 1537;
pub const _WIN32_IE_IE60SP2: u32 = 1539;
pub const _WIN32_IE_IE70: u32 = 1792;
pub const _WIN32_IE_IE80: u32 = 2048;
pub const _WIN32_IE_IE30: u32 = 768;
pub const _WIN32_IE_IE301: u32 = 769;
pub const _WIN32_IE_IE302: u32 = 770;
pub const _WIN32_IE_IE40: u32 = 1024;
pub const _WIN32_IE_IE401: u32 = 1025;
pub const __NTDDI_WIN5: u32 = 83886080;
pub const __NTDDI_WIN51: u32 = 83951616;
pub const __NTDDI_WIN52: u32 = 84017152;
pub const __NTDDI_WIN6: u32 = 100663296;
pub const __NTDDI_WIN61: u32 = 100728832;
pub const __NTDDI_WIN62: u32 = 100794368;
pub const __NTDDI_WIN63: u32 = 100859904;
pub const __NTDDI_SP0: u32 = 0;
pub const __NTDDI_SP1: u32 = 256;
pub const __NTDDI_SP2: u32 = 512;
pub const __NTDDI_SP3: u32 = 768;
pub const __NTDDI_SP4: u32 = 1024;
pub const NTDDI_WIN2K: u32 = 83886080;
pub const NTDDI_WIN2KSP1: u32 = 83886336;
pub const NTDDI_WIN2KSP2: u32 = 83886592;
pub const NTDDI_WIN2KSP3: u32 = 83886848;
pub const NTDDI_WIN2KSP4: u32 = 83887104;
pub const NTDDI_WINXP: u32 = 83951616;
pub const NTDDI_WINXPSP1: u32 = 83951872;
pub const NTDDI_WINXPSP2: u32 = 83952128;
pub const NTDDI_WINXPSP3: u32 = 83952384;
pub const NTDDI_WS03: u32 = 84017152;
pub const NTDDI_WS03SP1: u32 = 84017408;
pub const NTDDI_WS03SP2: u32 = 84017664;
pub const NTDDI_VISTA: u32 = 100663296;
pub const NTDDI_VISTASP1: u32 = 100663552;
pub const NTDDI_VISTASP2: u32 = 100663808;
pub const NTDDI_LONGHORN: u32 = 100663296;
pub const NTDDI_WIN6: u32 = 100663296;
pub const NTDDI_WIN6SP1: u32 = 100663552;
pub const NTDDI_WIN6SP2: u32 = 100663808;
pub const NTDDI_WS08: u32 = 100663552;
pub const NTDDI_WIN7: u32 = 100728832;
pub const NTDDI_WIN8: u32 = 100794368;
pub const NTDDI_WINBLUE: u32 = 100859904;
pub const _WIN32_WINNT: u32 = 1280;
pub const WINVER: u32 = 1280;
pub const Windows95: u32 = 1024;
pub const Windows98: u32 = 1040;
pub const WindowsME: u32 = 1168;
pub const WindowsNT4: u32 = 1024;
pub const Windows2000: u32 = 1280;
pub const WindowsXP: u32 = 1281;
pub const Windows2003: u32 = 1282;
pub const WindowsVista: u32 = 1536;
pub const IE3: u32 = 768;
pub const IE301: u32 = 769;
pub const IE302: u32 = 770;
pub const IE4: u32 = 1024;
pub const IE401: u32 = 1025;
pub const IE5: u32 = 1280;
pub const IE5a: u32 = 1280;
pub const IE5b: u32 = 1280;
pub const IE501: u32 = 1281;
pub const IE55: u32 = 1360;
pub const IE56: u32 = 1376;
pub const IE6: u32 = 1536;
pub const IE601: u32 = 1537;
pub const IE602: u32 = 1539;
pub const IE7: u32 = 1792;
pub const __CRT_GLOB_USE_MSVCRT__: u32 = 1;
pub const __CRT_GLOB_USE_MINGW__: u32 = 2;
pub const __CRT_GLOB_USE_SINGLE_QUOTE__: u32 = 16;
pub const __CRT_GLOB_BRACKET_GROUPS__: u32 = 32;
pub const __MINGW_ANSI_STDIO__: u32 = 1;
pub const __MINGW_LC_EXTENSIONS__: u32 = 80;
pub const __MINGW_LC_MESSAGES__: u32 = 16;
pub const __MINGW_LC_ENVVARS__: u32 = 64;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _EMULATE_GLIBC: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 7;
pub const _MINGW32_SOURCE_EXTENDED: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __CM_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM_CMSIS_VERSION_SUB: u32 = 3;
pub const __CM_CMSIS_VERSION: u32 = 327683;
pub const __CM4_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM4_CMSIS_VERSION_SUB: u32 = 3;
pub const __CM4_CMSIS_VERSION: u32 = 327683;
pub const __CORTEX_M: u32 = 4;
pub const __FPU_USED: u32 = 1;
pub const APSR_N_Pos: u32 = 31;
pub const APSR_N_Msk: u32 = 2147483648;
pub const APSR_Z_Pos: u32 = 30;
pub const APSR_Z_Msk: u32 = 1073741824;
pub const APSR_C_Pos: u32 = 29;
pub const APSR_C_Msk: u32 = 536870912;
pub const APSR_V_Pos: u32 = 28;
pub const APSR_V_Msk: u32 = 268435456;
pub const APSR_Q_Pos: u32 = 27;
pub const APSR_Q_Msk: u32 = 134217728;
pub const APSR_GE_Pos: u32 = 16;
pub const APSR_GE_Msk: u32 = 983040;
pub const IPSR_ISR_Pos: u32 = 0;
pub const IPSR_ISR_Msk: u32 = 511;
pub const xPSR_N_Pos: u32 = 31;
pub const xPSR_N_Msk: u32 = 2147483648;
pub const xPSR_Z_Pos: u32 = 30;
pub const xPSR_Z_Msk: u32 = 1073741824;
pub const xPSR_C_Pos: u32 = 29;
pub const xPSR_C_Msk: u32 = 536870912;
pub const xPSR_V_Pos: u32 = 28;
pub const xPSR_V_Msk: u32 = 268435456;
pub const xPSR_Q_Pos: u32 = 27;
pub const xPSR_Q_Msk: u32 = 134217728;
pub const xPSR_ICI_IT_2_Pos: u32 = 25;
pub const xPSR_ICI_IT_2_Msk: u32 = 100663296;
pub const xPSR_T_Pos: u32 = 24;
pub const xPSR_T_Msk: u32 = 16777216;
pub const xPSR_GE_Pos: u32 = 16;
pub const xPSR_GE_Msk: u32 = 983040;
pub const xPSR_ICI_IT_1_Pos: u32 = 10;
pub const xPSR_ICI_IT_1_Msk: u32 = 64512;
pub const xPSR_ISR_Pos: u32 = 0;
pub const xPSR_ISR_Msk: u32 = 511;
pub const CONTROL_FPCA_Pos: u32 = 2;
pub const CONTROL_FPCA_Msk: u32 = 4;
pub const CONTROL_SPSEL_Pos: u32 = 1;
pub const CONTROL_SPSEL_Msk: u32 = 2;
pub const CONTROL_nPRIV_Pos: u32 = 0;
pub const CONTROL_nPRIV_Msk: u32 = 1;
pub const NVIC_STIR_INTID_Pos: u32 = 0;
pub const NVIC_STIR_INTID_Msk: u32 = 511;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: u32 = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: u32 = 983040;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_RETTOBASE_Pos: u32 = 11;
pub const SCB_ICSR_RETTOBASE_Msk: u32 = 2048;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 4294967168;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_PRIGROUP_Pos: u32 = 8;
pub const SCB_AIRCR_PRIGROUP_Msk: u32 = 1792;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_AIRCR_VECTRESET_Pos: u32 = 0;
pub const SCB_AIRCR_VECTRESET_Msk: u32 = 1;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_BFHFNMIGN_Pos: u32 = 8;
pub const SCB_CCR_BFHFNMIGN_Msk: u32 = 256;
pub const SCB_CCR_DIV_0_TRP_Pos: u32 = 4;
pub const SCB_CCR_DIV_0_TRP_Msk: u32 = 16;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_CCR_USERSETMPEND_Pos: u32 = 1;
pub const SCB_CCR_USERSETMPEND_Msk: u32 = 2;
pub const SCB_CCR_NONBASETHRDENA_Pos: u32 = 0;
pub const SCB_CCR_NONBASETHRDENA_Msk: u32 = 1;
pub const SCB_SHCSR_USGFAULTENA_Pos: u32 = 18;
pub const SCB_SHCSR_USGFAULTENA_Msk: u32 = 262144;
pub const SCB_SHCSR_BUSFAULTENA_Pos: u32 = 17;
pub const SCB_SHCSR_BUSFAULTENA_Msk: u32 = 131072;
pub const SCB_SHCSR_MEMFAULTENA_Pos: u32 = 16;
pub const SCB_SHCSR_MEMFAULTENA_Msk: u32 = 65536;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos: u32 = 14;
pub const SCB_SHCSR_BUSFAULTPENDED_Msk: u32 = 16384;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos: u32 = 13;
pub const SCB_SHCSR_MEMFAULTPENDED_Msk: u32 = 8192;
pub const SCB_SHCSR_USGFAULTPENDED_Pos: u32 = 12;
pub const SCB_SHCSR_USGFAULTPENDED_Msk: u32 = 4096;
pub const SCB_SHCSR_SYSTICKACT_Pos: u32 = 11;
pub const SCB_SHCSR_SYSTICKACT_Msk: u32 = 2048;
pub const SCB_SHCSR_PENDSVACT_Pos: u32 = 10;
pub const SCB_SHCSR_PENDSVACT_Msk: u32 = 1024;
pub const SCB_SHCSR_MONITORACT_Pos: u32 = 8;
pub const SCB_SHCSR_MONITORACT_Msk: u32 = 256;
pub const SCB_SHCSR_SVCALLACT_Pos: u32 = 7;
pub const SCB_SHCSR_SVCALLACT_Msk: u32 = 128;
pub const SCB_SHCSR_USGFAULTACT_Pos: u32 = 3;
pub const SCB_SHCSR_USGFAULTACT_Msk: u32 = 8;
pub const SCB_SHCSR_BUSFAULTACT_Pos: u32 = 1;
pub const SCB_SHCSR_BUSFAULTACT_Msk: u32 = 2;
pub const SCB_SHCSR_MEMFAULTACT_Pos: u32 = 0;
pub const SCB_SHCSR_MEMFAULTACT_Msk: u32 = 1;
pub const SCB_CFSR_USGFAULTSR_Pos: u32 = 16;
pub const SCB_CFSR_USGFAULTSR_Msk: u32 = 4294901760;
pub const SCB_CFSR_BUSFAULTSR_Pos: u32 = 8;
pub const SCB_CFSR_BUSFAULTSR_Msk: u32 = 65280;
pub const SCB_CFSR_MEMFAULTSR_Pos: u32 = 0;
pub const SCB_CFSR_MEMFAULTSR_Msk: u32 = 255;
pub const SCB_CFSR_MMARVALID_Pos: u32 = 7;
pub const SCB_CFSR_MMARVALID_Msk: u32 = 128;
pub const SCB_CFSR_MLSPERR_Pos: u32 = 5;
pub const SCB_CFSR_MLSPERR_Msk: u32 = 32;
pub const SCB_CFSR_MSTKERR_Pos: u32 = 4;
pub const SCB_CFSR_MSTKERR_Msk: u32 = 16;
pub const SCB_CFSR_MUNSTKERR_Pos: u32 = 3;
pub const SCB_CFSR_MUNSTKERR_Msk: u32 = 8;
pub const SCB_CFSR_DACCVIOL_Pos: u32 = 1;
pub const SCB_CFSR_DACCVIOL_Msk: u32 = 2;
pub const SCB_CFSR_IACCVIOL_Pos: u32 = 0;
pub const SCB_CFSR_IACCVIOL_Msk: u32 = 1;
pub const SCB_CFSR_BFARVALID_Pos: u32 = 15;
pub const SCB_CFSR_BFARVALID_Msk: u32 = 32768;
pub const SCB_CFSR_LSPERR_Pos: u32 = 13;
pub const SCB_CFSR_LSPERR_Msk: u32 = 8192;
pub const SCB_CFSR_STKERR_Pos: u32 = 12;
pub const SCB_CFSR_STKERR_Msk: u32 = 4096;
pub const SCB_CFSR_UNSTKERR_Pos: u32 = 11;
pub const SCB_CFSR_UNSTKERR_Msk: u32 = 2048;
pub const SCB_CFSR_IMPRECISERR_Pos: u32 = 10;
pub const SCB_CFSR_IMPRECISERR_Msk: u32 = 1024;
pub const SCB_CFSR_PRECISERR_Pos: u32 = 9;
pub const SCB_CFSR_PRECISERR_Msk: u32 = 512;
pub const SCB_CFSR_IBUSERR_Pos: u32 = 8;
pub const SCB_CFSR_IBUSERR_Msk: u32 = 256;
pub const SCB_CFSR_DIVBYZERO_Pos: u32 = 25;
pub const SCB_CFSR_DIVBYZERO_Msk: u32 = 33554432;
pub const SCB_CFSR_UNALIGNED_Pos: u32 = 24;
pub const SCB_CFSR_UNALIGNED_Msk: u32 = 16777216;
pub const SCB_CFSR_NOCP_Pos: u32 = 19;
pub const SCB_CFSR_NOCP_Msk: u32 = 524288;
pub const SCB_CFSR_INVPC_Pos: u32 = 18;
pub const SCB_CFSR_INVPC_Msk: u32 = 262144;
pub const SCB_CFSR_INVSTATE_Pos: u32 = 17;
pub const SCB_CFSR_INVSTATE_Msk: u32 = 131072;
pub const SCB_CFSR_UNDEFINSTR_Pos: u32 = 16;
pub const SCB_CFSR_UNDEFINSTR_Msk: u32 = 65536;
pub const SCB_HFSR_DEBUGEVT_Pos: u32 = 31;
pub const SCB_HFSR_DEBUGEVT_Msk: u32 = 2147483648;
pub const SCB_HFSR_FORCED_Pos: u32 = 30;
pub const SCB_HFSR_FORCED_Msk: u32 = 1073741824;
pub const SCB_HFSR_VECTTBL_Pos: u32 = 1;
pub const SCB_HFSR_VECTTBL_Msk: u32 = 2;
pub const SCB_DFSR_EXTERNAL_Pos: u32 = 4;
pub const SCB_DFSR_EXTERNAL_Msk: u32 = 16;
pub const SCB_DFSR_VCATCH_Pos: u32 = 3;
pub const SCB_DFSR_VCATCH_Msk: u32 = 8;
pub const SCB_DFSR_DWTTRAP_Pos: u32 = 2;
pub const SCB_DFSR_DWTTRAP_Msk: u32 = 4;
pub const SCB_DFSR_BKPT_Pos: u32 = 1;
pub const SCB_DFSR_BKPT_Msk: u32 = 2;
pub const SCB_DFSR_HALTED_Pos: u32 = 0;
pub const SCB_DFSR_HALTED_Msk: u32 = 1;
pub const SCnSCB_ICTR_INTLINESNUM_Pos: u32 = 0;
pub const SCnSCB_ICTR_INTLINESNUM_Msk: u32 = 15;
pub const SCnSCB_ACTLR_DISOOFP_Pos: u32 = 9;
pub const SCnSCB_ACTLR_DISOOFP_Msk: u32 = 512;
pub const SCnSCB_ACTLR_DISFPCA_Pos: u32 = 8;
pub const SCnSCB_ACTLR_DISFPCA_Msk: u32 = 256;
pub const SCnSCB_ACTLR_DISFOLD_Pos: u32 = 2;
pub const SCnSCB_ACTLR_DISFOLD_Msk: u32 = 4;
pub const SCnSCB_ACTLR_DISDEFWBUF_Pos: u32 = 1;
pub const SCnSCB_ACTLR_DISDEFWBUF_Msk: u32 = 2;
pub const SCnSCB_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const SCnSCB_ACTLR_DISMCYCINT_Msk: u32 = 1;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const ITM_TPR_PRIVMASK_Pos: u32 = 0;
pub const ITM_TPR_PRIVMASK_Msk: u32 = 4294967295;
pub const ITM_TCR_BUSY_Pos: u32 = 23;
pub const ITM_TCR_BUSY_Msk: u32 = 8388608;
pub const ITM_TCR_TraceBusID_Pos: u32 = 16;
pub const ITM_TCR_TraceBusID_Msk: u32 = 8323072;
pub const ITM_TCR_GTSFREQ_Pos: u32 = 10;
pub const ITM_TCR_GTSFREQ_Msk: u32 = 3072;
pub const ITM_TCR_TSPrescale_Pos: u32 = 8;
pub const ITM_TCR_TSPrescale_Msk: u32 = 768;
pub const ITM_TCR_SWOENA_Pos: u32 = 4;
pub const ITM_TCR_SWOENA_Msk: u32 = 16;
pub const ITM_TCR_DWTENA_Pos: u32 = 3;
pub const ITM_TCR_DWTENA_Msk: u32 = 8;
pub const ITM_TCR_SYNCENA_Pos: u32 = 2;
pub const ITM_TCR_SYNCENA_Msk: u32 = 4;
pub const ITM_TCR_TSENA_Pos: u32 = 1;
pub const ITM_TCR_TSENA_Msk: u32 = 2;
pub const ITM_TCR_ITMENA_Pos: u32 = 0;
pub const ITM_TCR_ITMENA_Msk: u32 = 1;
pub const ITM_LSR_ByteAcc_Pos: u32 = 2;
pub const ITM_LSR_ByteAcc_Msk: u32 = 4;
pub const ITM_LSR_Access_Pos: u32 = 1;
pub const ITM_LSR_Access_Msk: u32 = 2;
pub const ITM_LSR_Present_Pos: u32 = 0;
pub const ITM_LSR_Present_Msk: u32 = 1;
pub const DWT_CTRL_NUMCOMP_Pos: u32 = 28;
pub const DWT_CTRL_NUMCOMP_Msk: u32 = 4026531840;
pub const DWT_CTRL_NOTRCPKT_Pos: u32 = 27;
pub const DWT_CTRL_NOTRCPKT_Msk: u32 = 134217728;
pub const DWT_CTRL_NOEXTTRIG_Pos: u32 = 26;
pub const DWT_CTRL_NOEXTTRIG_Msk: u32 = 67108864;
pub const DWT_CTRL_NOCYCCNT_Pos: u32 = 25;
pub const DWT_CTRL_NOCYCCNT_Msk: u32 = 33554432;
pub const DWT_CTRL_NOPRFCNT_Pos: u32 = 24;
pub const DWT_CTRL_NOPRFCNT_Msk: u32 = 16777216;
pub const DWT_CTRL_CYCEVTENA_Pos: u32 = 22;
pub const DWT_CTRL_CYCEVTENA_Msk: u32 = 4194304;
pub const DWT_CTRL_FOLDEVTENA_Pos: u32 = 21;
pub const DWT_CTRL_FOLDEVTENA_Msk: u32 = 2097152;
pub const DWT_CTRL_LSUEVTENA_Pos: u32 = 20;
pub const DWT_CTRL_LSUEVTENA_Msk: u32 = 1048576;
pub const DWT_CTRL_SLEEPEVTENA_Pos: u32 = 19;
pub const DWT_CTRL_SLEEPEVTENA_Msk: u32 = 524288;
pub const DWT_CTRL_EXCEVTENA_Pos: u32 = 18;
pub const DWT_CTRL_EXCEVTENA_Msk: u32 = 262144;
pub const DWT_CTRL_CPIEVTENA_Pos: u32 = 17;
pub const DWT_CTRL_CPIEVTENA_Msk: u32 = 131072;
pub const DWT_CTRL_EXCTRCENA_Pos: u32 = 16;
pub const DWT_CTRL_EXCTRCENA_Msk: u32 = 65536;
pub const DWT_CTRL_PCSAMPLENA_Pos: u32 = 12;
pub const DWT_CTRL_PCSAMPLENA_Msk: u32 = 4096;
pub const DWT_CTRL_SYNCTAP_Pos: u32 = 10;
pub const DWT_CTRL_SYNCTAP_Msk: u32 = 3072;
pub const DWT_CTRL_CYCTAP_Pos: u32 = 9;
pub const DWT_CTRL_CYCTAP_Msk: u32 = 512;
pub const DWT_CTRL_POSTINIT_Pos: u32 = 5;
pub const DWT_CTRL_POSTINIT_Msk: u32 = 480;
pub const DWT_CTRL_POSTPRESET_Pos: u32 = 1;
pub const DWT_CTRL_POSTPRESET_Msk: u32 = 30;
pub const DWT_CTRL_CYCCNTENA_Pos: u32 = 0;
pub const DWT_CTRL_CYCCNTENA_Msk: u32 = 1;
pub const DWT_CPICNT_CPICNT_Pos: u32 = 0;
pub const DWT_CPICNT_CPICNT_Msk: u32 = 255;
pub const DWT_EXCCNT_EXCCNT_Pos: u32 = 0;
pub const DWT_EXCCNT_EXCCNT_Msk: u32 = 255;
pub const DWT_SLEEPCNT_SLEEPCNT_Pos: u32 = 0;
pub const DWT_SLEEPCNT_SLEEPCNT_Msk: u32 = 255;
pub const DWT_LSUCNT_LSUCNT_Pos: u32 = 0;
pub const DWT_LSUCNT_LSUCNT_Msk: u32 = 255;
pub const DWT_FOLDCNT_FOLDCNT_Pos: u32 = 0;
pub const DWT_FOLDCNT_FOLDCNT_Msk: u32 = 255;
pub const DWT_MASK_MASK_Pos: u32 = 0;
pub const DWT_MASK_MASK_Msk: u32 = 31;
pub const DWT_FUNCTION_MATCHED_Pos: u32 = 24;
pub const DWT_FUNCTION_MATCHED_Msk: u32 = 16777216;
pub const DWT_FUNCTION_DATAVADDR1_Pos: u32 = 16;
pub const DWT_FUNCTION_DATAVADDR1_Msk: u32 = 983040;
pub const DWT_FUNCTION_DATAVADDR0_Pos: u32 = 12;
pub const DWT_FUNCTION_DATAVADDR0_Msk: u32 = 61440;
pub const DWT_FUNCTION_DATAVSIZE_Pos: u32 = 10;
pub const DWT_FUNCTION_DATAVSIZE_Msk: u32 = 3072;
pub const DWT_FUNCTION_LNK1ENA_Pos: u32 = 9;
pub const DWT_FUNCTION_LNK1ENA_Msk: u32 = 512;
pub const DWT_FUNCTION_DATAVMATCH_Pos: u32 = 8;
pub const DWT_FUNCTION_DATAVMATCH_Msk: u32 = 256;
pub const DWT_FUNCTION_CYCMATCH_Pos: u32 = 7;
pub const DWT_FUNCTION_CYCMATCH_Msk: u32 = 128;
pub const DWT_FUNCTION_EMITRANGE_Pos: u32 = 5;
pub const DWT_FUNCTION_EMITRANGE_Msk: u32 = 32;
pub const DWT_FUNCTION_FUNCTION_Pos: u32 = 0;
pub const DWT_FUNCTION_FUNCTION_Msk: u32 = 15;
pub const TPI_ACPR_PRESCALER_Pos: u32 = 0;
pub const TPI_ACPR_PRESCALER_Msk: u32 = 8191;
pub const TPI_SPPR_TXMODE_Pos: u32 = 0;
pub const TPI_SPPR_TXMODE_Msk: u32 = 3;
pub const TPI_FFSR_FtNonStop_Pos: u32 = 3;
pub const TPI_FFSR_FtNonStop_Msk: u32 = 8;
pub const TPI_FFSR_TCPresent_Pos: u32 = 2;
pub const TPI_FFSR_TCPresent_Msk: u32 = 4;
pub const TPI_FFSR_FtStopped_Pos: u32 = 1;
pub const TPI_FFSR_FtStopped_Msk: u32 = 2;
pub const TPI_FFSR_FlInProg_Pos: u32 = 0;
pub const TPI_FFSR_FlInProg_Msk: u32 = 1;
pub const TPI_FFCR_TrigIn_Pos: u32 = 8;
pub const TPI_FFCR_TrigIn_Msk: u32 = 256;
pub const TPI_FFCR_EnFCont_Pos: u32 = 1;
pub const TPI_FFCR_EnFCont_Msk: u32 = 2;
pub const TPI_TRIGGER_TRIGGER_Pos: u32 = 0;
pub const TPI_TRIGGER_TRIGGER_Msk: u32 = 1;
pub const TPI_FIFO0_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO0_ITM_ATVALID_Msk: u32 = 536870912;
pub const TPI_FIFO0_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO0_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO0_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO0_ETM_ATVALID_Msk: u32 = 67108864;
pub const TPI_FIFO0_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO0_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO0_ETM2_Pos: u32 = 16;
pub const TPI_FIFO0_ETM2_Msk: u32 = 16711680;
pub const TPI_FIFO0_ETM1_Pos: u32 = 8;
pub const TPI_FIFO0_ETM1_Msk: u32 = 65280;
pub const TPI_FIFO0_ETM0_Pos: u32 = 0;
pub const TPI_FIFO0_ETM0_Msk: u32 = 255;
pub const TPI_ITATBCTR2_ATREADY2_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY2_Msk: u32 = 1;
pub const TPI_ITATBCTR2_ATREADY1_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY1_Msk: u32 = 1;
pub const TPI_FIFO1_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO1_ITM_ATVALID_Msk: u32 = 536870912;
pub const TPI_FIFO1_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO1_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO1_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO1_ETM_ATVALID_Msk: u32 = 67108864;
pub const TPI_FIFO1_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO1_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO1_ITM2_Pos: u32 = 16;
pub const TPI_FIFO1_ITM2_Msk: u32 = 16711680;
pub const TPI_FIFO1_ITM1_Pos: u32 = 8;
pub const TPI_FIFO1_ITM1_Msk: u32 = 65280;
pub const TPI_FIFO1_ITM0_Pos: u32 = 0;
pub const TPI_FIFO1_ITM0_Msk: u32 = 255;
pub const TPI_ITATBCTR0_ATREADY2_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY2_Msk: u32 = 1;
pub const TPI_ITATBCTR0_ATREADY1_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY1_Msk: u32 = 1;
pub const TPI_ITCTRL_Mode_Pos: u32 = 0;
pub const TPI_ITCTRL_Mode_Msk: u32 = 3;
pub const TPI_DEVID_NRZVALID_Pos: u32 = 11;
pub const TPI_DEVID_NRZVALID_Msk: u32 = 2048;
pub const TPI_DEVID_MANCVALID_Pos: u32 = 10;
pub const TPI_DEVID_MANCVALID_Msk: u32 = 1024;
pub const TPI_DEVID_PTINVALID_Pos: u32 = 9;
pub const TPI_DEVID_PTINVALID_Msk: u32 = 512;
pub const TPI_DEVID_MinBufSz_Pos: u32 = 6;
pub const TPI_DEVID_MinBufSz_Msk: u32 = 448;
pub const TPI_DEVID_AsynClkIn_Pos: u32 = 5;
pub const TPI_DEVID_AsynClkIn_Msk: u32 = 32;
pub const TPI_DEVID_NrTraceInput_Pos: u32 = 0;
pub const TPI_DEVID_NrTraceInput_Msk: u32 = 31;
pub const TPI_DEVTYPE_SubType_Pos: u32 = 4;
pub const TPI_DEVTYPE_SubType_Msk: u32 = 15;
pub const TPI_DEVTYPE_MajorType_Pos: u32 = 0;
pub const TPI_DEVTYPE_MajorType_Msk: u32 = 15;
pub const MPU_TYPE_RALIASES: u32 = 4;
pub const MPU_TYPE_IREGION_Pos: u32 = 16;
pub const MPU_TYPE_IREGION_Msk: u32 = 16711680;
pub const MPU_TYPE_DREGION_Pos: u32 = 8;
pub const MPU_TYPE_DREGION_Msk: u32 = 65280;
pub const MPU_TYPE_SEPARATE_Pos: u32 = 0;
pub const MPU_TYPE_SEPARATE_Msk: u32 = 1;
pub const MPU_CTRL_PRIVDEFENA_Pos: u32 = 2;
pub const MPU_CTRL_PRIVDEFENA_Msk: u32 = 4;
pub const MPU_CTRL_HFNMIENA_Pos: u32 = 1;
pub const MPU_CTRL_HFNMIENA_Msk: u32 = 2;
pub const MPU_CTRL_ENABLE_Pos: u32 = 0;
pub const MPU_CTRL_ENABLE_Msk: u32 = 1;
pub const MPU_RNR_REGION_Pos: u32 = 0;
pub const MPU_RNR_REGION_Msk: u32 = 255;
pub const MPU_RBAR_ADDR_Pos: u32 = 5;
pub const MPU_RBAR_ADDR_Msk: u32 = 4294967264;
pub const MPU_RBAR_VALID_Pos: u32 = 4;
pub const MPU_RBAR_VALID_Msk: u32 = 16;
pub const MPU_RBAR_REGION_Pos: u32 = 0;
pub const MPU_RBAR_REGION_Msk: u32 = 15;
pub const MPU_RASR_ATTRS_Pos: u32 = 16;
pub const MPU_RASR_ATTRS_Msk: u32 = 4294901760;
pub const MPU_RASR_XN_Pos: u32 = 28;
pub const MPU_RASR_XN_Msk: u32 = 268435456;
pub const MPU_RASR_AP_Pos: u32 = 24;
pub const MPU_RASR_AP_Msk: u32 = 117440512;
pub const MPU_RASR_TEX_Pos: u32 = 19;
pub const MPU_RASR_TEX_Msk: u32 = 3670016;
pub const MPU_RASR_S_Pos: u32 = 18;
pub const MPU_RASR_S_Msk: u32 = 262144;
pub const MPU_RASR_C_Pos: u32 = 17;
pub const MPU_RASR_C_Msk: u32 = 131072;
pub const MPU_RASR_B_Pos: u32 = 16;
pub const MPU_RASR_B_Msk: u32 = 65536;
pub const MPU_RASR_SRD_Pos: u32 = 8;
pub const MPU_RASR_SRD_Msk: u32 = 65280;
pub const MPU_RASR_SIZE_Pos: u32 = 1;
pub const MPU_RASR_SIZE_Msk: u32 = 62;
pub const MPU_RASR_ENABLE_Pos: u32 = 0;
pub const MPU_RASR_ENABLE_Msk: u32 = 1;
pub const FPU_FPCCR_ASPEN_Pos: u32 = 31;
pub const FPU_FPCCR_ASPEN_Msk: u32 = 2147483648;
pub const FPU_FPCCR_LSPEN_Pos: u32 = 30;
pub const FPU_FPCCR_LSPEN_Msk: u32 = 1073741824;
pub const FPU_FPCCR_MONRDY_Pos: u32 = 8;
pub const FPU_FPCCR_MONRDY_Msk: u32 = 256;
pub const FPU_FPCCR_BFRDY_Pos: u32 = 6;
pub const FPU_FPCCR_BFRDY_Msk: u32 = 64;
pub const FPU_FPCCR_MMRDY_Pos: u32 = 5;
pub const FPU_FPCCR_MMRDY_Msk: u32 = 32;
pub const FPU_FPCCR_HFRDY_Pos: u32 = 4;
pub const FPU_FPCCR_HFRDY_Msk: u32 = 16;
pub const FPU_FPCCR_THREAD_Pos: u32 = 3;
pub const FPU_FPCCR_THREAD_Msk: u32 = 8;
pub const FPU_FPCCR_USER_Pos: u32 = 1;
pub const FPU_FPCCR_USER_Msk: u32 = 2;
pub const FPU_FPCCR_LSPACT_Pos: u32 = 0;
pub const FPU_FPCCR_LSPACT_Msk: u32 = 1;
pub const FPU_FPCAR_ADDRESS_Pos: u32 = 3;
pub const FPU_FPCAR_ADDRESS_Msk: u32 = 4294967288;
pub const FPU_FPDSCR_AHP_Pos: u32 = 26;
pub const FPU_FPDSCR_AHP_Msk: u32 = 67108864;
pub const FPU_FPDSCR_DN_Pos: u32 = 25;
pub const FPU_FPDSCR_DN_Msk: u32 = 33554432;
pub const FPU_FPDSCR_FZ_Pos: u32 = 24;
pub const FPU_FPDSCR_FZ_Msk: u32 = 16777216;
pub const FPU_FPDSCR_RMode_Pos: u32 = 22;
pub const FPU_FPDSCR_RMode_Msk: u32 = 12582912;
pub const FPU_MVFR0_FP_rounding_modes_Pos: u32 = 28;
pub const FPU_MVFR0_FP_rounding_modes_Msk: u32 = 4026531840;
pub const FPU_MVFR0_Short_vectors_Pos: u32 = 24;
pub const FPU_MVFR0_Short_vectors_Msk: u32 = 251658240;
pub const FPU_MVFR0_Square_root_Pos: u32 = 20;
pub const FPU_MVFR0_Square_root_Msk: u32 = 15728640;
pub const FPU_MVFR0_Divide_Pos: u32 = 16;
pub const FPU_MVFR0_Divide_Msk: u32 = 983040;
pub const FPU_MVFR0_FP_excep_trapping_Pos: u32 = 12;
pub const FPU_MVFR0_FP_excep_trapping_Msk: u32 = 61440;
pub const FPU_MVFR0_Double_precision_Pos: u32 = 8;
pub const FPU_MVFR0_Double_precision_Msk: u32 = 3840;
pub const FPU_MVFR0_Single_precision_Pos: u32 = 4;
pub const FPU_MVFR0_Single_precision_Msk: u32 = 240;
pub const FPU_MVFR0_A_SIMD_registers_Pos: u32 = 0;
pub const FPU_MVFR0_A_SIMD_registers_Msk: u32 = 15;
pub const FPU_MVFR1_FP_fused_MAC_Pos: u32 = 28;
pub const FPU_MVFR1_FP_fused_MAC_Msk: u32 = 4026531840;
pub const FPU_MVFR1_FP_HPFP_Pos: u32 = 24;
pub const FPU_MVFR1_FP_HPFP_Msk: u32 = 251658240;
pub const FPU_MVFR1_D_NaN_mode_Pos: u32 = 4;
pub const FPU_MVFR1_D_NaN_mode_Msk: u32 = 240;
pub const FPU_MVFR1_FtZ_mode_Pos: u32 = 0;
pub const FPU_MVFR1_FtZ_mode_Msk: u32 = 15;
pub const FPU_MVFR2_VFP_Misc_Pos: u32 = 4;
pub const FPU_MVFR2_VFP_Misc_Msk: u32 = 240;
pub const CoreDebug_DHCSR_DBGKEY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_DBGKEY_Msk: u32 = 4294901760;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos: u32 = 25;
pub const CoreDebug_DHCSR_S_RESET_ST_Msk: u32 = 33554432;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos: u32 = 24;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk: u32 = 16777216;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos: u32 = 19;
pub const CoreDebug_DHCSR_S_LOCKUP_Msk: u32 = 524288;
pub const CoreDebug_DHCSR_S_SLEEP_Pos: u32 = 18;
pub const CoreDebug_DHCSR_S_SLEEP_Msk: u32 = 262144;
pub const CoreDebug_DHCSR_S_HALT_Pos: u32 = 17;
pub const CoreDebug_DHCSR_S_HALT_Msk: u32 = 131072;
pub const CoreDebug_DHCSR_S_REGRDY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_S_REGRDY_Msk: u32 = 65536;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos: u32 = 5;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk: u32 = 32;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos: u32 = 3;
pub const CoreDebug_DHCSR_C_MASKINTS_Msk: u32 = 8;
pub const CoreDebug_DHCSR_C_STEP_Pos: u32 = 2;
pub const CoreDebug_DHCSR_C_STEP_Msk: u32 = 4;
pub const CoreDebug_DHCSR_C_HALT_Pos: u32 = 1;
pub const CoreDebug_DHCSR_C_HALT_Msk: u32 = 2;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos: u32 = 0;
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk: u32 = 1;
pub const CoreDebug_DCRSR_REGWnR_Pos: u32 = 16;
pub const CoreDebug_DCRSR_REGWnR_Msk: u32 = 65536;
pub const CoreDebug_DCRSR_REGSEL_Pos: u32 = 0;
pub const CoreDebug_DCRSR_REGSEL_Msk: u32 = 31;
pub const CoreDebug_DEMCR_TRCENA_Pos: u32 = 24;
pub const CoreDebug_DEMCR_TRCENA_Msk: u32 = 16777216;
pub const CoreDebug_DEMCR_MON_REQ_Pos: u32 = 19;
pub const CoreDebug_DEMCR_MON_REQ_Msk: u32 = 524288;
pub const CoreDebug_DEMCR_MON_STEP_Pos: u32 = 18;
pub const CoreDebug_DEMCR_MON_STEP_Msk: u32 = 262144;
pub const CoreDebug_DEMCR_MON_PEND_Pos: u32 = 17;
pub const CoreDebug_DEMCR_MON_PEND_Msk: u32 = 131072;
pub const CoreDebug_DEMCR_MON_EN_Pos: u32 = 16;
pub const CoreDebug_DEMCR_MON_EN_Msk: u32 = 65536;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos: u32 = 10;
pub const CoreDebug_DEMCR_VC_HARDERR_Msk: u32 = 1024;
pub const CoreDebug_DEMCR_VC_INTERR_Pos: u32 = 9;
pub const CoreDebug_DEMCR_VC_INTERR_Msk: u32 = 512;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos: u32 = 8;
pub const CoreDebug_DEMCR_VC_BUSERR_Msk: u32 = 256;
pub const CoreDebug_DEMCR_VC_STATERR_Pos: u32 = 7;
pub const CoreDebug_DEMCR_VC_STATERR_Msk: u32 = 128;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos: u32 = 6;
pub const CoreDebug_DEMCR_VC_CHKERR_Msk: u32 = 64;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos: u32 = 5;
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk: u32 = 32;
pub const CoreDebug_DEMCR_VC_MMERR_Pos: u32 = 4;
pub const CoreDebug_DEMCR_VC_MMERR_Msk: u32 = 16;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos: u32 = 0;
pub const CoreDebug_DEMCR_VC_CORERESET_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const DWT_BASE: u32 = 3758100480;
pub const TPI_BASE: u32 = 3758358528;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const MPU_BASE: u32 = 3758157200;
pub const FPU_BASE: u32 = 3758157616;
pub const NVIC_USER_IRQ_OFFSET: u32 = 16;
pub const EXC_RETURN_HANDLER: u32 = 4294967281;
pub const EXC_RETURN_THREAD_MSP: u32 = 4294967289;
pub const EXC_RETURN_THREAD_PSP: u32 = 4294967293;
pub const EXC_RETURN_HANDLER_FPU: u32 = 4294967265;
pub const EXC_RETURN_THREAD_MSP_FPU: u32 = 4294967273;
pub const EXC_RETURN_THREAD_PSP_FPU: u32 = 4294967277;
pub const ARM_MPU_AP_NONE: u32 = 0;
pub const ARM_MPU_AP_PRIV: u32 = 1;
pub const ARM_MPU_AP_URO: u32 = 2;
pub const ARM_MPU_AP_FULL: u32 = 3;
pub const ARM_MPU_AP_PRO: u32 = 5;
pub const ARM_MPU_AP_RO: u32 = 6;
pub const ARM_MPU_CACHEP_NOCACHE: u32 = 0;
pub const ARM_MPU_CACHEP_WB_WRA: u32 = 1;
pub const ARM_MPU_CACHEP_WT_NWA: u32 = 2;
pub const ARM_MPU_CACHEP_WB_NWA: u32 = 3;
pub const RTC_TAMP_INT_NB: u32 = 4;
pub const RTC_TAMP_NB: u32 = 3;
pub const RTC_BACKUP_NB: u32 = 16;
pub const FLASH_BASE: u32 = 134217728;
pub const SRAM1_BASE: u32 = 536870912;
pub const SRAM2_BASE: u32 = 536887296;
pub const CCMSRAM_BASE: u32 = 268435456;
pub const PERIPH_BASE: u32 = 1073741824;
pub const SRAM1_BB_BASE: u32 = 570425344;
pub const SRAM2_BB_BASE: u32 = 570949632;
pub const CCMSRAM_BB_BASE: u32 = 571146240;
pub const PERIPH_BB_BASE: u32 = 1107296256;
pub const SRAM_BASE: u32 = 536870912;
pub const SRAM_BB_BASE: u32 = 570425344;
pub const SRAM1_SIZE_MAX: u32 = 16384;
pub const SRAM2_SIZE: u32 = 6144;
pub const CCMSRAM_SIZE: u32 = 10240;
pub const APB1PERIPH_BASE: u32 = 1073741824;
pub const APB2PERIPH_BASE: u32 = 1073807360;
pub const AHB1PERIPH_BASE: u32 = 1073872896;
pub const AHB2PERIPH_BASE: u32 = 1207959552;
pub const TIM2_BASE: u32 = 1073741824;
pub const TIM3_BASE: u32 = 1073742848;
pub const TIM4_BASE: u32 = 1073743872;
pub const TIM6_BASE: u32 = 1073745920;
pub const TIM7_BASE: u32 = 1073746944;
pub const CRS_BASE: u32 = 1073750016;
pub const TAMP_BASE: u32 = 1073751040;
pub const RTC_BASE: u32 = 1073752064;
pub const WWDG_BASE: u32 = 1073753088;
pub const IWDG_BASE: u32 = 1073754112;
pub const SPI2_BASE: u32 = 1073756160;
pub const SPI3_BASE: u32 = 1073757184;
pub const USART2_BASE: u32 = 1073759232;
pub const USART3_BASE: u32 = 1073760256;
pub const UART4_BASE: u32 = 1073761280;
pub const I2C1_BASE: u32 = 1073763328;
pub const I2C2_BASE: u32 = 1073764352;
pub const USB_BASE: u32 = 1073765376;
pub const USB_PMAADDR: u32 = 1073766400;
pub const FDCAN1_BASE: u32 = 1073767424;
pub const FDCAN_CONFIG_BASE: u32 = 1073767680;
pub const PWR_BASE: u32 = 1073770496;
pub const I2C3_BASE: u32 = 1073772544;
pub const LPTIM1_BASE: u32 = 1073773568;
pub const LPUART1_BASE: u32 = 1073774592;
pub const UCPD1_BASE: u32 = 1073782784;
pub const SRAMCAN_BASE: u32 = 1073783808;
pub const SYSCFG_BASE: u32 = 1073807360;
pub const VREFBUF_BASE: u32 = 1073807408;
pub const COMP1_BASE: u32 = 1073807872;
pub const COMP2_BASE: u32 = 1073807876;
pub const COMP3_BASE: u32 = 1073807880;
pub const COMP4_BASE: u32 = 1073807884;
pub const OPAMP_BASE: u32 = 1073808128;
pub const OPAMP1_BASE: u32 = 1073808128;
pub const OPAMP2_BASE: u32 = 1073808132;
pub const OPAMP3_BASE: u32 = 1073808136;
pub const EXTI_BASE: u32 = 1073808384;
pub const TIM1_BASE: u32 = 1073818624;
pub const SPI1_BASE: u32 = 1073819648;
pub const TIM8_BASE: u32 = 1073820672;
pub const USART1_BASE: u32 = 1073821696;
pub const TIM15_BASE: u32 = 1073823744;
pub const TIM16_BASE: u32 = 1073824768;
pub const TIM17_BASE: u32 = 1073825792;
pub const SAI1_BASE: u32 = 1073828864;
pub const SAI1_Block_A_BASE: u32 = 1073828868;
pub const SAI1_Block_B_BASE: u32 = 1073828900;
pub const DMA1_BASE: u32 = 1073872896;
pub const DMA2_BASE: u32 = 1073873920;
pub const DMAMUX1_BASE: u32 = 1073874944;
pub const CORDIC_BASE: u32 = 1073875968;
pub const RCC_BASE: u32 = 1073876992;
pub const FMAC_BASE: u32 = 1073878016;
pub const FLASH_R_BASE: u32 = 1073881088;
pub const CRC_BASE: u32 = 1073885184;
pub const DMA1_Channel1_BASE: u32 = 1073872904;
pub const DMA1_Channel2_BASE: u32 = 1073872924;
pub const DMA1_Channel3_BASE: u32 = 1073872944;
pub const DMA1_Channel4_BASE: u32 = 1073872964;
pub const DMA1_Channel5_BASE: u32 = 1073872984;
pub const DMA1_Channel6_BASE: u32 = 1073873004;
pub const DMA2_Channel1_BASE: u32 = 1073873928;
pub const DMA2_Channel2_BASE: u32 = 1073873948;
pub const DMA2_Channel3_BASE: u32 = 1073873968;
pub const DMA2_Channel4_BASE: u32 = 1073873988;
pub const DMA2_Channel5_BASE: u32 = 1073874008;
pub const DMA2_Channel6_BASE: u32 = 1073874028;
pub const DMAMUX1_Channel0_BASE: u32 = 1073874944;
pub const DMAMUX1_Channel1_BASE: u32 = 1073874948;
pub const DMAMUX1_Channel2_BASE: u32 = 1073874952;
pub const DMAMUX1_Channel3_BASE: u32 = 1073874956;
pub const DMAMUX1_Channel4_BASE: u32 = 1073874960;
pub const DMAMUX1_Channel5_BASE: u32 = 1073874964;
pub const DMAMUX1_Channel6_BASE: u32 = 1073874976;
pub const DMAMUX1_Channel7_BASE: u32 = 1073874980;
pub const DMAMUX1_Channel8_BASE: u32 = 1073874984;
pub const DMAMUX1_Channel9_BASE: u32 = 1073874988;
pub const DMAMUX1_Channel10_BASE: u32 = 1073874992;
pub const DMAMUX1_Channel11_BASE: u32 = 1073874996;
pub const DMAMUX1_RequestGenerator0_BASE: u32 = 1073875200;
pub const DMAMUX1_RequestGenerator1_BASE: u32 = 1073875204;
pub const DMAMUX1_RequestGenerator2_BASE: u32 = 1073875208;
pub const DMAMUX1_RequestGenerator3_BASE: u32 = 1073875212;
pub const DMAMUX1_ChannelStatus_BASE: u32 = 1073875072;
pub const DMAMUX1_RequestGenStatus_BASE: u32 = 1073875264;
pub const GPIOA_BASE: u32 = 1207959552;
pub const GPIOB_BASE: u32 = 1207960576;
pub const GPIOC_BASE: u32 = 1207961600;
pub const GPIOD_BASE: u32 = 1207962624;
pub const GPIOE_BASE: u32 = 1207963648;
pub const GPIOF_BASE: u32 = 1207964672;
pub const GPIOG_BASE: u32 = 1207965696;
pub const ADC1_BASE: u32 = 1342177280;
pub const ADC2_BASE: u32 = 1342177536;
pub const ADC12_COMMON_BASE: u32 = 1342178048;
pub const DAC_BASE: u32 = 1342179328;
pub const DAC1_BASE: u32 = 1342179328;
pub const DAC3_BASE: u32 = 1342181376;
pub const RNG_BASE: u32 = 1342572544;
pub const DBGMCU_BASE: u32 = 3758366720;
pub const PACKAGE_BASE: u32 = 536835328;
pub const UID_BASE: u32 = 536835472;
pub const FLASHSIZE_BASE: u32 = 536835552;
pub const LSI_STARTUP_TIME: u32 = 130;
pub const ADC_ISR_ADRDY_Pos: u32 = 0;
pub const ADC_ISR_ADRDY_Msk: u32 = 1;
pub const ADC_ISR_ADRDY: u32 = 1;
pub const ADC_ISR_EOSMP_Pos: u32 = 1;
pub const ADC_ISR_EOSMP_Msk: u32 = 2;
pub const ADC_ISR_EOSMP: u32 = 2;
pub const ADC_ISR_EOC_Pos: u32 = 2;
pub const ADC_ISR_EOC_Msk: u32 = 4;
pub const ADC_ISR_EOC: u32 = 4;
pub const ADC_ISR_EOS_Pos: u32 = 3;
pub const ADC_ISR_EOS_Msk: u32 = 8;
pub const ADC_ISR_EOS: u32 = 8;
pub const ADC_ISR_OVR_Pos: u32 = 4;
pub const ADC_ISR_OVR_Msk: u32 = 16;
pub const ADC_ISR_OVR: u32 = 16;
pub const ADC_ISR_JEOC_Pos: u32 = 5;
pub const ADC_ISR_JEOC_Msk: u32 = 32;
pub const ADC_ISR_JEOC: u32 = 32;
pub const ADC_ISR_JEOS_Pos: u32 = 6;
pub const ADC_ISR_JEOS_Msk: u32 = 64;
pub const ADC_ISR_JEOS: u32 = 64;
pub const ADC_ISR_AWD1_Pos: u32 = 7;
pub const ADC_ISR_AWD1_Msk: u32 = 128;
pub const ADC_ISR_AWD1: u32 = 128;
pub const ADC_ISR_AWD2_Pos: u32 = 8;
pub const ADC_ISR_AWD2_Msk: u32 = 256;
pub const ADC_ISR_AWD2: u32 = 256;
pub const ADC_ISR_AWD3_Pos: u32 = 9;
pub const ADC_ISR_AWD3_Msk: u32 = 512;
pub const ADC_ISR_AWD3: u32 = 512;
pub const ADC_ISR_JQOVF_Pos: u32 = 10;
pub const ADC_ISR_JQOVF_Msk: u32 = 1024;
pub const ADC_ISR_JQOVF: u32 = 1024;
pub const ADC_IER_ADRDYIE_Pos: u32 = 0;
pub const ADC_IER_ADRDYIE_Msk: u32 = 1;
pub const ADC_IER_ADRDYIE: u32 = 1;
pub const ADC_IER_EOSMPIE_Pos: u32 = 1;
pub const ADC_IER_EOSMPIE_Msk: u32 = 2;
pub const ADC_IER_EOSMPIE: u32 = 2;
pub const ADC_IER_EOCIE_Pos: u32 = 2;
pub const ADC_IER_EOCIE_Msk: u32 = 4;
pub const ADC_IER_EOCIE: u32 = 4;
pub const ADC_IER_EOSIE_Pos: u32 = 3;
pub const ADC_IER_EOSIE_Msk: u32 = 8;
pub const ADC_IER_EOSIE: u32 = 8;
pub const ADC_IER_OVRIE_Pos: u32 = 4;
pub const ADC_IER_OVRIE_Msk: u32 = 16;
pub const ADC_IER_OVRIE: u32 = 16;
pub const ADC_IER_JEOCIE_Pos: u32 = 5;
pub const ADC_IER_JEOCIE_Msk: u32 = 32;
pub const ADC_IER_JEOCIE: u32 = 32;
pub const ADC_IER_JEOSIE_Pos: u32 = 6;
pub const ADC_IER_JEOSIE_Msk: u32 = 64;
pub const ADC_IER_JEOSIE: u32 = 64;
pub const ADC_IER_AWD1IE_Pos: u32 = 7;
pub const ADC_IER_AWD1IE_Msk: u32 = 128;
pub const ADC_IER_AWD1IE: u32 = 128;
pub const ADC_IER_AWD2IE_Pos: u32 = 8;
pub const ADC_IER_AWD2IE_Msk: u32 = 256;
pub const ADC_IER_AWD2IE: u32 = 256;
pub const ADC_IER_AWD3IE_Pos: u32 = 9;
pub const ADC_IER_AWD3IE_Msk: u32 = 512;
pub const ADC_IER_AWD3IE: u32 = 512;
pub const ADC_IER_JQOVFIE_Pos: u32 = 10;
pub const ADC_IER_JQOVFIE_Msk: u32 = 1024;
pub const ADC_IER_JQOVFIE: u32 = 1024;
pub const ADC_CR_ADEN_Pos: u32 = 0;
pub const ADC_CR_ADEN_Msk: u32 = 1;
pub const ADC_CR_ADEN: u32 = 1;
pub const ADC_CR_ADDIS_Pos: u32 = 1;
pub const ADC_CR_ADDIS_Msk: u32 = 2;
pub const ADC_CR_ADDIS: u32 = 2;
pub const ADC_CR_ADSTART_Pos: u32 = 2;
pub const ADC_CR_ADSTART_Msk: u32 = 4;
pub const ADC_CR_ADSTART: u32 = 4;
pub const ADC_CR_JADSTART_Pos: u32 = 3;
pub const ADC_CR_JADSTART_Msk: u32 = 8;
pub const ADC_CR_JADSTART: u32 = 8;
pub const ADC_CR_ADSTP_Pos: u32 = 4;
pub const ADC_CR_ADSTP_Msk: u32 = 16;
pub const ADC_CR_ADSTP: u32 = 16;
pub const ADC_CR_JADSTP_Pos: u32 = 5;
pub const ADC_CR_JADSTP_Msk: u32 = 32;
pub const ADC_CR_JADSTP: u32 = 32;
pub const ADC_CR_ADVREGEN_Pos: u32 = 28;
pub const ADC_CR_ADVREGEN_Msk: u32 = 268435456;
pub const ADC_CR_ADVREGEN: u32 = 268435456;
pub const ADC_CR_DEEPPWD_Pos: u32 = 29;
pub const ADC_CR_DEEPPWD_Msk: u32 = 536870912;
pub const ADC_CR_DEEPPWD: u32 = 536870912;
pub const ADC_CR_ADCALDIF_Pos: u32 = 30;
pub const ADC_CR_ADCALDIF_Msk: u32 = 1073741824;
pub const ADC_CR_ADCALDIF: u32 = 1073741824;
pub const ADC_CR_ADCAL_Pos: u32 = 31;
pub const ADC_CR_ADCAL_Msk: u32 = 2147483648;
pub const ADC_CR_ADCAL: u32 = 2147483648;
pub const ADC_CFGR_DMAEN_Pos: u32 = 0;
pub const ADC_CFGR_DMAEN_Msk: u32 = 1;
pub const ADC_CFGR_DMAEN: u32 = 1;
pub const ADC_CFGR_DMACFG_Pos: u32 = 1;
pub const ADC_CFGR_DMACFG_Msk: u32 = 2;
pub const ADC_CFGR_DMACFG: u32 = 2;
pub const ADC_CFGR_RES_Pos: u32 = 3;
pub const ADC_CFGR_RES_Msk: u32 = 24;
pub const ADC_CFGR_RES: u32 = 24;
pub const ADC_CFGR_RES_0: u32 = 8;
pub const ADC_CFGR_RES_1: u32 = 16;
pub const ADC_CFGR_EXTSEL_Pos: u32 = 5;
pub const ADC_CFGR_EXTSEL_Msk: u32 = 992;
pub const ADC_CFGR_EXTSEL: u32 = 992;
pub const ADC_CFGR_EXTSEL_0: u32 = 32;
pub const ADC_CFGR_EXTSEL_1: u32 = 64;
pub const ADC_CFGR_EXTSEL_2: u32 = 128;
pub const ADC_CFGR_EXTSEL_3: u32 = 256;
pub const ADC_CFGR_EXTSEL_4: u32 = 512;
pub const ADC_CFGR_EXTEN_Pos: u32 = 10;
pub const ADC_CFGR_EXTEN_Msk: u32 = 3072;
pub const ADC_CFGR_EXTEN: u32 = 3072;
pub const ADC_CFGR_EXTEN_0: u32 = 1024;
pub const ADC_CFGR_EXTEN_1: u32 = 2048;
pub const ADC_CFGR_OVRMOD_Pos: u32 = 12;
pub const ADC_CFGR_OVRMOD_Msk: u32 = 4096;
pub const ADC_CFGR_OVRMOD: u32 = 4096;
pub const ADC_CFGR_CONT_Pos: u32 = 13;
pub const ADC_CFGR_CONT_Msk: u32 = 8192;
pub const ADC_CFGR_CONT: u32 = 8192;
pub const ADC_CFGR_AUTDLY_Pos: u32 = 14;
pub const ADC_CFGR_AUTDLY_Msk: u32 = 16384;
pub const ADC_CFGR_AUTDLY: u32 = 16384;
pub const ADC_CFGR_ALIGN_Pos: u32 = 15;
pub const ADC_CFGR_ALIGN_Msk: u32 = 32768;
pub const ADC_CFGR_ALIGN: u32 = 32768;
pub const ADC_CFGR_DISCEN_Pos: u32 = 16;
pub const ADC_CFGR_DISCEN_Msk: u32 = 65536;
pub const ADC_CFGR_DISCEN: u32 = 65536;
pub const ADC_CFGR_DISCNUM_Pos: u32 = 17;
pub const ADC_CFGR_DISCNUM_Msk: u32 = 917504;
pub const ADC_CFGR_DISCNUM: u32 = 917504;
pub const ADC_CFGR_DISCNUM_0: u32 = 131072;
pub const ADC_CFGR_DISCNUM_1: u32 = 262144;
pub const ADC_CFGR_DISCNUM_2: u32 = 524288;
pub const ADC_CFGR_JDISCEN_Pos: u32 = 20;
pub const ADC_CFGR_JDISCEN_Msk: u32 = 1048576;
pub const ADC_CFGR_JDISCEN: u32 = 1048576;
pub const ADC_CFGR_JQM_Pos: u32 = 21;
pub const ADC_CFGR_JQM_Msk: u32 = 2097152;
pub const ADC_CFGR_JQM: u32 = 2097152;
pub const ADC_CFGR_AWD1SGL_Pos: u32 = 22;
pub const ADC_CFGR_AWD1SGL_Msk: u32 = 4194304;
pub const ADC_CFGR_AWD1SGL: u32 = 4194304;
pub const ADC_CFGR_AWD1EN_Pos: u32 = 23;
pub const ADC_CFGR_AWD1EN_Msk: u32 = 8388608;
pub const ADC_CFGR_AWD1EN: u32 = 8388608;
pub const ADC_CFGR_JAWD1EN_Pos: u32 = 24;
pub const ADC_CFGR_JAWD1EN_Msk: u32 = 16777216;
pub const ADC_CFGR_JAWD1EN: u32 = 16777216;
pub const ADC_CFGR_JAUTO_Pos: u32 = 25;
pub const ADC_CFGR_JAUTO_Msk: u32 = 33554432;
pub const ADC_CFGR_JAUTO: u32 = 33554432;
pub const ADC_CFGR_AWD1CH_Pos: u32 = 26;
pub const ADC_CFGR_AWD1CH_Msk: u32 = 2080374784;
pub const ADC_CFGR_AWD1CH: u32 = 2080374784;
pub const ADC_CFGR_AWD1CH_0: u32 = 67108864;
pub const ADC_CFGR_AWD1CH_1: u32 = 134217728;
pub const ADC_CFGR_AWD1CH_2: u32 = 268435456;
pub const ADC_CFGR_AWD1CH_3: u32 = 536870912;
pub const ADC_CFGR_AWD1CH_4: u32 = 1073741824;
pub const ADC_CFGR_JQDIS_Pos: u32 = 31;
pub const ADC_CFGR_JQDIS_Msk: u32 = 2147483648;
pub const ADC_CFGR_JQDIS: u32 = 2147483648;
pub const ADC_CFGR2_ROVSE_Pos: u32 = 0;
pub const ADC_CFGR2_ROVSE_Msk: u32 = 1;
pub const ADC_CFGR2_ROVSE: u32 = 1;
pub const ADC_CFGR2_JOVSE_Pos: u32 = 1;
pub const ADC_CFGR2_JOVSE_Msk: u32 = 2;
pub const ADC_CFGR2_JOVSE: u32 = 2;
pub const ADC_CFGR2_OVSR_Pos: u32 = 2;
pub const ADC_CFGR2_OVSR_Msk: u32 = 28;
pub const ADC_CFGR2_OVSR: u32 = 28;
pub const ADC_CFGR2_OVSR_0: u32 = 4;
pub const ADC_CFGR2_OVSR_1: u32 = 8;
pub const ADC_CFGR2_OVSR_2: u32 = 16;
pub const ADC_CFGR2_OVSS_Pos: u32 = 5;
pub const ADC_CFGR2_OVSS_Msk: u32 = 480;
pub const ADC_CFGR2_OVSS: u32 = 480;
pub const ADC_CFGR2_OVSS_0: u32 = 32;
pub const ADC_CFGR2_OVSS_1: u32 = 64;
pub const ADC_CFGR2_OVSS_2: u32 = 128;
pub const ADC_CFGR2_OVSS_3: u32 = 256;
pub const ADC_CFGR2_TROVS_Pos: u32 = 9;
pub const ADC_CFGR2_TROVS_Msk: u32 = 512;
pub const ADC_CFGR2_TROVS: u32 = 512;
pub const ADC_CFGR2_ROVSM_Pos: u32 = 10;
pub const ADC_CFGR2_ROVSM_Msk: u32 = 1024;
pub const ADC_CFGR2_ROVSM: u32 = 1024;
pub const ADC_CFGR2_GCOMP_Pos: u32 = 16;
pub const ADC_CFGR2_GCOMP_Msk: u32 = 65536;
pub const ADC_CFGR2_GCOMP: u32 = 65536;
pub const ADC_CFGR2_SWTRIG_Pos: u32 = 25;
pub const ADC_CFGR2_SWTRIG_Msk: u32 = 33554432;
pub const ADC_CFGR2_SWTRIG: u32 = 33554432;
pub const ADC_CFGR2_BULB_Pos: u32 = 26;
pub const ADC_CFGR2_BULB_Msk: u32 = 67108864;
pub const ADC_CFGR2_BULB: u32 = 67108864;
pub const ADC_CFGR2_SMPTRIG_Pos: u32 = 27;
pub const ADC_CFGR2_SMPTRIG_Msk: u32 = 134217728;
pub const ADC_CFGR2_SMPTRIG: u32 = 134217728;
pub const ADC_SMPR1_SMP0_Pos: u32 = 0;
pub const ADC_SMPR1_SMP0_Msk: u32 = 7;
pub const ADC_SMPR1_SMP0: u32 = 7;
pub const ADC_SMPR1_SMP0_0: u32 = 1;
pub const ADC_SMPR1_SMP0_1: u32 = 2;
pub const ADC_SMPR1_SMP0_2: u32 = 4;
pub const ADC_SMPR1_SMP1_Pos: u32 = 3;
pub const ADC_SMPR1_SMP1_Msk: u32 = 56;
pub const ADC_SMPR1_SMP1: u32 = 56;
pub const ADC_SMPR1_SMP1_0: u32 = 8;
pub const ADC_SMPR1_SMP1_1: u32 = 16;
pub const ADC_SMPR1_SMP1_2: u32 = 32;
pub const ADC_SMPR1_SMP2_Pos: u32 = 6;
pub const ADC_SMPR1_SMP2_Msk: u32 = 448;
pub const ADC_SMPR1_SMP2: u32 = 448;
pub const ADC_SMPR1_SMP2_0: u32 = 64;
pub const ADC_SMPR1_SMP2_1: u32 = 128;
pub const ADC_SMPR1_SMP2_2: u32 = 256;
pub const ADC_SMPR1_SMP3_Pos: u32 = 9;
pub const ADC_SMPR1_SMP3_Msk: u32 = 3584;
pub const ADC_SMPR1_SMP3: u32 = 3584;
pub const ADC_SMPR1_SMP3_0: u32 = 512;
pub const ADC_SMPR1_SMP3_1: u32 = 1024;
pub const ADC_SMPR1_SMP3_2: u32 = 2048;
pub const ADC_SMPR1_SMP4_Pos: u32 = 12;
pub const ADC_SMPR1_SMP4_Msk: u32 = 28672;
pub const ADC_SMPR1_SMP4: u32 = 28672;
pub const ADC_SMPR1_SMP4_0: u32 = 4096;
pub const ADC_SMPR1_SMP4_1: u32 = 8192;
pub const ADC_SMPR1_SMP4_2: u32 = 16384;
pub const ADC_SMPR1_SMP5_Pos: u32 = 15;
pub const ADC_SMPR1_SMP5_Msk: u32 = 229376;
pub const ADC_SMPR1_SMP5: u32 = 229376;
pub const ADC_SMPR1_SMP5_0: u32 = 32768;
pub const ADC_SMPR1_SMP5_1: u32 = 65536;
pub const ADC_SMPR1_SMP5_2: u32 = 131072;
pub const ADC_SMPR1_SMP6_Pos: u32 = 18;
pub const ADC_SMPR1_SMP6_Msk: u32 = 1835008;
pub const ADC_SMPR1_SMP6: u32 = 1835008;
pub const ADC_SMPR1_SMP6_0: u32 = 262144;
pub const ADC_SMPR1_SMP6_1: u32 = 524288;
pub const ADC_SMPR1_SMP6_2: u32 = 1048576;
pub const ADC_SMPR1_SMP7_Pos: u32 = 21;
pub const ADC_SMPR1_SMP7_Msk: u32 = 14680064;
pub const ADC_SMPR1_SMP7: u32 = 14680064;
pub const ADC_SMPR1_SMP7_0: u32 = 2097152;
pub const ADC_SMPR1_SMP7_1: u32 = 4194304;
pub const ADC_SMPR1_SMP7_2: u32 = 8388608;
pub const ADC_SMPR1_SMP8_Pos: u32 = 24;
pub const ADC_SMPR1_SMP8_Msk: u32 = 117440512;
pub const ADC_SMPR1_SMP8: u32 = 117440512;
pub const ADC_SMPR1_SMP8_0: u32 = 16777216;
pub const ADC_SMPR1_SMP8_1: u32 = 33554432;
pub const ADC_SMPR1_SMP8_2: u32 = 67108864;
pub const ADC_SMPR1_SMP9_Pos: u32 = 27;
pub const ADC_SMPR1_SMP9_Msk: u32 = 939524096;
pub const ADC_SMPR1_SMP9: u32 = 939524096;
pub const ADC_SMPR1_SMP9_0: u32 = 134217728;
pub const ADC_SMPR1_SMP9_1: u32 = 268435456;
pub const ADC_SMPR1_SMP9_2: u32 = 536870912;
pub const ADC_SMPR1_SMPPLUS_Pos: u32 = 31;
pub const ADC_SMPR1_SMPPLUS_Msk: u32 = 2147483648;
pub const ADC_SMPR1_SMPPLUS: u32 = 2147483648;
pub const ADC_SMPR2_SMP10_Pos: u32 = 0;
pub const ADC_SMPR2_SMP10_Msk: u32 = 7;
pub const ADC_SMPR2_SMP10: u32 = 7;
pub const ADC_SMPR2_SMP10_0: u32 = 1;
pub const ADC_SMPR2_SMP10_1: u32 = 2;
pub const ADC_SMPR2_SMP10_2: u32 = 4;
pub const ADC_SMPR2_SMP11_Pos: u32 = 3;
pub const ADC_SMPR2_SMP11_Msk: u32 = 56;
pub const ADC_SMPR2_SMP11: u32 = 56;
pub const ADC_SMPR2_SMP11_0: u32 = 8;
pub const ADC_SMPR2_SMP11_1: u32 = 16;
pub const ADC_SMPR2_SMP11_2: u32 = 32;
pub const ADC_SMPR2_SMP12_Pos: u32 = 6;
pub const ADC_SMPR2_SMP12_Msk: u32 = 448;
pub const ADC_SMPR2_SMP12: u32 = 448;
pub const ADC_SMPR2_SMP12_0: u32 = 64;
pub const ADC_SMPR2_SMP12_1: u32 = 128;
pub const ADC_SMPR2_SMP12_2: u32 = 256;
pub const ADC_SMPR2_SMP13_Pos: u32 = 9;
pub const ADC_SMPR2_SMP13_Msk: u32 = 3584;
pub const ADC_SMPR2_SMP13: u32 = 3584;
pub const ADC_SMPR2_SMP13_0: u32 = 512;
pub const ADC_SMPR2_SMP13_1: u32 = 1024;
pub const ADC_SMPR2_SMP13_2: u32 = 2048;
pub const ADC_SMPR2_SMP14_Pos: u32 = 12;
pub const ADC_SMPR2_SMP14_Msk: u32 = 28672;
pub const ADC_SMPR2_SMP14: u32 = 28672;
pub const ADC_SMPR2_SMP14_0: u32 = 4096;
pub const ADC_SMPR2_SMP14_1: u32 = 8192;
pub const ADC_SMPR2_SMP14_2: u32 = 16384;
pub const ADC_SMPR2_SMP15_Pos: u32 = 15;
pub const ADC_SMPR2_SMP15_Msk: u32 = 229376;
pub const ADC_SMPR2_SMP15: u32 = 229376;
pub const ADC_SMPR2_SMP15_0: u32 = 32768;
pub const ADC_SMPR2_SMP15_1: u32 = 65536;
pub const ADC_SMPR2_SMP15_2: u32 = 131072;
pub const ADC_SMPR2_SMP16_Pos: u32 = 18;
pub const ADC_SMPR2_SMP16_Msk: u32 = 1835008;
pub const ADC_SMPR2_SMP16: u32 = 1835008;
pub const ADC_SMPR2_SMP16_0: u32 = 262144;
pub const ADC_SMPR2_SMP16_1: u32 = 524288;
pub const ADC_SMPR2_SMP16_2: u32 = 1048576;
pub const ADC_SMPR2_SMP17_Pos: u32 = 21;
pub const ADC_SMPR2_SMP17_Msk: u32 = 14680064;
pub const ADC_SMPR2_SMP17: u32 = 14680064;
pub const ADC_SMPR2_SMP17_0: u32 = 2097152;
pub const ADC_SMPR2_SMP17_1: u32 = 4194304;
pub const ADC_SMPR2_SMP17_2: u32 = 8388608;
pub const ADC_SMPR2_SMP18_Pos: u32 = 24;
pub const ADC_SMPR2_SMP18_Msk: u32 = 117440512;
pub const ADC_SMPR2_SMP18: u32 = 117440512;
pub const ADC_SMPR2_SMP18_0: u32 = 16777216;
pub const ADC_SMPR2_SMP18_1: u32 = 33554432;
pub const ADC_SMPR2_SMP18_2: u32 = 67108864;
pub const ADC_TR1_LT1_Pos: u32 = 0;
pub const ADC_TR1_LT1_Msk: u32 = 4095;
pub const ADC_TR1_LT1: u32 = 4095;
pub const ADC_TR1_AWDFILT_Pos: u32 = 12;
pub const ADC_TR1_AWDFILT_Msk: u32 = 28672;
pub const ADC_TR1_AWDFILT: u32 = 28672;
pub const ADC_TR1_AWDFILT_0: u32 = 4096;
pub const ADC_TR1_AWDFILT_1: u32 = 8192;
pub const ADC_TR1_AWDFILT_2: u32 = 16384;
pub const ADC_TR1_HT1_Pos: u32 = 16;
pub const ADC_TR1_HT1_Msk: u32 = 268369920;
pub const ADC_TR1_HT1: u32 = 268369920;
pub const ADC_TR2_LT2_Pos: u32 = 0;
pub const ADC_TR2_LT2_Msk: u32 = 255;
pub const ADC_TR2_LT2: u32 = 255;
pub const ADC_TR2_HT2_Pos: u32 = 16;
pub const ADC_TR2_HT2_Msk: u32 = 16711680;
pub const ADC_TR2_HT2: u32 = 16711680;
pub const ADC_TR3_LT3_Pos: u32 = 0;
pub const ADC_TR3_LT3_Msk: u32 = 255;
pub const ADC_TR3_LT3: u32 = 255;
pub const ADC_TR3_HT3_Pos: u32 = 16;
pub const ADC_TR3_HT3_Msk: u32 = 16711680;
pub const ADC_TR3_HT3: u32 = 16711680;
pub const ADC_SQR1_L_Pos: u32 = 0;
pub const ADC_SQR1_L_Msk: u32 = 15;
pub const ADC_SQR1_L: u32 = 15;
pub const ADC_SQR1_L_0: u32 = 1;
pub const ADC_SQR1_L_1: u32 = 2;
pub const ADC_SQR1_L_2: u32 = 4;
pub const ADC_SQR1_L_3: u32 = 8;
pub const ADC_SQR1_SQ1_Pos: u32 = 6;
pub const ADC_SQR1_SQ1_Msk: u32 = 1984;
pub const ADC_SQR1_SQ1: u32 = 1984;
pub const ADC_SQR1_SQ1_0: u32 = 64;
pub const ADC_SQR1_SQ1_1: u32 = 128;
pub const ADC_SQR1_SQ1_2: u32 = 256;
pub const ADC_SQR1_SQ1_3: u32 = 512;
pub const ADC_SQR1_SQ1_4: u32 = 1024;
pub const ADC_SQR1_SQ2_Pos: u32 = 12;
pub const ADC_SQR1_SQ2_Msk: u32 = 126976;
pub const ADC_SQR1_SQ2: u32 = 126976;
pub const ADC_SQR1_SQ2_0: u32 = 4096;
pub const ADC_SQR1_SQ2_1: u32 = 8192;
pub const ADC_SQR1_SQ2_2: u32 = 16384;
pub const ADC_SQR1_SQ2_3: u32 = 32768;
pub const ADC_SQR1_SQ2_4: u32 = 65536;
pub const ADC_SQR1_SQ3_Pos: u32 = 18;
pub const ADC_SQR1_SQ3_Msk: u32 = 8126464;
pub const ADC_SQR1_SQ3: u32 = 8126464;
pub const ADC_SQR1_SQ3_0: u32 = 262144;
pub const ADC_SQR1_SQ3_1: u32 = 524288;
pub const ADC_SQR1_SQ3_2: u32 = 1048576;
pub const ADC_SQR1_SQ3_3: u32 = 2097152;
pub const ADC_SQR1_SQ3_4: u32 = 4194304;
pub const ADC_SQR1_SQ4_Pos: u32 = 24;
pub const ADC_SQR1_SQ4_Msk: u32 = 520093696;
pub const ADC_SQR1_SQ4: u32 = 520093696;
pub const ADC_SQR1_SQ4_0: u32 = 16777216;
pub const ADC_SQR1_SQ4_1: u32 = 33554432;
pub const ADC_SQR1_SQ4_2: u32 = 67108864;
pub const ADC_SQR1_SQ4_3: u32 = 134217728;
pub const ADC_SQR1_SQ4_4: u32 = 268435456;
pub const ADC_SQR2_SQ5_Pos: u32 = 0;
pub const ADC_SQR2_SQ5_Msk: u32 = 31;
pub const ADC_SQR2_SQ5: u32 = 31;
pub const ADC_SQR2_SQ5_0: u32 = 1;
pub const ADC_SQR2_SQ5_1: u32 = 2;
pub const ADC_SQR2_SQ5_2: u32 = 4;
pub const ADC_SQR2_SQ5_3: u32 = 8;
pub const ADC_SQR2_SQ5_4: u32 = 16;
pub const ADC_SQR2_SQ6_Pos: u32 = 6;
pub const ADC_SQR2_SQ6_Msk: u32 = 1984;
pub const ADC_SQR2_SQ6: u32 = 1984;
pub const ADC_SQR2_SQ6_0: u32 = 64;
pub const ADC_SQR2_SQ6_1: u32 = 128;
pub const ADC_SQR2_SQ6_2: u32 = 256;
pub const ADC_SQR2_SQ6_3: u32 = 512;
pub const ADC_SQR2_SQ6_4: u32 = 1024;
pub const ADC_SQR2_SQ7_Pos: u32 = 12;
pub const ADC_SQR2_SQ7_Msk: u32 = 126976;
pub const ADC_SQR2_SQ7: u32 = 126976;
pub const ADC_SQR2_SQ7_0: u32 = 4096;
pub const ADC_SQR2_SQ7_1: u32 = 8192;
pub const ADC_SQR2_SQ7_2: u32 = 16384;
pub const ADC_SQR2_SQ7_3: u32 = 32768;
pub const ADC_SQR2_SQ7_4: u32 = 65536;
pub const ADC_SQR2_SQ8_Pos: u32 = 18;
pub const ADC_SQR2_SQ8_Msk: u32 = 8126464;
pub const ADC_SQR2_SQ8: u32 = 8126464;
pub const ADC_SQR2_SQ8_0: u32 = 262144;
pub const ADC_SQR2_SQ8_1: u32 = 524288;
pub const ADC_SQR2_SQ8_2: u32 = 1048576;
pub const ADC_SQR2_SQ8_3: u32 = 2097152;
pub const ADC_SQR2_SQ8_4: u32 = 4194304;
pub const ADC_SQR2_SQ9_Pos: u32 = 24;
pub const ADC_SQR2_SQ9_Msk: u32 = 520093696;
pub const ADC_SQR2_SQ9: u32 = 520093696;
pub const ADC_SQR2_SQ9_0: u32 = 16777216;
pub const ADC_SQR2_SQ9_1: u32 = 33554432;
pub const ADC_SQR2_SQ9_2: u32 = 67108864;
pub const ADC_SQR2_SQ9_3: u32 = 134217728;
pub const ADC_SQR2_SQ9_4: u32 = 268435456;
pub const ADC_SQR3_SQ10_Pos: u32 = 0;
pub const ADC_SQR3_SQ10_Msk: u32 = 31;
pub const ADC_SQR3_SQ10: u32 = 31;
pub const ADC_SQR3_SQ10_0: u32 = 1;
pub const ADC_SQR3_SQ10_1: u32 = 2;
pub const ADC_SQR3_SQ10_2: u32 = 4;
pub const ADC_SQR3_SQ10_3: u32 = 8;
pub const ADC_SQR3_SQ10_4: u32 = 16;
pub const ADC_SQR3_SQ11_Pos: u32 = 6;
pub const ADC_SQR3_SQ11_Msk: u32 = 1984;
pub const ADC_SQR3_SQ11: u32 = 1984;
pub const ADC_SQR3_SQ11_0: u32 = 64;
pub const ADC_SQR3_SQ11_1: u32 = 128;
pub const ADC_SQR3_SQ11_2: u32 = 256;
pub const ADC_SQR3_SQ11_3: u32 = 512;
pub const ADC_SQR3_SQ11_4: u32 = 1024;
pub const ADC_SQR3_SQ12_Pos: u32 = 12;
pub const ADC_SQR3_SQ12_Msk: u32 = 126976;
pub const ADC_SQR3_SQ12: u32 = 126976;
pub const ADC_SQR3_SQ12_0: u32 = 4096;
pub const ADC_SQR3_SQ12_1: u32 = 8192;
pub const ADC_SQR3_SQ12_2: u32 = 16384;
pub const ADC_SQR3_SQ12_3: u32 = 32768;
pub const ADC_SQR3_SQ12_4: u32 = 65536;
pub const ADC_SQR3_SQ13_Pos: u32 = 18;
pub const ADC_SQR3_SQ13_Msk: u32 = 8126464;
pub const ADC_SQR3_SQ13: u32 = 8126464;
pub const ADC_SQR3_SQ13_0: u32 = 262144;
pub const ADC_SQR3_SQ13_1: u32 = 524288;
pub const ADC_SQR3_SQ13_2: u32 = 1048576;
pub const ADC_SQR3_SQ13_3: u32 = 2097152;
pub const ADC_SQR3_SQ13_4: u32 = 4194304;
pub const ADC_SQR3_SQ14_Pos: u32 = 24;
pub const ADC_SQR3_SQ14_Msk: u32 = 520093696;
pub const ADC_SQR3_SQ14: u32 = 520093696;
pub const ADC_SQR3_SQ14_0: u32 = 16777216;
pub const ADC_SQR3_SQ14_1: u32 = 33554432;
pub const ADC_SQR3_SQ14_2: u32 = 67108864;
pub const ADC_SQR3_SQ14_3: u32 = 134217728;
pub const ADC_SQR3_SQ14_4: u32 = 268435456;
pub const ADC_SQR4_SQ15_Pos: u32 = 0;
pub const ADC_SQR4_SQ15_Msk: u32 = 31;
pub const ADC_SQR4_SQ15: u32 = 31;
pub const ADC_SQR4_SQ15_0: u32 = 1;
pub const ADC_SQR4_SQ15_1: u32 = 2;
pub const ADC_SQR4_SQ15_2: u32 = 4;
pub const ADC_SQR4_SQ15_3: u32 = 8;
pub const ADC_SQR4_SQ15_4: u32 = 16;
pub const ADC_SQR4_SQ16_Pos: u32 = 6;
pub const ADC_SQR4_SQ16_Msk: u32 = 1984;
pub const ADC_SQR4_SQ16: u32 = 1984;
pub const ADC_SQR4_SQ16_0: u32 = 64;
pub const ADC_SQR4_SQ16_1: u32 = 128;
pub const ADC_SQR4_SQ16_2: u32 = 256;
pub const ADC_SQR4_SQ16_3: u32 = 512;
pub const ADC_SQR4_SQ16_4: u32 = 1024;
pub const ADC_DR_RDATA_Pos: u32 = 0;
pub const ADC_DR_RDATA_Msk: u32 = 65535;
pub const ADC_DR_RDATA: u32 = 65535;
pub const ADC_JSQR_JL_Pos: u32 = 0;
pub const ADC_JSQR_JL_Msk: u32 = 3;
pub const ADC_JSQR_JL: u32 = 3;
pub const ADC_JSQR_JL_0: u32 = 1;
pub const ADC_JSQR_JL_1: u32 = 2;
pub const ADC_JSQR_JEXTSEL_Pos: u32 = 2;
pub const ADC_JSQR_JEXTSEL_Msk: u32 = 124;
pub const ADC_JSQR_JEXTSEL: u32 = 124;
pub const ADC_JSQR_JEXTSEL_0: u32 = 4;
pub const ADC_JSQR_JEXTSEL_1: u32 = 8;
pub const ADC_JSQR_JEXTSEL_2: u32 = 16;
pub const ADC_JSQR_JEXTSEL_3: u32 = 32;
pub const ADC_JSQR_JEXTSEL_4: u32 = 64;
pub const ADC_JSQR_JEXTEN_Pos: u32 = 7;
pub const ADC_JSQR_JEXTEN_Msk: u32 = 384;
pub const ADC_JSQR_JEXTEN: u32 = 384;
pub const ADC_JSQR_JEXTEN_0: u32 = 128;
pub const ADC_JSQR_JEXTEN_1: u32 = 256;
pub const ADC_JSQR_JSQ1_Pos: u32 = 9;
pub const ADC_JSQR_JSQ1_Msk: u32 = 15872;
pub const ADC_JSQR_JSQ1: u32 = 15872;
pub const ADC_JSQR_JSQ1_0: u32 = 512;
pub const ADC_JSQR_JSQ1_1: u32 = 1024;
pub const ADC_JSQR_JSQ1_2: u32 = 2048;
pub const ADC_JSQR_JSQ1_3: u32 = 4096;
pub const ADC_JSQR_JSQ1_4: u32 = 8192;
pub const ADC_JSQR_JSQ2_Pos: u32 = 15;
pub const ADC_JSQR_JSQ2_Msk: u32 = 1015808;
pub const ADC_JSQR_JSQ2: u32 = 1015808;
pub const ADC_JSQR_JSQ2_0: u32 = 32768;
pub const ADC_JSQR_JSQ2_1: u32 = 65536;
pub const ADC_JSQR_JSQ2_2: u32 = 131072;
pub const ADC_JSQR_JSQ2_3: u32 = 262144;
pub const ADC_JSQR_JSQ2_4: u32 = 524288;
pub const ADC_JSQR_JSQ3_Pos: u32 = 21;
pub const ADC_JSQR_JSQ3_Msk: u32 = 65011712;
pub const ADC_JSQR_JSQ3: u32 = 65011712;
pub const ADC_JSQR_JSQ3_0: u32 = 2097152;
pub const ADC_JSQR_JSQ3_1: u32 = 4194304;
pub const ADC_JSQR_JSQ3_2: u32 = 8388608;
pub const ADC_JSQR_JSQ3_3: u32 = 16777216;
pub const ADC_JSQR_JSQ3_4: u32 = 33554432;
pub const ADC_JSQR_JSQ4_Pos: u32 = 27;
pub const ADC_JSQR_JSQ4_Msk: u32 = 4160749568;
pub const ADC_JSQR_JSQ4: u32 = 4160749568;
pub const ADC_JSQR_JSQ4_0: u32 = 134217728;
pub const ADC_JSQR_JSQ4_1: u32 = 268435456;
pub const ADC_JSQR_JSQ4_2: u32 = 536870912;
pub const ADC_JSQR_JSQ4_3: u32 = 1073741824;
pub const ADC_JSQR_JSQ4_4: u32 = 2147483648;
pub const ADC_OFR1_OFFSET1_Pos: u32 = 0;
pub const ADC_OFR1_OFFSET1_Msk: u32 = 4095;
pub const ADC_OFR1_OFFSET1: u32 = 4095;
pub const ADC_OFR1_OFFSETPOS_Pos: u32 = 24;
pub const ADC_OFR1_OFFSETPOS_Msk: u32 = 16777216;
pub const ADC_OFR1_OFFSETPOS: u32 = 16777216;
pub const ADC_OFR1_SATEN_Pos: u32 = 25;
pub const ADC_OFR1_SATEN_Msk: u32 = 33554432;
pub const ADC_OFR1_SATEN: u32 = 33554432;
pub const ADC_OFR1_OFFSET1_CH_Pos: u32 = 26;
pub const ADC_OFR1_OFFSET1_CH_Msk: u32 = 2080374784;
pub const ADC_OFR1_OFFSET1_CH: u32 = 2080374784;
pub const ADC_OFR1_OFFSET1_CH_0: u32 = 67108864;
pub const ADC_OFR1_OFFSET1_CH_1: u32 = 134217728;
pub const ADC_OFR1_OFFSET1_CH_2: u32 = 268435456;
pub const ADC_OFR1_OFFSET1_CH_3: u32 = 536870912;
pub const ADC_OFR1_OFFSET1_CH_4: u32 = 1073741824;
pub const ADC_OFR1_OFFSET1_EN_Pos: u32 = 31;
pub const ADC_OFR1_OFFSET1_EN_Msk: u32 = 2147483648;
pub const ADC_OFR1_OFFSET1_EN: u32 = 2147483648;
pub const ADC_OFR2_OFFSET2_Pos: u32 = 0;
pub const ADC_OFR2_OFFSET2_Msk: u32 = 4095;
pub const ADC_OFR2_OFFSET2: u32 = 4095;
pub const ADC_OFR2_OFFSETPOS_Pos: u32 = 24;
pub const ADC_OFR2_OFFSETPOS_Msk: u32 = 16777216;
pub const ADC_OFR2_OFFSETPOS: u32 = 16777216;
pub const ADC_OFR2_SATEN_Pos: u32 = 25;
pub const ADC_OFR2_SATEN_Msk: u32 = 33554432;
pub const ADC_OFR2_SATEN: u32 = 33554432;
pub const ADC_OFR2_OFFSET2_CH_Pos: u32 = 26;
pub const ADC_OFR2_OFFSET2_CH_Msk: u32 = 2080374784;
pub const ADC_OFR2_OFFSET2_CH: u32 = 2080374784;
pub const ADC_OFR2_OFFSET2_CH_0: u32 = 67108864;
pub const ADC_OFR2_OFFSET2_CH_1: u32 = 134217728;
pub const ADC_OFR2_OFFSET2_CH_2: u32 = 268435456;
pub const ADC_OFR2_OFFSET2_CH_3: u32 = 536870912;
pub const ADC_OFR2_OFFSET2_CH_4: u32 = 1073741824;
pub const ADC_OFR2_OFFSET2_EN_Pos: u32 = 31;
pub const ADC_OFR2_OFFSET2_EN_Msk: u32 = 2147483648;
pub const ADC_OFR2_OFFSET2_EN: u32 = 2147483648;
pub const ADC_OFR3_OFFSET3_Pos: u32 = 0;
pub const ADC_OFR3_OFFSET3_Msk: u32 = 4095;
pub const ADC_OFR3_OFFSET3: u32 = 4095;
pub const ADC_OFR3_OFFSETPOS_Pos: u32 = 24;
pub const ADC_OFR3_OFFSETPOS_Msk: u32 = 16777216;
pub const ADC_OFR3_OFFSETPOS: u32 = 16777216;
pub const ADC_OFR3_SATEN_Pos: u32 = 25;
pub const ADC_OFR3_SATEN_Msk: u32 = 33554432;
pub const ADC_OFR3_SATEN: u32 = 33554432;
pub const ADC_OFR3_OFFSET3_CH_Pos: u32 = 26;
pub const ADC_OFR3_OFFSET3_CH_Msk: u32 = 2080374784;
pub const ADC_OFR3_OFFSET3_CH: u32 = 2080374784;
pub const ADC_OFR3_OFFSET3_CH_0: u32 = 67108864;
pub const ADC_OFR3_OFFSET3_CH_1: u32 = 134217728;
pub const ADC_OFR3_OFFSET3_CH_2: u32 = 268435456;
pub const ADC_OFR3_OFFSET3_CH_3: u32 = 536870912;
pub const ADC_OFR3_OFFSET3_CH_4: u32 = 1073741824;
pub const ADC_OFR3_OFFSET3_EN_Pos: u32 = 31;
pub const ADC_OFR3_OFFSET3_EN_Msk: u32 = 2147483648;
pub const ADC_OFR3_OFFSET3_EN: u32 = 2147483648;
pub const ADC_OFR4_OFFSET4_Pos: u32 = 0;
pub const ADC_OFR4_OFFSET4_Msk: u32 = 4095;
pub const ADC_OFR4_OFFSET4: u32 = 4095;
pub const ADC_OFR4_OFFSETPOS_Pos: u32 = 24;
pub const ADC_OFR4_OFFSETPOS_Msk: u32 = 16777216;
pub const ADC_OFR4_OFFSETPOS: u32 = 16777216;
pub const ADC_OFR4_SATEN_Pos: u32 = 25;
pub const ADC_OFR4_SATEN_Msk: u32 = 33554432;
pub const ADC_OFR4_SATEN: u32 = 33554432;
pub const ADC_OFR4_OFFSET4_CH_Pos: u32 = 26;
pub const ADC_OFR4_OFFSET4_CH_Msk: u32 = 2080374784;
pub const ADC_OFR4_OFFSET4_CH: u32 = 2080374784;
pub const ADC_OFR4_OFFSET4_CH_0: u32 = 67108864;
pub const ADC_OFR4_OFFSET4_CH_1: u32 = 134217728;
pub const ADC_OFR4_OFFSET4_CH_2: u32 = 268435456;
pub const ADC_OFR4_OFFSET4_CH_3: u32 = 536870912;
pub const ADC_OFR4_OFFSET4_CH_4: u32 = 1073741824;
pub const ADC_OFR4_OFFSET4_EN_Pos: u32 = 31;
pub const ADC_OFR4_OFFSET4_EN_Msk: u32 = 2147483648;
pub const ADC_OFR4_OFFSET4_EN: u32 = 2147483648;
pub const ADC_JDR1_JDATA_Pos: u32 = 0;
pub const ADC_JDR1_JDATA_Msk: u32 = 65535;
pub const ADC_JDR1_JDATA: u32 = 65535;
pub const ADC_JDR2_JDATA_Pos: u32 = 0;
pub const ADC_JDR2_JDATA_Msk: u32 = 65535;
pub const ADC_JDR2_JDATA: u32 = 65535;
pub const ADC_JDR3_JDATA_Pos: u32 = 0;
pub const ADC_JDR3_JDATA_Msk: u32 = 65535;
pub const ADC_JDR3_JDATA: u32 = 65535;
pub const ADC_JDR4_JDATA_Pos: u32 = 0;
pub const ADC_JDR4_JDATA_Msk: u32 = 65535;
pub const ADC_JDR4_JDATA: u32 = 65535;
pub const ADC_AWD2CR_AWD2CH_Pos: u32 = 0;
pub const ADC_AWD2CR_AWD2CH_Msk: u32 = 524287;
pub const ADC_AWD2CR_AWD2CH: u32 = 524287;
pub const ADC_AWD2CR_AWD2CH_0: u32 = 1;
pub const ADC_AWD2CR_AWD2CH_1: u32 = 2;
pub const ADC_AWD2CR_AWD2CH_2: u32 = 4;
pub const ADC_AWD2CR_AWD2CH_3: u32 = 8;
pub const ADC_AWD2CR_AWD2CH_4: u32 = 16;
pub const ADC_AWD2CR_AWD2CH_5: u32 = 32;
pub const ADC_AWD2CR_AWD2CH_6: u32 = 64;
pub const ADC_AWD2CR_AWD2CH_7: u32 = 128;
pub const ADC_AWD2CR_AWD2CH_8: u32 = 256;
pub const ADC_AWD2CR_AWD2CH_9: u32 = 512;
pub const ADC_AWD2CR_AWD2CH_10: u32 = 1024;
pub const ADC_AWD2CR_AWD2CH_11: u32 = 2048;
pub const ADC_AWD2CR_AWD2CH_12: u32 = 4096;
pub const ADC_AWD2CR_AWD2CH_13: u32 = 8192;
pub const ADC_AWD2CR_AWD2CH_14: u32 = 16384;
pub const ADC_AWD2CR_AWD2CH_15: u32 = 32768;
pub const ADC_AWD2CR_AWD2CH_16: u32 = 65536;
pub const ADC_AWD2CR_AWD2CH_17: u32 = 131072;
pub const ADC_AWD2CR_AWD2CH_18: u32 = 262144;
pub const ADC_AWD3CR_AWD3CH_Pos: u32 = 0;
pub const ADC_AWD3CR_AWD3CH_Msk: u32 = 524287;
pub const ADC_AWD3CR_AWD3CH: u32 = 524287;
pub const ADC_AWD3CR_AWD3CH_0: u32 = 1;
pub const ADC_AWD3CR_AWD3CH_1: u32 = 2;
pub const ADC_AWD3CR_AWD3CH_2: u32 = 4;
pub const ADC_AWD3CR_AWD3CH_3: u32 = 8;
pub const ADC_AWD3CR_AWD3CH_4: u32 = 16;
pub const ADC_AWD3CR_AWD3CH_5: u32 = 32;
pub const ADC_AWD3CR_AWD3CH_6: u32 = 64;
pub const ADC_AWD3CR_AWD3CH_7: u32 = 128;
pub const ADC_AWD3CR_AWD3CH_8: u32 = 256;
pub const ADC_AWD3CR_AWD3CH_9: u32 = 512;
pub const ADC_AWD3CR_AWD3CH_10: u32 = 1024;
pub const ADC_AWD3CR_AWD3CH_11: u32 = 2048;
pub const ADC_AWD3CR_AWD3CH_12: u32 = 4096;
pub const ADC_AWD3CR_AWD3CH_13: u32 = 8192;
pub const ADC_AWD3CR_AWD3CH_14: u32 = 16384;
pub const ADC_AWD3CR_AWD3CH_15: u32 = 32768;
pub const ADC_AWD3CR_AWD3CH_16: u32 = 65536;
pub const ADC_AWD3CR_AWD3CH_17: u32 = 131072;
pub const ADC_AWD3CR_AWD3CH_18: u32 = 262144;
pub const ADC_DIFSEL_DIFSEL_Pos: u32 = 0;
pub const ADC_DIFSEL_DIFSEL_Msk: u32 = 524287;
pub const ADC_DIFSEL_DIFSEL: u32 = 524287;
pub const ADC_DIFSEL_DIFSEL_0: u32 = 1;
pub const ADC_DIFSEL_DIFSEL_1: u32 = 2;
pub const ADC_DIFSEL_DIFSEL_2: u32 = 4;
pub const ADC_DIFSEL_DIFSEL_3: u32 = 8;
pub const ADC_DIFSEL_DIFSEL_4: u32 = 16;
pub const ADC_DIFSEL_DIFSEL_5: u32 = 32;
pub const ADC_DIFSEL_DIFSEL_6: u32 = 64;
pub const ADC_DIFSEL_DIFSEL_7: u32 = 128;
pub const ADC_DIFSEL_DIFSEL_8: u32 = 256;
pub const ADC_DIFSEL_DIFSEL_9: u32 = 512;
pub const ADC_DIFSEL_DIFSEL_10: u32 = 1024;
pub const ADC_DIFSEL_DIFSEL_11: u32 = 2048;
pub const ADC_DIFSEL_DIFSEL_12: u32 = 4096;
pub const ADC_DIFSEL_DIFSEL_13: u32 = 8192;
pub const ADC_DIFSEL_DIFSEL_14: u32 = 16384;
pub const ADC_DIFSEL_DIFSEL_15: u32 = 32768;
pub const ADC_DIFSEL_DIFSEL_16: u32 = 65536;
pub const ADC_DIFSEL_DIFSEL_17: u32 = 131072;
pub const ADC_DIFSEL_DIFSEL_18: u32 = 262144;
pub const ADC_CALFACT_CALFACT_S_Pos: u32 = 0;
pub const ADC_CALFACT_CALFACT_S_Msk: u32 = 127;
pub const ADC_CALFACT_CALFACT_S: u32 = 127;
pub const ADC_CALFACT_CALFACT_S_0: u32 = 1;
pub const ADC_CALFACT_CALFACT_S_1: u32 = 2;
pub const ADC_CALFACT_CALFACT_S_2: u32 = 4;
pub const ADC_CALFACT_CALFACT_S_3: u32 = 8;
pub const ADC_CALFACT_CALFACT_S_4: u32 = 16;
pub const ADC_CALFACT_CALFACT_S_5: u32 = 32;
pub const ADC_CALFACT_CALFACT_S_6: u32 = 64;
pub const ADC_CALFACT_CALFACT_D_Pos: u32 = 16;
pub const ADC_CALFACT_CALFACT_D_Msk: u32 = 8323072;
pub const ADC_CALFACT_CALFACT_D: u32 = 8323072;
pub const ADC_CALFACT_CALFACT_D_0: u32 = 65536;
pub const ADC_CALFACT_CALFACT_D_1: u32 = 131072;
pub const ADC_CALFACT_CALFACT_D_2: u32 = 262144;
pub const ADC_CALFACT_CALFACT_D_3: u32 = 524288;
pub const ADC_CALFACT_CALFACT_D_4: u32 = 1048576;
pub const ADC_CALFACT_CALFACT_D_5: u32 = 2097152;
pub const ADC_CALFACT_CALFACT_D_6: u32 = 4194304;
pub const ADC_GCOMP_GCOMPCOEFF_Pos: u32 = 0;
pub const ADC_GCOMP_GCOMPCOEFF_Msk: u32 = 16383;
pub const ADC_GCOMP_GCOMPCOEFF: u32 = 16383;
pub const ADC_CSR_ADRDY_MST_Pos: u32 = 0;
pub const ADC_CSR_ADRDY_MST_Msk: u32 = 1;
pub const ADC_CSR_ADRDY_MST: u32 = 1;
pub const ADC_CSR_EOSMP_MST_Pos: u32 = 1;
pub const ADC_CSR_EOSMP_MST_Msk: u32 = 2;
pub const ADC_CSR_EOSMP_MST: u32 = 2;
pub const ADC_CSR_EOC_MST_Pos: u32 = 2;
pub const ADC_CSR_EOC_MST_Msk: u32 = 4;
pub const ADC_CSR_EOC_MST: u32 = 4;
pub const ADC_CSR_EOS_MST_Pos: u32 = 3;
pub const ADC_CSR_EOS_MST_Msk: u32 = 8;
pub const ADC_CSR_EOS_MST: u32 = 8;
pub const ADC_CSR_OVR_MST_Pos: u32 = 4;
pub const ADC_CSR_OVR_MST_Msk: u32 = 16;
pub const ADC_CSR_OVR_MST: u32 = 16;
pub const ADC_CSR_JEOC_MST_Pos: u32 = 5;
pub const ADC_CSR_JEOC_MST_Msk: u32 = 32;
pub const ADC_CSR_JEOC_MST: u32 = 32;
pub const ADC_CSR_JEOS_MST_Pos: u32 = 6;
pub const ADC_CSR_JEOS_MST_Msk: u32 = 64;
pub const ADC_CSR_JEOS_MST: u32 = 64;
pub const ADC_CSR_AWD1_MST_Pos: u32 = 7;
pub const ADC_CSR_AWD1_MST_Msk: u32 = 128;
pub const ADC_CSR_AWD1_MST: u32 = 128;
pub const ADC_CSR_AWD2_MST_Pos: u32 = 8;
pub const ADC_CSR_AWD2_MST_Msk: u32 = 256;
pub const ADC_CSR_AWD2_MST: u32 = 256;
pub const ADC_CSR_AWD3_MST_Pos: u32 = 9;
pub const ADC_CSR_AWD3_MST_Msk: u32 = 512;
pub const ADC_CSR_AWD3_MST: u32 = 512;
pub const ADC_CSR_JQOVF_MST_Pos: u32 = 10;
pub const ADC_CSR_JQOVF_MST_Msk: u32 = 1024;
pub const ADC_CSR_JQOVF_MST: u32 = 1024;
pub const ADC_CSR_ADRDY_SLV_Pos: u32 = 16;
pub const ADC_CSR_ADRDY_SLV_Msk: u32 = 65536;
pub const ADC_CSR_ADRDY_SLV: u32 = 65536;
pub const ADC_CSR_EOSMP_SLV_Pos: u32 = 17;
pub const ADC_CSR_EOSMP_SLV_Msk: u32 = 131072;
pub const ADC_CSR_EOSMP_SLV: u32 = 131072;
pub const ADC_CSR_EOC_SLV_Pos: u32 = 18;
pub const ADC_CSR_EOC_SLV_Msk: u32 = 262144;
pub const ADC_CSR_EOC_SLV: u32 = 262144;
pub const ADC_CSR_EOS_SLV_Pos: u32 = 19;
pub const ADC_CSR_EOS_SLV_Msk: u32 = 524288;
pub const ADC_CSR_EOS_SLV: u32 = 524288;
pub const ADC_CSR_OVR_SLV_Pos: u32 = 20;
pub const ADC_CSR_OVR_SLV_Msk: u32 = 1048576;
pub const ADC_CSR_OVR_SLV: u32 = 1048576;
pub const ADC_CSR_JEOC_SLV_Pos: u32 = 21;
pub const ADC_CSR_JEOC_SLV_Msk: u32 = 2097152;
pub const ADC_CSR_JEOC_SLV: u32 = 2097152;
pub const ADC_CSR_JEOS_SLV_Pos: u32 = 22;
pub const ADC_CSR_JEOS_SLV_Msk: u32 = 4194304;
pub const ADC_CSR_JEOS_SLV: u32 = 4194304;
pub const ADC_CSR_AWD1_SLV_Pos: u32 = 23;
pub const ADC_CSR_AWD1_SLV_Msk: u32 = 8388608;
pub const ADC_CSR_AWD1_SLV: u32 = 8388608;
pub const ADC_CSR_AWD2_SLV_Pos: u32 = 24;
pub const ADC_CSR_AWD2_SLV_Msk: u32 = 16777216;
pub const ADC_CSR_AWD2_SLV: u32 = 16777216;
pub const ADC_CSR_AWD3_SLV_Pos: u32 = 25;
pub const ADC_CSR_AWD3_SLV_Msk: u32 = 33554432;
pub const ADC_CSR_AWD3_SLV: u32 = 33554432;
pub const ADC_CSR_JQOVF_SLV_Pos: u32 = 26;
pub const ADC_CSR_JQOVF_SLV_Msk: u32 = 67108864;
pub const ADC_CSR_JQOVF_SLV: u32 = 67108864;
pub const ADC_CCR_DUAL_Pos: u32 = 0;
pub const ADC_CCR_DUAL_Msk: u32 = 31;
pub const ADC_CCR_DUAL: u32 = 31;
pub const ADC_CCR_DUAL_0: u32 = 1;
pub const ADC_CCR_DUAL_1: u32 = 2;
pub const ADC_CCR_DUAL_2: u32 = 4;
pub const ADC_CCR_DUAL_3: u32 = 8;
pub const ADC_CCR_DUAL_4: u32 = 16;
pub const ADC_CCR_DELAY_Pos: u32 = 8;
pub const ADC_CCR_DELAY_Msk: u32 = 3840;
pub const ADC_CCR_DELAY: u32 = 3840;
pub const ADC_CCR_DELAY_0: u32 = 256;
pub const ADC_CCR_DELAY_1: u32 = 512;
pub const ADC_CCR_DELAY_2: u32 = 1024;
pub const ADC_CCR_DELAY_3: u32 = 2048;
pub const ADC_CCR_DMACFG_Pos: u32 = 13;
pub const ADC_CCR_DMACFG_Msk: u32 = 8192;
pub const ADC_CCR_DMACFG: u32 = 8192;
pub const ADC_CCR_MDMA_Pos: u32 = 14;
pub const ADC_CCR_MDMA_Msk: u32 = 49152;
pub const ADC_CCR_MDMA: u32 = 49152;
pub const ADC_CCR_MDMA_0: u32 = 16384;
pub const ADC_CCR_MDMA_1: u32 = 32768;
pub const ADC_CCR_CKMODE_Pos: u32 = 16;
pub const ADC_CCR_CKMODE_Msk: u32 = 196608;
pub const ADC_CCR_CKMODE: u32 = 196608;
pub const ADC_CCR_CKMODE_0: u32 = 65536;
pub const ADC_CCR_CKMODE_1: u32 = 131072;
pub const ADC_CCR_PRESC_Pos: u32 = 18;
pub const ADC_CCR_PRESC_Msk: u32 = 3932160;
pub const ADC_CCR_PRESC: u32 = 3932160;
pub const ADC_CCR_PRESC_0: u32 = 262144;
pub const ADC_CCR_PRESC_1: u32 = 524288;
pub const ADC_CCR_PRESC_2: u32 = 1048576;
pub const ADC_CCR_PRESC_3: u32 = 2097152;
pub const ADC_CCR_VREFEN_Pos: u32 = 22;
pub const ADC_CCR_VREFEN_Msk: u32 = 4194304;
pub const ADC_CCR_VREFEN: u32 = 4194304;
pub const ADC_CCR_VSENSESEL_Pos: u32 = 23;
pub const ADC_CCR_VSENSESEL_Msk: u32 = 8388608;
pub const ADC_CCR_VSENSESEL: u32 = 8388608;
pub const ADC_CCR_VBATSEL_Pos: u32 = 24;
pub const ADC_CCR_VBATSEL_Msk: u32 = 16777216;
pub const ADC_CCR_VBATSEL: u32 = 16777216;
pub const ADC_CDR_RDATA_MST_Pos: u32 = 0;
pub const ADC_CDR_RDATA_MST_Msk: u32 = 65535;
pub const ADC_CDR_RDATA_MST: u32 = 65535;
pub const ADC_CDR_RDATA_SLV_Pos: u32 = 16;
pub const ADC_CDR_RDATA_SLV_Msk: u32 = 4294901760;
pub const ADC_CDR_RDATA_SLV: u32 = 4294901760;
pub const COMP_CSR_EN_Pos: u32 = 0;
pub const COMP_CSR_EN_Msk: u32 = 1;
pub const COMP_CSR_EN: u32 = 1;
pub const COMP_CSR_INMSEL_Pos: u32 = 4;
pub const COMP_CSR_INMSEL_Msk: u32 = 240;
pub const COMP_CSR_INMSEL: u32 = 240;
pub const COMP_CSR_INMSEL_0: u32 = 16;
pub const COMP_CSR_INMSEL_1: u32 = 32;
pub const COMP_CSR_INMSEL_2: u32 = 64;
pub const COMP_CSR_INMSEL_3: u32 = 128;
pub const COMP_CSR_INPSEL_Pos: u32 = 8;
pub const COMP_CSR_INPSEL_Msk: u32 = 256;
pub const COMP_CSR_INPSEL: u32 = 256;
pub const COMP_CSR_POLARITY_Pos: u32 = 15;
pub const COMP_CSR_POLARITY_Msk: u32 = 32768;
pub const COMP_CSR_POLARITY: u32 = 32768;
pub const COMP_CSR_HYST_Pos: u32 = 16;
pub const COMP_CSR_HYST_Msk: u32 = 458752;
pub const COMP_CSR_HYST: u32 = 458752;
pub const COMP_CSR_HYST_0: u32 = 65536;
pub const COMP_CSR_HYST_1: u32 = 131072;
pub const COMP_CSR_HYST_2: u32 = 262144;
pub const COMP_CSR_BLANKING_Pos: u32 = 19;
pub const COMP_CSR_BLANKING_Msk: u32 = 3670016;
pub const COMP_CSR_BLANKING: u32 = 3670016;
pub const COMP_CSR_BLANKING_0: u32 = 524288;
pub const COMP_CSR_BLANKING_1: u32 = 1048576;
pub const COMP_CSR_BLANKING_2: u32 = 2097152;
pub const COMP_CSR_BRGEN_Pos: u32 = 22;
pub const COMP_CSR_BRGEN_Msk: u32 = 4194304;
pub const COMP_CSR_BRGEN: u32 = 4194304;
pub const COMP_CSR_SCALEN_Pos: u32 = 23;
pub const COMP_CSR_SCALEN_Msk: u32 = 8388608;
pub const COMP_CSR_SCALEN: u32 = 8388608;
pub const COMP_CSR_VALUE_Pos: u32 = 30;
pub const COMP_CSR_VALUE_Msk: u32 = 1073741824;
pub const COMP_CSR_VALUE: u32 = 1073741824;
pub const COMP_CSR_LOCK_Pos: u32 = 31;
pub const COMP_CSR_LOCK_Msk: u32 = 2147483648;
pub const COMP_CSR_LOCK: u32 = 2147483648;
pub const CORDIC_CSR_FUNC_Pos: u32 = 0;
pub const CORDIC_CSR_FUNC_Msk: u32 = 15;
pub const CORDIC_CSR_FUNC: u32 = 15;
pub const CORDIC_CSR_FUNC_0: u32 = 1;
pub const CORDIC_CSR_FUNC_1: u32 = 2;
pub const CORDIC_CSR_FUNC_2: u32 = 4;
pub const CORDIC_CSR_FUNC_3: u32 = 8;
pub const CORDIC_CSR_PRECISION_Pos: u32 = 4;
pub const CORDIC_CSR_PRECISION_Msk: u32 = 240;
pub const CORDIC_CSR_PRECISION: u32 = 240;
pub const CORDIC_CSR_PRECISION_0: u32 = 16;
pub const CORDIC_CSR_PRECISION_1: u32 = 32;
pub const CORDIC_CSR_PRECISION_2: u32 = 64;
pub const CORDIC_CSR_PRECISION_3: u32 = 128;
pub const CORDIC_CSR_SCALE_Pos: u32 = 8;
pub const CORDIC_CSR_SCALE_Msk: u32 = 1792;
pub const CORDIC_CSR_SCALE: u32 = 1792;
pub const CORDIC_CSR_SCALE_0: u32 = 256;
pub const CORDIC_CSR_SCALE_1: u32 = 512;
pub const CORDIC_CSR_SCALE_2: u32 = 1024;
pub const CORDIC_CSR_IEN_Pos: u32 = 16;
pub const CORDIC_CSR_IEN_Msk: u32 = 65536;
pub const CORDIC_CSR_IEN: u32 = 65536;
pub const CORDIC_CSR_DMAREN_Pos: u32 = 17;
pub const CORDIC_CSR_DMAREN_Msk: u32 = 131072;
pub const CORDIC_CSR_DMAREN: u32 = 131072;
pub const CORDIC_CSR_DMAWEN_Pos: u32 = 18;
pub const CORDIC_CSR_DMAWEN_Msk: u32 = 262144;
pub const CORDIC_CSR_DMAWEN: u32 = 262144;
pub const CORDIC_CSR_NRES_Pos: u32 = 19;
pub const CORDIC_CSR_NRES_Msk: u32 = 524288;
pub const CORDIC_CSR_NRES: u32 = 524288;
pub const CORDIC_CSR_NARGS_Pos: u32 = 20;
pub const CORDIC_CSR_NARGS_Msk: u32 = 1048576;
pub const CORDIC_CSR_NARGS: u32 = 1048576;
pub const CORDIC_CSR_RESSIZE_Pos: u32 = 21;
pub const CORDIC_CSR_RESSIZE_Msk: u32 = 2097152;
pub const CORDIC_CSR_RESSIZE: u32 = 2097152;
pub const CORDIC_CSR_ARGSIZE_Pos: u32 = 22;
pub const CORDIC_CSR_ARGSIZE_Msk: u32 = 4194304;
pub const CORDIC_CSR_ARGSIZE: u32 = 4194304;
pub const CORDIC_CSR_RRDY_Pos: u32 = 31;
pub const CORDIC_CSR_RRDY_Msk: u32 = 2147483648;
pub const CORDIC_CSR_RRDY: u32 = 2147483648;
pub const CORDIC_WDATA_ARG_Pos: u32 = 0;
pub const CORDIC_WDATA_ARG_Msk: u32 = 4294967295;
pub const CORDIC_WDATA_ARG: u32 = 4294967295;
pub const CORDIC_RDATA_RES_Pos: u32 = 0;
pub const CORDIC_RDATA_RES_Msk: u32 = 4294967295;
pub const CORDIC_RDATA_RES: u32 = 4294967295;
pub const CRC_DR_DR_Pos: u32 = 0;
pub const CRC_DR_DR_Msk: u32 = 4294967295;
pub const CRC_DR_DR: u32 = 4294967295;
pub const CRC_IDR_IDR_Pos: u32 = 0;
pub const CRC_IDR_IDR_Msk: u32 = 4294967295;
pub const CRC_IDR_IDR: u32 = 4294967295;
pub const CRC_CR_RESET_Pos: u32 = 0;
pub const CRC_CR_RESET_Msk: u32 = 1;
pub const CRC_CR_RESET: u32 = 1;
pub const CRC_CR_POLYSIZE_Pos: u32 = 3;
pub const CRC_CR_POLYSIZE_Msk: u32 = 24;
pub const CRC_CR_POLYSIZE: u32 = 24;
pub const CRC_CR_POLYSIZE_0: u32 = 8;
pub const CRC_CR_POLYSIZE_1: u32 = 16;
pub const CRC_CR_REV_IN_Pos: u32 = 5;
pub const CRC_CR_REV_IN_Msk: u32 = 96;
pub const CRC_CR_REV_IN: u32 = 96;
pub const CRC_CR_REV_IN_0: u32 = 32;
pub const CRC_CR_REV_IN_1: u32 = 64;
pub const CRC_CR_REV_OUT_Pos: u32 = 7;
pub const CRC_CR_REV_OUT_Msk: u32 = 128;
pub const CRC_CR_REV_OUT: u32 = 128;
pub const CRC_INIT_INIT_Pos: u32 = 0;
pub const CRC_INIT_INIT_Msk: u32 = 4294967295;
pub const CRC_INIT_INIT: u32 = 4294967295;
pub const CRC_POL_POL_Pos: u32 = 0;
pub const CRC_POL_POL_Msk: u32 = 4294967295;
pub const CRC_POL_POL: u32 = 4294967295;
pub const CRS_CR_SYNCOKIE_Pos: u32 = 0;
pub const CRS_CR_SYNCOKIE_Msk: u32 = 1;
pub const CRS_CR_SYNCOKIE: u32 = 1;
pub const CRS_CR_SYNCWARNIE_Pos: u32 = 1;
pub const CRS_CR_SYNCWARNIE_Msk: u32 = 2;
pub const CRS_CR_SYNCWARNIE: u32 = 2;
pub const CRS_CR_ERRIE_Pos: u32 = 2;
pub const CRS_CR_ERRIE_Msk: u32 = 4;
pub const CRS_CR_ERRIE: u32 = 4;
pub const CRS_CR_ESYNCIE_Pos: u32 = 3;
pub const CRS_CR_ESYNCIE_Msk: u32 = 8;
pub const CRS_CR_ESYNCIE: u32 = 8;
pub const CRS_CR_CEN_Pos: u32 = 5;
pub const CRS_CR_CEN_Msk: u32 = 32;
pub const CRS_CR_CEN: u32 = 32;
pub const CRS_CR_AUTOTRIMEN_Pos: u32 = 6;
pub const CRS_CR_AUTOTRIMEN_Msk: u32 = 64;
pub const CRS_CR_AUTOTRIMEN: u32 = 64;
pub const CRS_CR_SWSYNC_Pos: u32 = 7;
pub const CRS_CR_SWSYNC_Msk: u32 = 128;
pub const CRS_CR_SWSYNC: u32 = 128;
pub const CRS_CR_TRIM_Pos: u32 = 8;
pub const CRS_CR_TRIM_Msk: u32 = 32512;
pub const CRS_CR_TRIM: u32 = 32512;
pub const CRS_CFGR_RELOAD_Pos: u32 = 0;
pub const CRS_CFGR_RELOAD_Msk: u32 = 65535;
pub const CRS_CFGR_RELOAD: u32 = 65535;
pub const CRS_CFGR_FELIM_Pos: u32 = 16;
pub const CRS_CFGR_FELIM_Msk: u32 = 16711680;
pub const CRS_CFGR_FELIM: u32 = 16711680;
pub const CRS_CFGR_SYNCDIV_Pos: u32 = 24;
pub const CRS_CFGR_SYNCDIV_Msk: u32 = 117440512;
pub const CRS_CFGR_SYNCDIV: u32 = 117440512;
pub const CRS_CFGR_SYNCDIV_0: u32 = 16777216;
pub const CRS_CFGR_SYNCDIV_1: u32 = 33554432;
pub const CRS_CFGR_SYNCDIV_2: u32 = 67108864;
pub const CRS_CFGR_SYNCSRC_Pos: u32 = 28;
pub const CRS_CFGR_SYNCSRC_Msk: u32 = 805306368;
pub const CRS_CFGR_SYNCSRC: u32 = 805306368;
pub const CRS_CFGR_SYNCSRC_0: u32 = 268435456;
pub const CRS_CFGR_SYNCSRC_1: u32 = 536870912;
pub const CRS_CFGR_SYNCPOL_Pos: u32 = 31;
pub const CRS_CFGR_SYNCPOL_Msk: u32 = 2147483648;
pub const CRS_CFGR_SYNCPOL: u32 = 2147483648;
pub const CRS_ISR_SYNCOKF_Pos: u32 = 0;
pub const CRS_ISR_SYNCOKF_Msk: u32 = 1;
pub const CRS_ISR_SYNCOKF: u32 = 1;
pub const CRS_ISR_SYNCWARNF_Pos: u32 = 1;
pub const CRS_ISR_SYNCWARNF_Msk: u32 = 2;
pub const CRS_ISR_SYNCWARNF: u32 = 2;
pub const CRS_ISR_ERRF_Pos: u32 = 2;
pub const CRS_ISR_ERRF_Msk: u32 = 4;
pub const CRS_ISR_ERRF: u32 = 4;
pub const CRS_ISR_ESYNCF_Pos: u32 = 3;
pub const CRS_ISR_ESYNCF_Msk: u32 = 8;
pub const CRS_ISR_ESYNCF: u32 = 8;
pub const CRS_ISR_SYNCERR_Pos: u32 = 8;
pub const CRS_ISR_SYNCERR_Msk: u32 = 256;
pub const CRS_ISR_SYNCERR: u32 = 256;
pub const CRS_ISR_SYNCMISS_Pos: u32 = 9;
pub const CRS_ISR_SYNCMISS_Msk: u32 = 512;
pub const CRS_ISR_SYNCMISS: u32 = 512;
pub const CRS_ISR_TRIMOVF_Pos: u32 = 10;
pub const CRS_ISR_TRIMOVF_Msk: u32 = 1024;
pub const CRS_ISR_TRIMOVF: u32 = 1024;
pub const CRS_ISR_FEDIR_Pos: u32 = 15;
pub const CRS_ISR_FEDIR_Msk: u32 = 32768;
pub const CRS_ISR_FEDIR: u32 = 32768;
pub const CRS_ISR_FECAP_Pos: u32 = 16;
pub const CRS_ISR_FECAP_Msk: u32 = 4294901760;
pub const CRS_ISR_FECAP: u32 = 4294901760;
pub const CRS_ICR_SYNCOKC_Pos: u32 = 0;
pub const CRS_ICR_SYNCOKC_Msk: u32 = 1;
pub const CRS_ICR_SYNCOKC: u32 = 1;
pub const CRS_ICR_SYNCWARNC_Pos: u32 = 1;
pub const CRS_ICR_SYNCWARNC_Msk: u32 = 2;
pub const CRS_ICR_SYNCWARNC: u32 = 2;
pub const CRS_ICR_ERRC_Pos: u32 = 2;
pub const CRS_ICR_ERRC_Msk: u32 = 4;
pub const CRS_ICR_ERRC: u32 = 4;
pub const CRS_ICR_ESYNCC_Pos: u32 = 3;
pub const CRS_ICR_ESYNCC_Msk: u32 = 8;
pub const CRS_ICR_ESYNCC: u32 = 8;
pub const DAC_CR_EN1_Pos: u32 = 0;
pub const DAC_CR_EN1_Msk: u32 = 1;
pub const DAC_CR_EN1: u32 = 1;
pub const DAC_CR_TEN1_Pos: u32 = 1;
pub const DAC_CR_TEN1_Msk: u32 = 2;
pub const DAC_CR_TEN1: u32 = 2;
pub const DAC_CR_TSEL1_Pos: u32 = 2;
pub const DAC_CR_TSEL1_Msk: u32 = 60;
pub const DAC_CR_TSEL1: u32 = 60;
pub const DAC_CR_TSEL1_0: u32 = 4;
pub const DAC_CR_TSEL1_1: u32 = 8;
pub const DAC_CR_TSEL1_2: u32 = 16;
pub const DAC_CR_TSEL1_3: u32 = 32;
pub const DAC_CR_WAVE1_Pos: u32 = 6;
pub const DAC_CR_WAVE1_Msk: u32 = 192;
pub const DAC_CR_WAVE1: u32 = 192;
pub const DAC_CR_WAVE1_0: u32 = 64;
pub const DAC_CR_WAVE1_1: u32 = 128;
pub const DAC_CR_MAMP1_Pos: u32 = 8;
pub const DAC_CR_MAMP1_Msk: u32 = 3840;
pub const DAC_CR_MAMP1: u32 = 3840;
pub const DAC_CR_MAMP1_0: u32 = 256;
pub const DAC_CR_MAMP1_1: u32 = 512;
pub const DAC_CR_MAMP1_2: u32 = 1024;
pub const DAC_CR_MAMP1_3: u32 = 2048;
pub const DAC_CR_DMAEN1_Pos: u32 = 12;
pub const DAC_CR_DMAEN1_Msk: u32 = 4096;
pub const DAC_CR_DMAEN1: u32 = 4096;
pub const DAC_CR_DMAUDRIE1_Pos: u32 = 13;
pub const DAC_CR_DMAUDRIE1_Msk: u32 = 8192;
pub const DAC_CR_DMAUDRIE1: u32 = 8192;
pub const DAC_CR_CEN1_Pos: u32 = 14;
pub const DAC_CR_CEN1_Msk: u32 = 16384;
pub const DAC_CR_CEN1: u32 = 16384;
pub const DAC_CR_HFSEL_Pos: u32 = 15;
pub const DAC_CR_HFSEL_Msk: u32 = 32768;
pub const DAC_CR_HFSEL: u32 = 32768;
pub const DAC_CR_EN2_Pos: u32 = 16;
pub const DAC_CR_EN2_Msk: u32 = 65536;
pub const DAC_CR_EN2: u32 = 65536;
pub const DAC_CR_TEN2_Pos: u32 = 17;
pub const DAC_CR_TEN2_Msk: u32 = 131072;
pub const DAC_CR_TEN2: u32 = 131072;
pub const DAC_CR_TSEL2_Pos: u32 = 18;
pub const DAC_CR_TSEL2_Msk: u32 = 3932160;
pub const DAC_CR_TSEL2: u32 = 3932160;
pub const DAC_CR_TSEL2_0: u32 = 262144;
pub const DAC_CR_TSEL2_1: u32 = 524288;
pub const DAC_CR_TSEL2_2: u32 = 1048576;
pub const DAC_CR_TSEL2_3: u32 = 2097152;
pub const DAC_CR_WAVE2_Pos: u32 = 22;
pub const DAC_CR_WAVE2_Msk: u32 = 12582912;
pub const DAC_CR_WAVE2: u32 = 12582912;
pub const DAC_CR_WAVE2_0: u32 = 4194304;
pub const DAC_CR_WAVE2_1: u32 = 8388608;
pub const DAC_CR_MAMP2_Pos: u32 = 24;
pub const DAC_CR_MAMP2_Msk: u32 = 251658240;
pub const DAC_CR_MAMP2: u32 = 251658240;
pub const DAC_CR_MAMP2_0: u32 = 16777216;
pub const DAC_CR_MAMP2_1: u32 = 33554432;
pub const DAC_CR_MAMP2_2: u32 = 67108864;
pub const DAC_CR_MAMP2_3: u32 = 134217728;
pub const DAC_CR_DMAEN2_Pos: u32 = 28;
pub const DAC_CR_DMAEN2_Msk: u32 = 268435456;
pub const DAC_CR_DMAEN2: u32 = 268435456;
pub const DAC_CR_DMAUDRIE2_Pos: u32 = 29;
pub const DAC_CR_DMAUDRIE2_Msk: u32 = 536870912;
pub const DAC_CR_DMAUDRIE2: u32 = 536870912;
pub const DAC_CR_CEN2_Pos: u32 = 30;
pub const DAC_CR_CEN2_Msk: u32 = 1073741824;
pub const DAC_CR_CEN2: u32 = 1073741824;
pub const DAC_SWTRIGR_SWTRIG1_Pos: u32 = 0;
pub const DAC_SWTRIGR_SWTRIG1_Msk: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG1: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG2_Pos: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG2_Msk: u32 = 2;
pub const DAC_SWTRIGR_SWTRIG2: u32 = 2;
pub const DAC_SWTRIGR_SWTRIGB1_Pos: u32 = 16;
pub const DAC_SWTRIGR_SWTRIGB1_Msk: u32 = 65536;
pub const DAC_SWTRIGR_SWTRIGB1: u32 = 65536;
pub const DAC_SWTRIGR_SWTRIGB2_Pos: u32 = 17;
pub const DAC_SWTRIGR_SWTRIGB2_Msk: u32 = 131072;
pub const DAC_SWTRIGR_SWTRIGB2: u32 = 131072;
pub const DAC_DHR12R1_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR12R1_DACC1DHR_Msk: u32 = 4095;
pub const DAC_DHR12R1_DACC1DHR: u32 = 4095;
pub const DAC_DHR12R1_DACC1DHRB_Pos: u32 = 16;
pub const DAC_DHR12R1_DACC1DHRB_Msk: u32 = 268369920;
pub const DAC_DHR12R1_DACC1DHRB: u32 = 268369920;
pub const DAC_DHR12L1_DACC1DHR_Pos: u32 = 4;
pub const DAC_DHR12L1_DACC1DHR_Msk: u32 = 65520;
pub const DAC_DHR12L1_DACC1DHR: u32 = 65520;
pub const DAC_DHR12L1_DACC1DHRB_Pos: u32 = 20;
pub const DAC_DHR12L1_DACC1DHRB_Msk: u32 = 4293918720;
pub const DAC_DHR12L1_DACC1DHRB: u32 = 4293918720;
pub const DAC_DHR8R1_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR8R1_DACC1DHR_Msk: u32 = 255;
pub const DAC_DHR8R1_DACC1DHR: u32 = 255;
pub const DAC_DHR8R1_DACC1DHRB_Pos: u32 = 8;
pub const DAC_DHR8R1_DACC1DHRB_Msk: u32 = 65280;
pub const DAC_DHR8R1_DACC1DHRB: u32 = 65280;
pub const DAC_DHR12R2_DACC2DHR_Pos: u32 = 0;
pub const DAC_DHR12R2_DACC2DHR_Msk: u32 = 4095;
pub const DAC_DHR12R2_DACC2DHR: u32 = 4095;
pub const DAC_DHR12R2_DACC2DHRB_Pos: u32 = 16;
pub const DAC_DHR12R2_DACC2DHRB_Msk: u32 = 268369920;
pub const DAC_DHR12R2_DACC2DHRB: u32 = 268369920;
pub const DAC_DHR12L2_DACC2DHR_Pos: u32 = 4;
pub const DAC_DHR12L2_DACC2DHR_Msk: u32 = 65520;
pub const DAC_DHR12L2_DACC2DHR: u32 = 65520;
pub const DAC_DHR12L2_DACC2DHRB_Pos: u32 = 20;
pub const DAC_DHR12L2_DACC2DHRB_Msk: u32 = 4293918720;
pub const DAC_DHR12L2_DACC2DHRB: u32 = 4293918720;
pub const DAC_DHR8R2_DACC2DHR_Pos: u32 = 0;
pub const DAC_DHR8R2_DACC2DHR_Msk: u32 = 255;
pub const DAC_DHR8R2_DACC2DHR: u32 = 255;
pub const DAC_DHR8R2_DACC2DHRB_Pos: u32 = 8;
pub const DAC_DHR8R2_DACC2DHRB_Msk: u32 = 65280;
pub const DAC_DHR8R2_DACC2DHRB: u32 = 65280;
pub const DAC_DHR12RD_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR12RD_DACC1DHR_Msk: u32 = 4095;
pub const DAC_DHR12RD_DACC1DHR: u32 = 4095;
pub const DAC_DHR12RD_DACC2DHR_Pos: u32 = 16;
pub const DAC_DHR12RD_DACC2DHR_Msk: u32 = 268369920;
pub const DAC_DHR12RD_DACC2DHR: u32 = 268369920;
pub const DAC_DHR12LD_DACC1DHR_Pos: u32 = 4;
pub const DAC_DHR12LD_DACC1DHR_Msk: u32 = 65520;
pub const DAC_DHR12LD_DACC1DHR: u32 = 65520;
pub const DAC_DHR12LD_DACC2DHR_Pos: u32 = 20;
pub const DAC_DHR12LD_DACC2DHR_Msk: u32 = 4293918720;
pub const DAC_DHR12LD_DACC2DHR: u32 = 4293918720;
pub const DAC_DHR8RD_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR8RD_DACC1DHR_Msk: u32 = 255;
pub const DAC_DHR8RD_DACC1DHR: u32 = 255;
pub const DAC_DHR8RD_DACC2DHR_Pos: u32 = 8;
pub const DAC_DHR8RD_DACC2DHR_Msk: u32 = 65280;
pub const DAC_DHR8RD_DACC2DHR: u32 = 65280;
pub const DAC_DOR1_DACC1DOR_Pos: u32 = 0;
pub const DAC_DOR1_DACC1DOR_Msk: u32 = 4095;
pub const DAC_DOR1_DACC1DOR: u32 = 4095;
pub const DAC_DOR1_DACC1DORB_Pos: u32 = 16;
pub const DAC_DOR1_DACC1DORB_Msk: u32 = 268369920;
pub const DAC_DOR1_DACC1DORB: u32 = 268369920;
pub const DAC_DOR2_DACC2DOR_Pos: u32 = 0;
pub const DAC_DOR2_DACC2DOR_Msk: u32 = 4095;
pub const DAC_DOR2_DACC2DOR: u32 = 4095;
pub const DAC_DOR2_DACC2DORB_Pos: u32 = 16;
pub const DAC_DOR2_DACC2DORB_Msk: u32 = 268369920;
pub const DAC_DOR2_DACC2DORB: u32 = 268369920;
pub const DAC_SR_DAC1RDY_Pos: u32 = 11;
pub const DAC_SR_DAC1RDY_Msk: u32 = 2048;
pub const DAC_SR_DAC1RDY: u32 = 2048;
pub const DAC_SR_DORSTAT1_Pos: u32 = 12;
pub const DAC_SR_DORSTAT1_Msk: u32 = 4096;
pub const DAC_SR_DORSTAT1: u32 = 4096;
pub const DAC_SR_DMAUDR1_Pos: u32 = 13;
pub const DAC_SR_DMAUDR1_Msk: u32 = 8192;
pub const DAC_SR_DMAUDR1: u32 = 8192;
pub const DAC_SR_CAL_FLAG1_Pos: u32 = 14;
pub const DAC_SR_CAL_FLAG1_Msk: u32 = 16384;
pub const DAC_SR_CAL_FLAG1: u32 = 16384;
pub const DAC_SR_BWST1_Pos: u32 = 15;
pub const DAC_SR_BWST1_Msk: u32 = 32768;
pub const DAC_SR_BWST1: u32 = 32768;
pub const DAC_SR_DAC2RDY_Pos: u32 = 27;
pub const DAC_SR_DAC2RDY_Msk: u32 = 134217728;
pub const DAC_SR_DAC2RDY: u32 = 134217728;
pub const DAC_SR_DORSTAT2_Pos: u32 = 28;
pub const DAC_SR_DORSTAT2_Msk: u32 = 268435456;
pub const DAC_SR_DORSTAT2: u32 = 268435456;
pub const DAC_SR_DMAUDR2_Pos: u32 = 29;
pub const DAC_SR_DMAUDR2_Msk: u32 = 536870912;
pub const DAC_SR_DMAUDR2: u32 = 536870912;
pub const DAC_SR_CAL_FLAG2_Pos: u32 = 30;
pub const DAC_SR_CAL_FLAG2_Msk: u32 = 1073741824;
pub const DAC_SR_CAL_FLAG2: u32 = 1073741824;
pub const DAC_SR_BWST2_Pos: u32 = 31;
pub const DAC_SR_BWST2_Msk: u32 = 2147483648;
pub const DAC_SR_BWST2: u32 = 2147483648;
pub const DAC_CCR_OTRIM1_Pos: u32 = 0;
pub const DAC_CCR_OTRIM1_Msk: u32 = 31;
pub const DAC_CCR_OTRIM1: u32 = 31;
pub const DAC_CCR_OTRIM2_Pos: u32 = 16;
pub const DAC_CCR_OTRIM2_Msk: u32 = 2031616;
pub const DAC_CCR_OTRIM2: u32 = 2031616;
pub const DAC_MCR_MODE1_Pos: u32 = 0;
pub const DAC_MCR_MODE1_Msk: u32 = 7;
pub const DAC_MCR_MODE1: u32 = 7;
pub const DAC_MCR_MODE1_0: u32 = 1;
pub const DAC_MCR_MODE1_1: u32 = 2;
pub const DAC_MCR_MODE1_2: u32 = 4;
pub const DAC_MCR_DMADOUBLE1_Pos: u32 = 8;
pub const DAC_MCR_DMADOUBLE1_Msk: u32 = 256;
pub const DAC_MCR_DMADOUBLE1: u32 = 256;
pub const DAC_MCR_SINFORMAT1_Pos: u32 = 9;
pub const DAC_MCR_SINFORMAT1_Msk: u32 = 512;
pub const DAC_MCR_SINFORMAT1: u32 = 512;
pub const DAC_MCR_HFSEL_Pos: u32 = 14;
pub const DAC_MCR_HFSEL_Msk: u32 = 49152;
pub const DAC_MCR_HFSEL: u32 = 49152;
pub const DAC_MCR_HFSEL_0: u32 = 16384;
pub const DAC_MCR_HFSEL_1: u32 = 32768;
pub const DAC_MCR_MODE2_Pos: u32 = 16;
pub const DAC_MCR_MODE2_Msk: u32 = 458752;
pub const DAC_MCR_MODE2: u32 = 458752;
pub const DAC_MCR_MODE2_0: u32 = 65536;
pub const DAC_MCR_MODE2_1: u32 = 131072;
pub const DAC_MCR_MODE2_2: u32 = 262144;
pub const DAC_MCR_DMADOUBLE2_Pos: u32 = 24;
pub const DAC_MCR_DMADOUBLE2_Msk: u32 = 16777216;
pub const DAC_MCR_DMADOUBLE2: u32 = 16777216;
pub const DAC_MCR_SINFORMAT2_Pos: u32 = 25;
pub const DAC_MCR_SINFORMAT2_Msk: u32 = 33554432;
pub const DAC_MCR_SINFORMAT2: u32 = 33554432;
pub const DAC_SHSR1_TSAMPLE1_Pos: u32 = 0;
pub const DAC_SHSR1_TSAMPLE1_Msk: u32 = 1023;
pub const DAC_SHSR1_TSAMPLE1: u32 = 1023;
pub const DAC_SHSR2_TSAMPLE2_Pos: u32 = 0;
pub const DAC_SHSR2_TSAMPLE2_Msk: u32 = 1023;
pub const DAC_SHSR2_TSAMPLE2: u32 = 1023;
pub const DAC_SHHR_THOLD1_Pos: u32 = 0;
pub const DAC_SHHR_THOLD1_Msk: u32 = 1023;
pub const DAC_SHHR_THOLD1: u32 = 1023;
pub const DAC_SHHR_THOLD2_Pos: u32 = 16;
pub const DAC_SHHR_THOLD2_Msk: u32 = 67043328;
pub const DAC_SHHR_THOLD2: u32 = 67043328;
pub const DAC_SHRR_TREFRESH1_Pos: u32 = 0;
pub const DAC_SHRR_TREFRESH1_Msk: u32 = 255;
pub const DAC_SHRR_TREFRESH1: u32 = 255;
pub const DAC_SHRR_TREFRESH2_Pos: u32 = 16;
pub const DAC_SHRR_TREFRESH2_Msk: u32 = 16711680;
pub const DAC_SHRR_TREFRESH2: u32 = 16711680;
pub const DAC_STR1_STRSTDATA1_Pos: u32 = 0;
pub const DAC_STR1_STRSTDATA1_Msk: u32 = 4095;
pub const DAC_STR1_STRSTDATA1: u32 = 4095;
pub const DAC_STR1_STDIR1_Pos: u32 = 12;
pub const DAC_STR1_STDIR1_Msk: u32 = 4096;
pub const DAC_STR1_STDIR1: u32 = 4096;
pub const DAC_STR1_STINCDATA1_Pos: u32 = 16;
pub const DAC_STR1_STINCDATA1_Msk: u32 = 4294901760;
pub const DAC_STR1_STINCDATA1: u32 = 4294901760;
pub const DAC_STR2_STRSTDATA2_Pos: u32 = 0;
pub const DAC_STR2_STRSTDATA2_Msk: u32 = 4095;
pub const DAC_STR2_STRSTDATA2: u32 = 4095;
pub const DAC_STR2_STDIR2_Pos: u32 = 12;
pub const DAC_STR2_STDIR2_Msk: u32 = 4096;
pub const DAC_STR2_STDIR2: u32 = 4096;
pub const DAC_STR2_STINCDATA2_Pos: u32 = 16;
pub const DAC_STR2_STINCDATA2_Msk: u32 = 4294901760;
pub const DAC_STR2_STINCDATA2: u32 = 4294901760;
pub const DAC_STMODR_STRSTTRIGSEL1_Pos: u32 = 0;
pub const DAC_STMODR_STRSTTRIGSEL1_Msk: u32 = 15;
pub const DAC_STMODR_STRSTTRIGSEL1: u32 = 15;
pub const DAC_STMODR_STRSTTRIGSEL1_0: u32 = 1;
pub const DAC_STMODR_STRSTTRIGSEL1_1: u32 = 2;
pub const DAC_STMODR_STRSTTRIGSEL1_2: u32 = 4;
pub const DAC_STMODR_STRSTTRIGSEL1_3: u32 = 8;
pub const DAC_STMODR_STINCTRIGSEL1_Pos: u32 = 8;
pub const DAC_STMODR_STINCTRIGSEL1_Msk: u32 = 3840;
pub const DAC_STMODR_STINCTRIGSEL1: u32 = 3840;
pub const DAC_STMODR_STINCTRIGSEL1_0: u32 = 256;
pub const DAC_STMODR_STINCTRIGSEL1_1: u32 = 512;
pub const DAC_STMODR_STINCTRIGSEL1_2: u32 = 1024;
pub const DAC_STMODR_STINCTRIGSEL1_3: u32 = 2048;
pub const DAC_STMODR_STRSTTRIGSEL2_Pos: u32 = 16;
pub const DAC_STMODR_STRSTTRIGSEL2_Msk: u32 = 983040;
pub const DAC_STMODR_STRSTTRIGSEL2: u32 = 983040;
pub const DAC_STMODR_STRSTTRIGSEL2_0: u32 = 65536;
pub const DAC_STMODR_STRSTTRIGSEL2_1: u32 = 131072;
pub const DAC_STMODR_STRSTTRIGSEL2_2: u32 = 262144;
pub const DAC_STMODR_STRSTTRIGSEL2_3: u32 = 524288;
pub const DAC_STMODR_STINCTRIGSEL2_Pos: u32 = 24;
pub const DAC_STMODR_STINCTRIGSEL2_Msk: u32 = 251658240;
pub const DAC_STMODR_STINCTRIGSEL2: u32 = 251658240;
pub const DAC_STMODR_STINCTRIGSEL2_0: u32 = 16777216;
pub const DAC_STMODR_STINCTRIGSEL2_1: u32 = 33554432;
pub const DAC_STMODR_STINCTRIGSEL2_2: u32 = 67108864;
pub const DAC_STMODR_STINCTRIGSEL2_3: u32 = 134217728;
pub const DBGMCU_IDCODE_DEV_ID_Pos: u32 = 0;
pub const DBGMCU_IDCODE_DEV_ID_Msk: u32 = 4095;
pub const DBGMCU_IDCODE_DEV_ID: u32 = 4095;
pub const DBGMCU_IDCODE_REV_ID_Pos: u32 = 16;
pub const DBGMCU_IDCODE_REV_ID_Msk: u32 = 4294901760;
pub const DBGMCU_IDCODE_REV_ID: u32 = 4294901760;
pub const DBGMCU_CR_DBG_SLEEP_Pos: u32 = 0;
pub const DBGMCU_CR_DBG_SLEEP_Msk: u32 = 1;
pub const DBGMCU_CR_DBG_SLEEP: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Pos: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Msk: u32 = 2;
pub const DBGMCU_CR_DBG_STOP: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Pos: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Msk: u32 = 4;
pub const DBGMCU_CR_DBG_STANDBY: u32 = 4;
pub const DBGMCU_CR_TRACE_IOEN_Pos: u32 = 5;
pub const DBGMCU_CR_TRACE_IOEN_Msk: u32 = 32;
pub const DBGMCU_CR_TRACE_IOEN: u32 = 32;
pub const DBGMCU_CR_TRACE_MODE_Pos: u32 = 6;
pub const DBGMCU_CR_TRACE_MODE_Msk: u32 = 192;
pub const DBGMCU_CR_TRACE_MODE: u32 = 192;
pub const DBGMCU_CR_TRACE_MODE_0: u32 = 64;
pub const DBGMCU_CR_TRACE_MODE_1: u32 = 128;
pub const DBGMCU_APB1FZR1_DBG_TIM2_STOP_Pos: u32 = 0;
pub const DBGMCU_APB1FZR1_DBG_TIM2_STOP_Msk: u32 = 1;
pub const DBGMCU_APB1FZR1_DBG_TIM2_STOP: u32 = 1;
pub const DBGMCU_APB1FZR1_DBG_TIM3_STOP_Pos: u32 = 1;
pub const DBGMCU_APB1FZR1_DBG_TIM3_STOP_Msk: u32 = 2;
pub const DBGMCU_APB1FZR1_DBG_TIM3_STOP: u32 = 2;
pub const DBGMCU_APB1FZR1_DBG_TIM4_STOP_Pos: u32 = 2;
pub const DBGMCU_APB1FZR1_DBG_TIM4_STOP_Msk: u32 = 4;
pub const DBGMCU_APB1FZR1_DBG_TIM4_STOP: u32 = 4;
pub const DBGMCU_APB1FZR1_DBG_TIM6_STOP_Pos: u32 = 4;
pub const DBGMCU_APB1FZR1_DBG_TIM6_STOP_Msk: u32 = 16;
pub const DBGMCU_APB1FZR1_DBG_TIM6_STOP: u32 = 16;
pub const DBGMCU_APB1FZR1_DBG_TIM7_STOP_Pos: u32 = 5;
pub const DBGMCU_APB1FZR1_DBG_TIM7_STOP_Msk: u32 = 32;
pub const DBGMCU_APB1FZR1_DBG_TIM7_STOP: u32 = 32;
pub const DBGMCU_APB1FZR1_DBG_RTC_STOP_Pos: u32 = 10;
pub const DBGMCU_APB1FZR1_DBG_RTC_STOP_Msk: u32 = 1024;
pub const DBGMCU_APB1FZR1_DBG_RTC_STOP: u32 = 1024;
pub const DBGMCU_APB1FZR1_DBG_WWDG_STOP_Pos: u32 = 11;
pub const DBGMCU_APB1FZR1_DBG_WWDG_STOP_Msk: u32 = 2048;
pub const DBGMCU_APB1FZR1_DBG_WWDG_STOP: u32 = 2048;
pub const DBGMCU_APB1FZR1_DBG_IWDG_STOP_Pos: u32 = 12;
pub const DBGMCU_APB1FZR1_DBG_IWDG_STOP_Msk: u32 = 4096;
pub const DBGMCU_APB1FZR1_DBG_IWDG_STOP: u32 = 4096;
pub const DBGMCU_APB1FZR1_DBG_I2C1_STOP_Pos: u32 = 21;
pub const DBGMCU_APB1FZR1_DBG_I2C1_STOP_Msk: u32 = 2097152;
pub const DBGMCU_APB1FZR1_DBG_I2C1_STOP: u32 = 2097152;
pub const DBGMCU_APB1FZR1_DBG_I2C2_STOP_Pos: u32 = 22;
pub const DBGMCU_APB1FZR1_DBG_I2C2_STOP_Msk: u32 = 4194304;
pub const DBGMCU_APB1FZR1_DBG_I2C2_STOP: u32 = 4194304;
pub const DBGMCU_APB1FZR1_DBG_I2C3_STOP_Pos: u32 = 30;
pub const DBGMCU_APB1FZR1_DBG_I2C3_STOP_Msk: u32 = 1073741824;
pub const DBGMCU_APB1FZR1_DBG_I2C3_STOP: u32 = 1073741824;
pub const DBGMCU_APB1FZR1_DBG_LPTIM1_STOP_Pos: u32 = 31;
pub const DBGMCU_APB1FZR1_DBG_LPTIM1_STOP_Msk: u32 = 2147483648;
pub const DBGMCU_APB1FZR1_DBG_LPTIM1_STOP: u32 = 2147483648;
pub const DBGMCU_APB2FZ_DBG_TIM1_STOP_Pos: u32 = 11;
pub const DBGMCU_APB2FZ_DBG_TIM1_STOP_Msk: u32 = 2048;
pub const DBGMCU_APB2FZ_DBG_TIM1_STOP: u32 = 2048;
pub const DBGMCU_APB2FZ_DBG_TIM8_STOP_Pos: u32 = 13;
pub const DBGMCU_APB2FZ_DBG_TIM8_STOP_Msk: u32 = 8192;
pub const DBGMCU_APB2FZ_DBG_TIM8_STOP: u32 = 8192;
pub const DBGMCU_APB2FZ_DBG_TIM15_STOP_Pos: u32 = 16;
pub const DBGMCU_APB2FZ_DBG_TIM15_STOP_Msk: u32 = 65536;
pub const DBGMCU_APB2FZ_DBG_TIM15_STOP: u32 = 65536;
pub const DBGMCU_APB2FZ_DBG_TIM16_STOP_Pos: u32 = 17;
pub const DBGMCU_APB2FZ_DBG_TIM16_STOP_Msk: u32 = 131072;
pub const DBGMCU_APB2FZ_DBG_TIM16_STOP: u32 = 131072;
pub const DBGMCU_APB2FZ_DBG_TIM17_STOP_Pos: u32 = 18;
pub const DBGMCU_APB2FZ_DBG_TIM17_STOP_Msk: u32 = 262144;
pub const DBGMCU_APB2FZ_DBG_TIM17_STOP: u32 = 262144;
pub const DMA_ISR_GIF1_Pos: u32 = 0;
pub const DMA_ISR_GIF1_Msk: u32 = 1;
pub const DMA_ISR_GIF1: u32 = 1;
pub const DMA_ISR_TCIF1_Pos: u32 = 1;
pub const DMA_ISR_TCIF1_Msk: u32 = 2;
pub const DMA_ISR_TCIF1: u32 = 2;
pub const DMA_ISR_HTIF1_Pos: u32 = 2;
pub const DMA_ISR_HTIF1_Msk: u32 = 4;
pub const DMA_ISR_HTIF1: u32 = 4;
pub const DMA_ISR_TEIF1_Pos: u32 = 3;
pub const DMA_ISR_TEIF1_Msk: u32 = 8;
pub const DMA_ISR_TEIF1: u32 = 8;
pub const DMA_ISR_GIF2_Pos: u32 = 4;
pub const DMA_ISR_GIF2_Msk: u32 = 16;
pub const DMA_ISR_GIF2: u32 = 16;
pub const DMA_ISR_TCIF2_Pos: u32 = 5;
pub const DMA_ISR_TCIF2_Msk: u32 = 32;
pub const DMA_ISR_TCIF2: u32 = 32;
pub const DMA_ISR_HTIF2_Pos: u32 = 6;
pub const DMA_ISR_HTIF2_Msk: u32 = 64;
pub const DMA_ISR_HTIF2: u32 = 64;
pub const DMA_ISR_TEIF2_Pos: u32 = 7;
pub const DMA_ISR_TEIF2_Msk: u32 = 128;
pub const DMA_ISR_TEIF2: u32 = 128;
pub const DMA_ISR_GIF3_Pos: u32 = 8;
pub const DMA_ISR_GIF3_Msk: u32 = 256;
pub const DMA_ISR_GIF3: u32 = 256;
pub const DMA_ISR_TCIF3_Pos: u32 = 9;
pub const DMA_ISR_TCIF3_Msk: u32 = 512;
pub const DMA_ISR_TCIF3: u32 = 512;
pub const DMA_ISR_HTIF3_Pos: u32 = 10;
pub const DMA_ISR_HTIF3_Msk: u32 = 1024;
pub const DMA_ISR_HTIF3: u32 = 1024;
pub const DMA_ISR_TEIF3_Pos: u32 = 11;
pub const DMA_ISR_TEIF3_Msk: u32 = 2048;
pub const DMA_ISR_TEIF3: u32 = 2048;
pub const DMA_ISR_GIF4_Pos: u32 = 12;
pub const DMA_ISR_GIF4_Msk: u32 = 4096;
pub const DMA_ISR_GIF4: u32 = 4096;
pub const DMA_ISR_TCIF4_Pos: u32 = 13;
pub const DMA_ISR_TCIF4_Msk: u32 = 8192;
pub const DMA_ISR_TCIF4: u32 = 8192;
pub const DMA_ISR_HTIF4_Pos: u32 = 14;
pub const DMA_ISR_HTIF4_Msk: u32 = 16384;
pub const DMA_ISR_HTIF4: u32 = 16384;
pub const DMA_ISR_TEIF4_Pos: u32 = 15;
pub const DMA_ISR_TEIF4_Msk: u32 = 32768;
pub const DMA_ISR_TEIF4: u32 = 32768;
pub const DMA_ISR_GIF5_Pos: u32 = 16;
pub const DMA_ISR_GIF5_Msk: u32 = 65536;
pub const DMA_ISR_GIF5: u32 = 65536;
pub const DMA_ISR_TCIF5_Pos: u32 = 17;
pub const DMA_ISR_TCIF5_Msk: u32 = 131072;
pub const DMA_ISR_TCIF5: u32 = 131072;
pub const DMA_ISR_HTIF5_Pos: u32 = 18;
pub const DMA_ISR_HTIF5_Msk: u32 = 262144;
pub const DMA_ISR_HTIF5: u32 = 262144;
pub const DMA_ISR_TEIF5_Pos: u32 = 19;
pub const DMA_ISR_TEIF5_Msk: u32 = 524288;
pub const DMA_ISR_TEIF5: u32 = 524288;
pub const DMA_ISR_GIF6_Pos: u32 = 20;
pub const DMA_ISR_GIF6_Msk: u32 = 1048576;
pub const DMA_ISR_GIF6: u32 = 1048576;
pub const DMA_ISR_TCIF6_Pos: u32 = 21;
pub const DMA_ISR_TCIF6_Msk: u32 = 2097152;
pub const DMA_ISR_TCIF6: u32 = 2097152;
pub const DMA_ISR_HTIF6_Pos: u32 = 22;
pub const DMA_ISR_HTIF6_Msk: u32 = 4194304;
pub const DMA_ISR_HTIF6: u32 = 4194304;
pub const DMA_ISR_TEIF6_Pos: u32 = 23;
pub const DMA_ISR_TEIF6_Msk: u32 = 8388608;
pub const DMA_ISR_TEIF6: u32 = 8388608;
pub const DMA_IFCR_CGIF1_Pos: u32 = 0;
pub const DMA_IFCR_CGIF1_Msk: u32 = 1;
pub const DMA_IFCR_CGIF1: u32 = 1;
pub const DMA_IFCR_CTCIF1_Pos: u32 = 1;
pub const DMA_IFCR_CTCIF1_Msk: u32 = 2;
pub const DMA_IFCR_CTCIF1: u32 = 2;
pub const DMA_IFCR_CHTIF1_Pos: u32 = 2;
pub const DMA_IFCR_CHTIF1_Msk: u32 = 4;
pub const DMA_IFCR_CHTIF1: u32 = 4;
pub const DMA_IFCR_CTEIF1_Pos: u32 = 3;
pub const DMA_IFCR_CTEIF1_Msk: u32 = 8;
pub const DMA_IFCR_CTEIF1: u32 = 8;
pub const DMA_IFCR_CGIF2_Pos: u32 = 4;
pub const DMA_IFCR_CGIF2_Msk: u32 = 16;
pub const DMA_IFCR_CGIF2: u32 = 16;
pub const DMA_IFCR_CTCIF2_Pos: u32 = 5;
pub const DMA_IFCR_CTCIF2_Msk: u32 = 32;
pub const DMA_IFCR_CTCIF2: u32 = 32;
pub const DMA_IFCR_CHTIF2_Pos: u32 = 6;
pub const DMA_IFCR_CHTIF2_Msk: u32 = 64;
pub const DMA_IFCR_CHTIF2: u32 = 64;
pub const DMA_IFCR_CTEIF2_Pos: u32 = 7;
pub const DMA_IFCR_CTEIF2_Msk: u32 = 128;
pub const DMA_IFCR_CTEIF2: u32 = 128;
pub const DMA_IFCR_CGIF3_Pos: u32 = 8;
pub const DMA_IFCR_CGIF3_Msk: u32 = 256;
pub const DMA_IFCR_CGIF3: u32 = 256;
pub const DMA_IFCR_CTCIF3_Pos: u32 = 9;
pub const DMA_IFCR_CTCIF3_Msk: u32 = 512;
pub const DMA_IFCR_CTCIF3: u32 = 512;
pub const DMA_IFCR_CHTIF3_Pos: u32 = 10;
pub const DMA_IFCR_CHTIF3_Msk: u32 = 1024;
pub const DMA_IFCR_CHTIF3: u32 = 1024;
pub const DMA_IFCR_CTEIF3_Pos: u32 = 11;
pub const DMA_IFCR_CTEIF3_Msk: u32 = 2048;
pub const DMA_IFCR_CTEIF3: u32 = 2048;
pub const DMA_IFCR_CGIF4_Pos: u32 = 12;
pub const DMA_IFCR_CGIF4_Msk: u32 = 4096;
pub const DMA_IFCR_CGIF4: u32 = 4096;
pub const DMA_IFCR_CTCIF4_Pos: u32 = 13;
pub const DMA_IFCR_CTCIF4_Msk: u32 = 8192;
pub const DMA_IFCR_CTCIF4: u32 = 8192;
pub const DMA_IFCR_CHTIF4_Pos: u32 = 14;
pub const DMA_IFCR_CHTIF4_Msk: u32 = 16384;
pub const DMA_IFCR_CHTIF4: u32 = 16384;
pub const DMA_IFCR_CTEIF4_Pos: u32 = 15;
pub const DMA_IFCR_CTEIF4_Msk: u32 = 32768;
pub const DMA_IFCR_CTEIF4: u32 = 32768;
pub const DMA_IFCR_CGIF5_Pos: u32 = 16;
pub const DMA_IFCR_CGIF5_Msk: u32 = 65536;
pub const DMA_IFCR_CGIF5: u32 = 65536;
pub const DMA_IFCR_CTCIF5_Pos: u32 = 17;
pub const DMA_IFCR_CTCIF5_Msk: u32 = 131072;
pub const DMA_IFCR_CTCIF5: u32 = 131072;
pub const DMA_IFCR_CHTIF5_Pos: u32 = 18;
pub const DMA_IFCR_CHTIF5_Msk: u32 = 262144;
pub const DMA_IFCR_CHTIF5: u32 = 262144;
pub const DMA_IFCR_CTEIF5_Pos: u32 = 19;
pub const DMA_IFCR_CTEIF5_Msk: u32 = 524288;
pub const DMA_IFCR_CTEIF5: u32 = 524288;
pub const DMA_IFCR_CGIF6_Pos: u32 = 20;
pub const DMA_IFCR_CGIF6_Msk: u32 = 1048576;
pub const DMA_IFCR_CGIF6: u32 = 1048576;
pub const DMA_IFCR_CTCIF6_Pos: u32 = 21;
pub const DMA_IFCR_CTCIF6_Msk: u32 = 2097152;
pub const DMA_IFCR_CTCIF6: u32 = 2097152;
pub const DMA_IFCR_CHTIF6_Pos: u32 = 22;
pub const DMA_IFCR_CHTIF6_Msk: u32 = 4194304;
pub const DMA_IFCR_CHTIF6: u32 = 4194304;
pub const DMA_IFCR_CTEIF6_Pos: u32 = 23;
pub const DMA_IFCR_CTEIF6_Msk: u32 = 8388608;
pub const DMA_IFCR_CTEIF6: u32 = 8388608;
pub const DMA_CCR_EN_Pos: u32 = 0;
pub const DMA_CCR_EN_Msk: u32 = 1;
pub const DMA_CCR_EN: u32 = 1;
pub const DMA_CCR_TCIE_Pos: u32 = 1;
pub const DMA_CCR_TCIE_Msk: u32 = 2;
pub const DMA_CCR_TCIE: u32 = 2;
pub const DMA_CCR_HTIE_Pos: u32 = 2;
pub const DMA_CCR_HTIE_Msk: u32 = 4;
pub const DMA_CCR_HTIE: u32 = 4;
pub const DMA_CCR_TEIE_Pos: u32 = 3;
pub const DMA_CCR_TEIE_Msk: u32 = 8;
pub const DMA_CCR_TEIE: u32 = 8;
pub const DMA_CCR_DIR_Pos: u32 = 4;
pub const DMA_CCR_DIR_Msk: u32 = 16;
pub const DMA_CCR_DIR: u32 = 16;
pub const DMA_CCR_CIRC_Pos: u32 = 5;
pub const DMA_CCR_CIRC_Msk: u32 = 32;
pub const DMA_CCR_CIRC: u32 = 32;
pub const DMA_CCR_PINC_Pos: u32 = 6;
pub const DMA_CCR_PINC_Msk: u32 = 64;
pub const DMA_CCR_PINC: u32 = 64;
pub const DMA_CCR_MINC_Pos: u32 = 7;
pub const DMA_CCR_MINC_Msk: u32 = 128;
pub const DMA_CCR_MINC: u32 = 128;
pub const DMA_CCR_PSIZE_Pos: u32 = 8;
pub const DMA_CCR_PSIZE_Msk: u32 = 768;
pub const DMA_CCR_PSIZE: u32 = 768;
pub const DMA_CCR_PSIZE_0: u32 = 256;
pub const DMA_CCR_PSIZE_1: u32 = 512;
pub const DMA_CCR_MSIZE_Pos: u32 = 10;
pub const DMA_CCR_MSIZE_Msk: u32 = 3072;
pub const DMA_CCR_MSIZE: u32 = 3072;
pub const DMA_CCR_MSIZE_0: u32 = 1024;
pub const DMA_CCR_MSIZE_1: u32 = 2048;
pub const DMA_CCR_PL_Pos: u32 = 12;
pub const DMA_CCR_PL_Msk: u32 = 12288;
pub const DMA_CCR_PL: u32 = 12288;
pub const DMA_CCR_PL_0: u32 = 4096;
pub const DMA_CCR_PL_1: u32 = 8192;
pub const DMA_CCR_MEM2MEM_Pos: u32 = 14;
pub const DMA_CCR_MEM2MEM_Msk: u32 = 16384;
pub const DMA_CCR_MEM2MEM: u32 = 16384;
pub const DMA_CNDTR_NDT_Pos: u32 = 0;
pub const DMA_CNDTR_NDT_Msk: u32 = 65535;
pub const DMA_CNDTR_NDT: u32 = 65535;
pub const DMA_CPAR_PA_Pos: u32 = 0;
pub const DMA_CPAR_PA_Msk: u32 = 4294967295;
pub const DMA_CPAR_PA: u32 = 4294967295;
pub const DMA_CMAR_MA_Pos: u32 = 0;
pub const DMA_CMAR_MA_Msk: u32 = 4294967295;
pub const DMA_CMAR_MA: u32 = 4294967295;
pub const DMAMUX_CxCR_DMAREQ_ID_Pos: u32 = 0;
pub const DMAMUX_CxCR_DMAREQ_ID_Msk: u32 = 255;
pub const DMAMUX_CxCR_DMAREQ_ID: u32 = 255;
pub const DMAMUX_CxCR_DMAREQ_ID_0: u32 = 1;
pub const DMAMUX_CxCR_DMAREQ_ID_1: u32 = 2;
pub const DMAMUX_CxCR_DMAREQ_ID_2: u32 = 4;
pub const DMAMUX_CxCR_DMAREQ_ID_3: u32 = 8;
pub const DMAMUX_CxCR_DMAREQ_ID_4: u32 = 16;
pub const DMAMUX_CxCR_DMAREQ_ID_5: u32 = 32;
pub const DMAMUX_CxCR_DMAREQ_ID_6: u32 = 64;
pub const DMAMUX_CxCR_DMAREQ_ID_7: u32 = 128;
pub const DMAMUX_CxCR_SOIE_Pos: u32 = 8;
pub const DMAMUX_CxCR_SOIE_Msk: u32 = 256;
pub const DMAMUX_CxCR_SOIE: u32 = 256;
pub const DMAMUX_CxCR_EGE_Pos: u32 = 9;
pub const DMAMUX_CxCR_EGE_Msk: u32 = 512;
pub const DMAMUX_CxCR_EGE: u32 = 512;
pub const DMAMUX_CxCR_SE_Pos: u32 = 16;
pub const DMAMUX_CxCR_SE_Msk: u32 = 65536;
pub const DMAMUX_CxCR_SE: u32 = 65536;
pub const DMAMUX_CxCR_SPOL_Pos: u32 = 17;
pub const DMAMUX_CxCR_SPOL_Msk: u32 = 393216;
pub const DMAMUX_CxCR_SPOL: u32 = 393216;
pub const DMAMUX_CxCR_SPOL_0: u32 = 131072;
pub const DMAMUX_CxCR_SPOL_1: u32 = 262144;
pub const DMAMUX_CxCR_NBREQ_Pos: u32 = 19;
pub const DMAMUX_CxCR_NBREQ_Msk: u32 = 16252928;
pub const DMAMUX_CxCR_NBREQ: u32 = 16252928;
pub const DMAMUX_CxCR_NBREQ_0: u32 = 524288;
pub const DMAMUX_CxCR_NBREQ_1: u32 = 1048576;
pub const DMAMUX_CxCR_NBREQ_2: u32 = 2097152;
pub const DMAMUX_CxCR_NBREQ_3: u32 = 4194304;
pub const DMAMUX_CxCR_NBREQ_4: u32 = 8388608;
pub const DMAMUX_CxCR_SYNC_ID_Pos: u32 = 24;
pub const DMAMUX_CxCR_SYNC_ID_Msk: u32 = 520093696;
pub const DMAMUX_CxCR_SYNC_ID: u32 = 520093696;
pub const DMAMUX_CxCR_SYNC_ID_0: u32 = 16777216;
pub const DMAMUX_CxCR_SYNC_ID_1: u32 = 33554432;
pub const DMAMUX_CxCR_SYNC_ID_2: u32 = 67108864;
pub const DMAMUX_CxCR_SYNC_ID_3: u32 = 134217728;
pub const DMAMUX_CxCR_SYNC_ID_4: u32 = 268435456;
pub const DMAMUX_CSR_SOF0_Pos: u32 = 0;
pub const DMAMUX_CSR_SOF0_Msk: u32 = 1;
pub const DMAMUX_CSR_SOF0: u32 = 1;
pub const DMAMUX_CSR_SOF1_Pos: u32 = 1;
pub const DMAMUX_CSR_SOF1_Msk: u32 = 2;
pub const DMAMUX_CSR_SOF1: u32 = 2;
pub const DMAMUX_CSR_SOF2_Pos: u32 = 2;
pub const DMAMUX_CSR_SOF2_Msk: u32 = 4;
pub const DMAMUX_CSR_SOF2: u32 = 4;
pub const DMAMUX_CSR_SOF3_Pos: u32 = 3;
pub const DMAMUX_CSR_SOF3_Msk: u32 = 8;
pub const DMAMUX_CSR_SOF3: u32 = 8;
pub const DMAMUX_CSR_SOF4_Pos: u32 = 4;
pub const DMAMUX_CSR_SOF4_Msk: u32 = 16;
pub const DMAMUX_CSR_SOF4: u32 = 16;
pub const DMAMUX_CSR_SOF5_Pos: u32 = 5;
pub const DMAMUX_CSR_SOF5_Msk: u32 = 32;
pub const DMAMUX_CSR_SOF5: u32 = 32;
pub const DMAMUX_CSR_SOF6_Pos: u32 = 6;
pub const DMAMUX_CSR_SOF6_Msk: u32 = 64;
pub const DMAMUX_CSR_SOF6: u32 = 64;
pub const DMAMUX_CSR_SOF7_Pos: u32 = 7;
pub const DMAMUX_CSR_SOF7_Msk: u32 = 128;
pub const DMAMUX_CSR_SOF7: u32 = 128;
pub const DMAMUX_CSR_SOF8_Pos: u32 = 8;
pub const DMAMUX_CSR_SOF8_Msk: u32 = 256;
pub const DMAMUX_CSR_SOF8: u32 = 256;
pub const DMAMUX_CSR_SOF9_Pos: u32 = 9;
pub const DMAMUX_CSR_SOF9_Msk: u32 = 512;
pub const DMAMUX_CSR_SOF9: u32 = 512;
pub const DMAMUX_CSR_SOF10_Pos: u32 = 10;
pub const DMAMUX_CSR_SOF10_Msk: u32 = 1024;
pub const DMAMUX_CSR_SOF10: u32 = 1024;
pub const DMAMUX_CSR_SOF11_Pos: u32 = 11;
pub const DMAMUX_CSR_SOF11_Msk: u32 = 2048;
pub const DMAMUX_CSR_SOF11: u32 = 2048;
pub const DMAMUX_CFR_CSOF0_Pos: u32 = 0;
pub const DMAMUX_CFR_CSOF0_Msk: u32 = 1;
pub const DMAMUX_CFR_CSOF0: u32 = 1;
pub const DMAMUX_CFR_CSOF1_Pos: u32 = 1;
pub const DMAMUX_CFR_CSOF1_Msk: u32 = 2;
pub const DMAMUX_CFR_CSOF1: u32 = 2;
pub const DMAMUX_CFR_CSOF2_Pos: u32 = 2;
pub const DMAMUX_CFR_CSOF2_Msk: u32 = 4;
pub const DMAMUX_CFR_CSOF2: u32 = 4;
pub const DMAMUX_CFR_CSOF3_Pos: u32 = 3;
pub const DMAMUX_CFR_CSOF3_Msk: u32 = 8;
pub const DMAMUX_CFR_CSOF3: u32 = 8;
pub const DMAMUX_CFR_CSOF4_Pos: u32 = 4;
pub const DMAMUX_CFR_CSOF4_Msk: u32 = 16;
pub const DMAMUX_CFR_CSOF4: u32 = 16;
pub const DMAMUX_CFR_CSOF5_Pos: u32 = 5;
pub const DMAMUX_CFR_CSOF5_Msk: u32 = 32;
pub const DMAMUX_CFR_CSOF5: u32 = 32;
pub const DMAMUX_CFR_CSOF6_Pos: u32 = 6;
pub const DMAMUX_CFR_CSOF6_Msk: u32 = 64;
pub const DMAMUX_CFR_CSOF6: u32 = 64;
pub const DMAMUX_CFR_CSOF7_Pos: u32 = 7;
pub const DMAMUX_CFR_CSOF7_Msk: u32 = 128;
pub const DMAMUX_CFR_CSOF7: u32 = 128;
pub const DMAMUX_CFR_CSOF8_Pos: u32 = 8;
pub const DMAMUX_CFR_CSOF8_Msk: u32 = 256;
pub const DMAMUX_CFR_CSOF8: u32 = 256;
pub const DMAMUX_CFR_CSOF9_Pos: u32 = 9;
pub const DMAMUX_CFR_CSOF9_Msk: u32 = 512;
pub const DMAMUX_CFR_CSOF9: u32 = 512;
pub const DMAMUX_CFR_CSOF10_Pos: u32 = 10;
pub const DMAMUX_CFR_CSOF10_Msk: u32 = 1024;
pub const DMAMUX_CFR_CSOF10: u32 = 1024;
pub const DMAMUX_CFR_CSOF11_Pos: u32 = 11;
pub const DMAMUX_CFR_CSOF11_Msk: u32 = 2048;
pub const DMAMUX_CFR_CSOF11: u32 = 2048;
pub const DMAMUX_RGxCR_SIG_ID_Pos: u32 = 0;
pub const DMAMUX_RGxCR_SIG_ID_Msk: u32 = 31;
pub const DMAMUX_RGxCR_SIG_ID: u32 = 31;
pub const DMAMUX_RGxCR_SIG_ID_0: u32 = 1;
pub const DMAMUX_RGxCR_SIG_ID_1: u32 = 2;
pub const DMAMUX_RGxCR_SIG_ID_2: u32 = 4;
pub const DMAMUX_RGxCR_SIG_ID_3: u32 = 8;
pub const DMAMUX_RGxCR_SIG_ID_4: u32 = 16;
pub const DMAMUX_RGxCR_OIE_Pos: u32 = 8;
pub const DMAMUX_RGxCR_OIE_Msk: u32 = 256;
pub const DMAMUX_RGxCR_OIE: u32 = 256;
pub const DMAMUX_RGxCR_GE_Pos: u32 = 16;
pub const DMAMUX_RGxCR_GE_Msk: u32 = 65536;
pub const DMAMUX_RGxCR_GE: u32 = 65536;
pub const DMAMUX_RGxCR_GPOL_Pos: u32 = 17;
pub const DMAMUX_RGxCR_GPOL_Msk: u32 = 393216;
pub const DMAMUX_RGxCR_GPOL: u32 = 393216;
pub const DMAMUX_RGxCR_GPOL_0: u32 = 131072;
pub const DMAMUX_RGxCR_GPOL_1: u32 = 262144;
pub const DMAMUX_RGxCR_GNBREQ_Pos: u32 = 19;
pub const DMAMUX_RGxCR_GNBREQ_Msk: u32 = 16252928;
pub const DMAMUX_RGxCR_GNBREQ: u32 = 16252928;
pub const DMAMUX_RGxCR_GNBREQ_0: u32 = 524288;
pub const DMAMUX_RGxCR_GNBREQ_1: u32 = 1048576;
pub const DMAMUX_RGxCR_GNBREQ_2: u32 = 2097152;
pub const DMAMUX_RGxCR_GNBREQ_3: u32 = 4194304;
pub const DMAMUX_RGxCR_GNBREQ_4: u32 = 8388608;
pub const DMAMUX_RGSR_OF0_Pos: u32 = 0;
pub const DMAMUX_RGSR_OF0_Msk: u32 = 1;
pub const DMAMUX_RGSR_OF0: u32 = 1;
pub const DMAMUX_RGSR_OF1_Pos: u32 = 1;
pub const DMAMUX_RGSR_OF1_Msk: u32 = 2;
pub const DMAMUX_RGSR_OF1: u32 = 2;
pub const DMAMUX_RGSR_OF2_Pos: u32 = 2;
pub const DMAMUX_RGSR_OF2_Msk: u32 = 4;
pub const DMAMUX_RGSR_OF2: u32 = 4;
pub const DMAMUX_RGSR_OF3_Pos: u32 = 3;
pub const DMAMUX_RGSR_OF3_Msk: u32 = 8;
pub const DMAMUX_RGSR_OF3: u32 = 8;
pub const DMAMUX_RGCFR_COF0_Pos: u32 = 0;
pub const DMAMUX_RGCFR_COF0_Msk: u32 = 1;
pub const DMAMUX_RGCFR_COF0: u32 = 1;
pub const DMAMUX_RGCFR_COF1_Pos: u32 = 1;
pub const DMAMUX_RGCFR_COF1_Msk: u32 = 2;
pub const DMAMUX_RGCFR_COF1: u32 = 2;
pub const DMAMUX_RGCFR_COF2_Pos: u32 = 2;
pub const DMAMUX_RGCFR_COF2_Msk: u32 = 4;
pub const DMAMUX_RGCFR_COF2: u32 = 4;
pub const DMAMUX_RGCFR_COF3_Pos: u32 = 3;
pub const DMAMUX_RGCFR_COF3_Msk: u32 = 8;
pub const DMAMUX_RGCFR_COF3: u32 = 8;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ0_Pos: u32 = 0;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ0_Msk: u32 = 1;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ0: u32 = 1;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ1_Pos: u32 = 1;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ1_Msk: u32 = 2;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ1: u32 = 2;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ2_Pos: u32 = 2;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ2_Msk: u32 = 4;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ2: u32 = 4;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ3_Pos: u32 = 3;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ3_Msk: u32 = 8;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ3: u32 = 8;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ4_Pos: u32 = 4;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ4_Msk: u32 = 16;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ4: u32 = 16;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ5_Pos: u32 = 5;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ5_Msk: u32 = 32;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ5: u32 = 32;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ6_Pos: u32 = 6;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ6_Msk: u32 = 64;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ6: u32 = 64;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ7_Pos: u32 = 7;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ7_Msk: u32 = 128;
pub const DMAMUX_IPHW_CFGR2_NUM_DMA_EXT_REQ7: u32 = 128;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS0_Pos: u32 = 0;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS0_Msk: u32 = 1;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS0: u32 = 1;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS1_Pos: u32 = 1;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS1_Msk: u32 = 2;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS1: u32 = 2;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS2_Pos: u32 = 2;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS2_Msk: u32 = 4;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS2: u32 = 4;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS3_Pos: u32 = 3;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS3_Msk: u32 = 8;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS3: u32 = 8;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS4_Pos: u32 = 4;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS4_Msk: u32 = 16;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS4: u32 = 16;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS5_Pos: u32 = 5;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS5_Msk: u32 = 32;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS5: u32 = 32;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS6_Pos: u32 = 6;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS6_Msk: u32 = 64;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS6: u32 = 64;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS7_Pos: u32 = 7;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS7_Msk: u32 = 128;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_STREAMS7: u32 = 128;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ0_Pos: u32 = 8;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ0_Msk: u32 = 256;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ0: u32 = 256;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ1_Pos: u32 = 9;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ1_Msk: u32 = 512;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ1: u32 = 512;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ2_Pos: u32 = 10;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ2_Msk: u32 = 1024;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ2: u32 = 1024;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ3_Pos: u32 = 11;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ3_Msk: u32 = 2048;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ3: u32 = 2048;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ4_Pos: u32 = 12;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ4_Msk: u32 = 4096;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ4: u32 = 4096;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ5_Pos: u32 = 13;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ5_Msk: u32 = 8192;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ5: u32 = 8192;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ6_Pos: u32 = 14;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ6_Msk: u32 = 16384;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ6: u32 = 16384;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ7_Pos: u32 = 15;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ7_Msk: u32 = 32768;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_PERIPH_REQ7: u32 = 32768;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG0_Pos: u32 = 16;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG0_Msk: u32 = 65536;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG0: u32 = 65536;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG1_Pos: u32 = 17;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG1_Msk: u32 = 131072;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG1: u32 = 131072;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG2_Pos: u32 = 18;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG2_Msk: u32 = 262144;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG2: u32 = 262144;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG3_Pos: u32 = 19;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG3_Msk: u32 = 524288;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG3: u32 = 524288;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG4_Pos: u32 = 20;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG4_Msk: u32 = 1048576;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG4: u32 = 1048576;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG5_Pos: u32 = 21;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG5_Msk: u32 = 2097152;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG5: u32 = 2097152;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG6_Pos: u32 = 22;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG6_Msk: u32 = 4194304;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG6: u32 = 4194304;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG7_Pos: u32 = 23;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG7_Msk: u32 = 8388608;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_TRIG7: u32 = 8388608;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN0_Pos: u32 = 24;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN0_Msk: u32 = 16777216;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN0: u32 = 16777216;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN1_Pos: u32 = 25;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN1_Msk: u32 = 33554432;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN1: u32 = 33554432;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN2_Pos: u32 = 26;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN2_Msk: u32 = 67108864;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN2: u32 = 67108864;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN3_Pos: u32 = 27;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN3_Msk: u32 = 134217728;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN3: u32 = 134217728;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN4_Pos: u32 = 28;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN4_Msk: u32 = 268435456;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN4: u32 = 268435456;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN5_Pos: u32 = 29;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN5_Msk: u32 = 536870912;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN5: u32 = 536870912;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN6_Pos: u32 = 30;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN6_Msk: u32 = 1073741824;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN6: u32 = 1073741824;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN7_Pos: u32 = 31;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN7_Msk: u32 = 2147483648;
pub const DMAMUX_IPHW_CFGR1_NUM_DMA_REQGEN7: u32 = 2147483648;
pub const EXTI_IMR1_IM0_Pos: u32 = 0;
pub const EXTI_IMR1_IM0_Msk: u32 = 1;
pub const EXTI_IMR1_IM0: u32 = 1;
pub const EXTI_IMR1_IM1_Pos: u32 = 1;
pub const EXTI_IMR1_IM1_Msk: u32 = 2;
pub const EXTI_IMR1_IM1: u32 = 2;
pub const EXTI_IMR1_IM2_Pos: u32 = 2;
pub const EXTI_IMR1_IM2_Msk: u32 = 4;
pub const EXTI_IMR1_IM2: u32 = 4;
pub const EXTI_IMR1_IM3_Pos: u32 = 3;
pub const EXTI_IMR1_IM3_Msk: u32 = 8;
pub const EXTI_IMR1_IM3: u32 = 8;
pub const EXTI_IMR1_IM4_Pos: u32 = 4;
pub const EXTI_IMR1_IM4_Msk: u32 = 16;
pub const EXTI_IMR1_IM4: u32 = 16;
pub const EXTI_IMR1_IM5_Pos: u32 = 5;
pub const EXTI_IMR1_IM5_Msk: u32 = 32;
pub const EXTI_IMR1_IM5: u32 = 32;
pub const EXTI_IMR1_IM6_Pos: u32 = 6;
pub const EXTI_IMR1_IM6_Msk: u32 = 64;
pub const EXTI_IMR1_IM6: u32 = 64;
pub const EXTI_IMR1_IM7_Pos: u32 = 7;
pub const EXTI_IMR1_IM7_Msk: u32 = 128;
pub const EXTI_IMR1_IM7: u32 = 128;
pub const EXTI_IMR1_IM8_Pos: u32 = 8;
pub const EXTI_IMR1_IM8_Msk: u32 = 256;
pub const EXTI_IMR1_IM8: u32 = 256;
pub const EXTI_IMR1_IM9_Pos: u32 = 9;
pub const EXTI_IMR1_IM9_Msk: u32 = 512;
pub const EXTI_IMR1_IM9: u32 = 512;
pub const EXTI_IMR1_IM10_Pos: u32 = 10;
pub const EXTI_IMR1_IM10_Msk: u32 = 1024;
pub const EXTI_IMR1_IM10: u32 = 1024;
pub const EXTI_IMR1_IM11_Pos: u32 = 11;
pub const EXTI_IMR1_IM11_Msk: u32 = 2048;
pub const EXTI_IMR1_IM11: u32 = 2048;
pub const EXTI_IMR1_IM12_Pos: u32 = 12;
pub const EXTI_IMR1_IM12_Msk: u32 = 4096;
pub const EXTI_IMR1_IM12: u32 = 4096;
pub const EXTI_IMR1_IM13_Pos: u32 = 13;
pub const EXTI_IMR1_IM13_Msk: u32 = 8192;
pub const EXTI_IMR1_IM13: u32 = 8192;
pub const EXTI_IMR1_IM14_Pos: u32 = 14;
pub const EXTI_IMR1_IM14_Msk: u32 = 16384;
pub const EXTI_IMR1_IM14: u32 = 16384;
pub const EXTI_IMR1_IM15_Pos: u32 = 15;
pub const EXTI_IMR1_IM15_Msk: u32 = 32768;
pub const EXTI_IMR1_IM15: u32 = 32768;
pub const EXTI_IMR1_IM16_Pos: u32 = 16;
pub const EXTI_IMR1_IM16_Msk: u32 = 65536;
pub const EXTI_IMR1_IM16: u32 = 65536;
pub const EXTI_IMR1_IM17_Pos: u32 = 17;
pub const EXTI_IMR1_IM17_Msk: u32 = 131072;
pub const EXTI_IMR1_IM17: u32 = 131072;
pub const EXTI_IMR1_IM18_Pos: u32 = 18;
pub const EXTI_IMR1_IM18_Msk: u32 = 262144;
pub const EXTI_IMR1_IM18: u32 = 262144;
pub const EXTI_IMR1_IM19_Pos: u32 = 19;
pub const EXTI_IMR1_IM19_Msk: u32 = 524288;
pub const EXTI_IMR1_IM19: u32 = 524288;
pub const EXTI_IMR1_IM20_Pos: u32 = 20;
pub const EXTI_IMR1_IM20_Msk: u32 = 1048576;
pub const EXTI_IMR1_IM20: u32 = 1048576;
pub const EXTI_IMR1_IM21_Pos: u32 = 21;
pub const EXTI_IMR1_IM21_Msk: u32 = 2097152;
pub const EXTI_IMR1_IM21: u32 = 2097152;
pub const EXTI_IMR1_IM22_Pos: u32 = 22;
pub const EXTI_IMR1_IM22_Msk: u32 = 4194304;
pub const EXTI_IMR1_IM22: u32 = 4194304;
pub const EXTI_IMR1_IM23_Pos: u32 = 23;
pub const EXTI_IMR1_IM23_Msk: u32 = 8388608;
pub const EXTI_IMR1_IM23: u32 = 8388608;
pub const EXTI_IMR1_IM24_Pos: u32 = 24;
pub const EXTI_IMR1_IM24_Msk: u32 = 16777216;
pub const EXTI_IMR1_IM24: u32 = 16777216;
pub const EXTI_IMR1_IM25_Pos: u32 = 25;
pub const EXTI_IMR1_IM25_Msk: u32 = 33554432;
pub const EXTI_IMR1_IM25: u32 = 33554432;
pub const EXTI_IMR1_IM26_Pos: u32 = 26;
pub const EXTI_IMR1_IM26_Msk: u32 = 67108864;
pub const EXTI_IMR1_IM26: u32 = 67108864;
pub const EXTI_IMR1_IM27_Pos: u32 = 27;
pub const EXTI_IMR1_IM27_Msk: u32 = 134217728;
pub const EXTI_IMR1_IM27: u32 = 134217728;
pub const EXTI_IMR1_IM28_Pos: u32 = 28;
pub const EXTI_IMR1_IM28_Msk: u32 = 268435456;
pub const EXTI_IMR1_IM28: u32 = 268435456;
pub const EXTI_IMR1_IM29_Pos: u32 = 29;
pub const EXTI_IMR1_IM29_Msk: u32 = 536870912;
pub const EXTI_IMR1_IM29: u32 = 536870912;
pub const EXTI_IMR1_IM30_Pos: u32 = 30;
pub const EXTI_IMR1_IM30_Msk: u32 = 1073741824;
pub const EXTI_IMR1_IM30: u32 = 1073741824;
pub const EXTI_IMR1_IM_Pos: u32 = 0;
pub const EXTI_IMR1_IM_Msk: u32 = 2147483647;
pub const EXTI_IMR1_IM: u32 = 2147483647;
pub const EXTI_EMR1_EM0_Pos: u32 = 0;
pub const EXTI_EMR1_EM0_Msk: u32 = 1;
pub const EXTI_EMR1_EM0: u32 = 1;
pub const EXTI_EMR1_EM1_Pos: u32 = 1;
pub const EXTI_EMR1_EM1_Msk: u32 = 2;
pub const EXTI_EMR1_EM1: u32 = 2;
pub const EXTI_EMR1_EM2_Pos: u32 = 2;
pub const EXTI_EMR1_EM2_Msk: u32 = 4;
pub const EXTI_EMR1_EM2: u32 = 4;
pub const EXTI_EMR1_EM3_Pos: u32 = 3;
pub const EXTI_EMR1_EM3_Msk: u32 = 8;
pub const EXTI_EMR1_EM3: u32 = 8;
pub const EXTI_EMR1_EM4_Pos: u32 = 4;
pub const EXTI_EMR1_EM4_Msk: u32 = 16;
pub const EXTI_EMR1_EM4: u32 = 16;
pub const EXTI_EMR1_EM5_Pos: u32 = 5;
pub const EXTI_EMR1_EM5_Msk: u32 = 32;
pub const EXTI_EMR1_EM5: u32 = 32;
pub const EXTI_EMR1_EM6_Pos: u32 = 6;
pub const EXTI_EMR1_EM6_Msk: u32 = 64;
pub const EXTI_EMR1_EM6: u32 = 64;
pub const EXTI_EMR1_EM7_Pos: u32 = 7;
pub const EXTI_EMR1_EM7_Msk: u32 = 128;
pub const EXTI_EMR1_EM7: u32 = 128;
pub const EXTI_EMR1_EM8_Pos: u32 = 8;
pub const EXTI_EMR1_EM8_Msk: u32 = 256;
pub const EXTI_EMR1_EM8: u32 = 256;
pub const EXTI_EMR1_EM9_Pos: u32 = 9;
pub const EXTI_EMR1_EM9_Msk: u32 = 512;
pub const EXTI_EMR1_EM9: u32 = 512;
pub const EXTI_EMR1_EM10_Pos: u32 = 10;
pub const EXTI_EMR1_EM10_Msk: u32 = 1024;
pub const EXTI_EMR1_EM10: u32 = 1024;
pub const EXTI_EMR1_EM11_Pos: u32 = 11;
pub const EXTI_EMR1_EM11_Msk: u32 = 2048;
pub const EXTI_EMR1_EM11: u32 = 2048;
pub const EXTI_EMR1_EM12_Pos: u32 = 12;
pub const EXTI_EMR1_EM12_Msk: u32 = 4096;
pub const EXTI_EMR1_EM12: u32 = 4096;
pub const EXTI_EMR1_EM13_Pos: u32 = 13;
pub const EXTI_EMR1_EM13_Msk: u32 = 8192;
pub const EXTI_EMR1_EM13: u32 = 8192;
pub const EXTI_EMR1_EM14_Pos: u32 = 14;
pub const EXTI_EMR1_EM14_Msk: u32 = 16384;
pub const EXTI_EMR1_EM14: u32 = 16384;
pub const EXTI_EMR1_EM15_Pos: u32 = 15;
pub const EXTI_EMR1_EM15_Msk: u32 = 32768;
pub const EXTI_EMR1_EM15: u32 = 32768;
pub const EXTI_EMR1_EM16_Pos: u32 = 16;
pub const EXTI_EMR1_EM16_Msk: u32 = 65536;
pub const EXTI_EMR1_EM16: u32 = 65536;
pub const EXTI_EMR1_EM17_Pos: u32 = 17;
pub const EXTI_EMR1_EM17_Msk: u32 = 131072;
pub const EXTI_EMR1_EM17: u32 = 131072;
pub const EXTI_EMR1_EM18_Pos: u32 = 18;
pub const EXTI_EMR1_EM18_Msk: u32 = 262144;
pub const EXTI_EMR1_EM18: u32 = 262144;
pub const EXTI_EMR1_EM19_Pos: u32 = 19;
pub const EXTI_EMR1_EM19_Msk: u32 = 524288;
pub const EXTI_EMR1_EM19: u32 = 524288;
pub const EXTI_EMR1_EM20_Pos: u32 = 20;
pub const EXTI_EMR1_EM20_Msk: u32 = 1048576;
pub const EXTI_EMR1_EM20: u32 = 1048576;
pub const EXTI_EMR1_EM21_Pos: u32 = 21;
pub const EXTI_EMR1_EM21_Msk: u32 = 2097152;
pub const EXTI_EMR1_EM21: u32 = 2097152;
pub const EXTI_EMR1_EM22_Pos: u32 = 22;
pub const EXTI_EMR1_EM22_Msk: u32 = 4194304;
pub const EXTI_EMR1_EM22: u32 = 4194304;
pub const EXTI_EMR1_EM23_Pos: u32 = 23;
pub const EXTI_EMR1_EM23_Msk: u32 = 8388608;
pub const EXTI_EMR1_EM23: u32 = 8388608;
pub const EXTI_EMR1_EM24_Pos: u32 = 24;
pub const EXTI_EMR1_EM24_Msk: u32 = 16777216;
pub const EXTI_EMR1_EM24: u32 = 16777216;
pub const EXTI_EMR1_EM25_Pos: u32 = 25;
pub const EXTI_EMR1_EM25_Msk: u32 = 33554432;
pub const EXTI_EMR1_EM25: u32 = 33554432;
pub const EXTI_EMR1_EM26_Pos: u32 = 26;
pub const EXTI_EMR1_EM26_Msk: u32 = 67108864;
pub const EXTI_EMR1_EM26: u32 = 67108864;
pub const EXTI_EMR1_EM27_Pos: u32 = 27;
pub const EXTI_EMR1_EM27_Msk: u32 = 134217728;
pub const EXTI_EMR1_EM27: u32 = 134217728;
pub const EXTI_EMR1_EM28_Pos: u32 = 28;
pub const EXTI_EMR1_EM28_Msk: u32 = 268435456;
pub const EXTI_EMR1_EM28: u32 = 268435456;
pub const EXTI_EMR1_EM29_Pos: u32 = 29;
pub const EXTI_EMR1_EM29_Msk: u32 = 536870912;
pub const EXTI_EMR1_EM29: u32 = 536870912;
pub const EXTI_EMR1_EM30_Pos: u32 = 30;
pub const EXTI_EMR1_EM30_Msk: u32 = 1073741824;
pub const EXTI_EMR1_EM30: u32 = 1073741824;
pub const EXTI_RTSR1_RT0_Pos: u32 = 0;
pub const EXTI_RTSR1_RT0_Msk: u32 = 1;
pub const EXTI_RTSR1_RT0: u32 = 1;
pub const EXTI_RTSR1_RT1_Pos: u32 = 1;
pub const EXTI_RTSR1_RT1_Msk: u32 = 2;
pub const EXTI_RTSR1_RT1: u32 = 2;
pub const EXTI_RTSR1_RT2_Pos: u32 = 2;
pub const EXTI_RTSR1_RT2_Msk: u32 = 4;
pub const EXTI_RTSR1_RT2: u32 = 4;
pub const EXTI_RTSR1_RT3_Pos: u32 = 3;
pub const EXTI_RTSR1_RT3_Msk: u32 = 8;
pub const EXTI_RTSR1_RT3: u32 = 8;
pub const EXTI_RTSR1_RT4_Pos: u32 = 4;
pub const EXTI_RTSR1_RT4_Msk: u32 = 16;
pub const EXTI_RTSR1_RT4: u32 = 16;
pub const EXTI_RTSR1_RT5_Pos: u32 = 5;
pub const EXTI_RTSR1_RT5_Msk: u32 = 32;
pub const EXTI_RTSR1_RT5: u32 = 32;
pub const EXTI_RTSR1_RT6_Pos: u32 = 6;
pub const EXTI_RTSR1_RT6_Msk: u32 = 64;
pub const EXTI_RTSR1_RT6: u32 = 64;
pub const EXTI_RTSR1_RT7_Pos: u32 = 7;
pub const EXTI_RTSR1_RT7_Msk: u32 = 128;
pub const EXTI_RTSR1_RT7: u32 = 128;
pub const EXTI_RTSR1_RT8_Pos: u32 = 8;
pub const EXTI_RTSR1_RT8_Msk: u32 = 256;
pub const EXTI_RTSR1_RT8: u32 = 256;
pub const EXTI_RTSR1_RT9_Pos: u32 = 9;
pub const EXTI_RTSR1_RT9_Msk: u32 = 512;
pub const EXTI_RTSR1_RT9: u32 = 512;
pub const EXTI_RTSR1_RT10_Pos: u32 = 10;
pub const EXTI_RTSR1_RT10_Msk: u32 = 1024;
pub const EXTI_RTSR1_RT10: u32 = 1024;
pub const EXTI_RTSR1_RT11_Pos: u32 = 11;
pub const EXTI_RTSR1_RT11_Msk: u32 = 2048;
pub const EXTI_RTSR1_RT11: u32 = 2048;
pub const EXTI_RTSR1_RT12_Pos: u32 = 12;
pub const EXTI_RTSR1_RT12_Msk: u32 = 4096;
pub const EXTI_RTSR1_RT12: u32 = 4096;
pub const EXTI_RTSR1_RT13_Pos: u32 = 13;
pub const EXTI_RTSR1_RT13_Msk: u32 = 8192;
pub const EXTI_RTSR1_RT13: u32 = 8192;
pub const EXTI_RTSR1_RT14_Pos: u32 = 14;
pub const EXTI_RTSR1_RT14_Msk: u32 = 16384;
pub const EXTI_RTSR1_RT14: u32 = 16384;
pub const EXTI_RTSR1_RT15_Pos: u32 = 15;
pub const EXTI_RTSR1_RT15_Msk: u32 = 32768;
pub const EXTI_RTSR1_RT15: u32 = 32768;
pub const EXTI_RTSR1_RT16_Pos: u32 = 16;
pub const EXTI_RTSR1_RT16_Msk: u32 = 65536;
pub const EXTI_RTSR1_RT16: u32 = 65536;
pub const EXTI_RTSR1_RT17_Pos: u32 = 17;
pub const EXTI_RTSR1_RT17_Msk: u32 = 131072;
pub const EXTI_RTSR1_RT17: u32 = 131072;
pub const EXTI_RTSR1_RT19_Pos: u32 = 19;
pub const EXTI_RTSR1_RT19_Msk: u32 = 524288;
pub const EXTI_RTSR1_RT19: u32 = 524288;
pub const EXTI_RTSR1_RT20_Pos: u32 = 20;
pub const EXTI_RTSR1_RT20_Msk: u32 = 1048576;
pub const EXTI_RTSR1_RT20: u32 = 1048576;
pub const EXTI_RTSR1_RT21_Pos: u32 = 21;
pub const EXTI_RTSR1_RT21_Msk: u32 = 2097152;
pub const EXTI_RTSR1_RT21: u32 = 2097152;
pub const EXTI_RTSR1_RT22_Pos: u32 = 22;
pub const EXTI_RTSR1_RT22_Msk: u32 = 4194304;
pub const EXTI_RTSR1_RT22: u32 = 4194304;
pub const EXTI_RTSR1_RT29_Pos: u32 = 29;
pub const EXTI_RTSR1_RT29_Msk: u32 = 536870912;
pub const EXTI_RTSR1_RT29: u32 = 536870912;
pub const EXTI_RTSR1_RT30_Pos: u32 = 30;
pub const EXTI_RTSR1_RT30_Msk: u32 = 1073741824;
pub const EXTI_RTSR1_RT30: u32 = 1073741824;
pub const EXTI_FTSR1_FT0_Pos: u32 = 0;
pub const EXTI_FTSR1_FT0_Msk: u32 = 1;
pub const EXTI_FTSR1_FT0: u32 = 1;
pub const EXTI_FTSR1_FT1_Pos: u32 = 1;
pub const EXTI_FTSR1_FT1_Msk: u32 = 2;
pub const EXTI_FTSR1_FT1: u32 = 2;
pub const EXTI_FTSR1_FT2_Pos: u32 = 2;
pub const EXTI_FTSR1_FT2_Msk: u32 = 4;
pub const EXTI_FTSR1_FT2: u32 = 4;
pub const EXTI_FTSR1_FT3_Pos: u32 = 3;
pub const EXTI_FTSR1_FT3_Msk: u32 = 8;
pub const EXTI_FTSR1_FT3: u32 = 8;
pub const EXTI_FTSR1_FT4_Pos: u32 = 4;
pub const EXTI_FTSR1_FT4_Msk: u32 = 16;
pub const EXTI_FTSR1_FT4: u32 = 16;
pub const EXTI_FTSR1_FT5_Pos: u32 = 5;
pub const EXTI_FTSR1_FT5_Msk: u32 = 32;
pub const EXTI_FTSR1_FT5: u32 = 32;
pub const EXTI_FTSR1_FT6_Pos: u32 = 6;
pub const EXTI_FTSR1_FT6_Msk: u32 = 64;
pub const EXTI_FTSR1_FT6: u32 = 64;
pub const EXTI_FTSR1_FT7_Pos: u32 = 7;
pub const EXTI_FTSR1_FT7_Msk: u32 = 128;
pub const EXTI_FTSR1_FT7: u32 = 128;
pub const EXTI_FTSR1_FT8_Pos: u32 = 8;
pub const EXTI_FTSR1_FT8_Msk: u32 = 256;
pub const EXTI_FTSR1_FT8: u32 = 256;
pub const EXTI_FTSR1_FT9_Pos: u32 = 9;
pub const EXTI_FTSR1_FT9_Msk: u32 = 512;
pub const EXTI_FTSR1_FT9: u32 = 512;
pub const EXTI_FTSR1_FT10_Pos: u32 = 10;
pub const EXTI_FTSR1_FT10_Msk: u32 = 1024;
pub const EXTI_FTSR1_FT10: u32 = 1024;
pub const EXTI_FTSR1_FT11_Pos: u32 = 11;
pub const EXTI_FTSR1_FT11_Msk: u32 = 2048;
pub const EXTI_FTSR1_FT11: u32 = 2048;
pub const EXTI_FTSR1_FT12_Pos: u32 = 12;
pub const EXTI_FTSR1_FT12_Msk: u32 = 4096;
pub const EXTI_FTSR1_FT12: u32 = 4096;
pub const EXTI_FTSR1_FT13_Pos: u32 = 13;
pub const EXTI_FTSR1_FT13_Msk: u32 = 8192;
pub const EXTI_FTSR1_FT13: u32 = 8192;
pub const EXTI_FTSR1_FT14_Pos: u32 = 14;
pub const EXTI_FTSR1_FT14_Msk: u32 = 16384;
pub const EXTI_FTSR1_FT14: u32 = 16384;
pub const EXTI_FTSR1_FT15_Pos: u32 = 15;
pub const EXTI_FTSR1_FT15_Msk: u32 = 32768;
pub const EXTI_FTSR1_FT15: u32 = 32768;
pub const EXTI_FTSR1_FT16_Pos: u32 = 16;
pub const EXTI_FTSR1_FT16_Msk: u32 = 65536;
pub const EXTI_FTSR1_FT16: u32 = 65536;
pub const EXTI_FTSR1_FT17_Pos: u32 = 17;
pub const EXTI_FTSR1_FT17_Msk: u32 = 131072;
pub const EXTI_FTSR1_FT17: u32 = 131072;
pub const EXTI_FTSR1_FT19_Pos: u32 = 19;
pub const EXTI_FTSR1_FT19_Msk: u32 = 524288;
pub const EXTI_FTSR1_FT19: u32 = 524288;
pub const EXTI_FTSR1_FT20_Pos: u32 = 20;
pub const EXTI_FTSR1_FT20_Msk: u32 = 1048576;
pub const EXTI_FTSR1_FT20: u32 = 1048576;
pub const EXTI_FTSR1_FT21_Pos: u32 = 21;
pub const EXTI_FTSR1_FT21_Msk: u32 = 2097152;
pub const EXTI_FTSR1_FT21: u32 = 2097152;
pub const EXTI_FTSR1_FT22_Pos: u32 = 22;
pub const EXTI_FTSR1_FT22_Msk: u32 = 4194304;
pub const EXTI_FTSR1_FT22: u32 = 4194304;
pub const EXTI_FTSR1_FT29_Pos: u32 = 29;
pub const EXTI_FTSR1_FT29_Msk: u32 = 536870912;
pub const EXTI_FTSR1_FT29: u32 = 536870912;
pub const EXTI_FTSR1_FT30_Pos: u32 = 30;
pub const EXTI_FTSR1_FT30_Msk: u32 = 1073741824;
pub const EXTI_FTSR1_FT30: u32 = 1073741824;
pub const EXTI_SWIER1_SWI0_Pos: u32 = 0;
pub const EXTI_SWIER1_SWI0_Msk: u32 = 1;
pub const EXTI_SWIER1_SWI0: u32 = 1;
pub const EXTI_SWIER1_SWI1_Pos: u32 = 1;
pub const EXTI_SWIER1_SWI1_Msk: u32 = 2;
pub const EXTI_SWIER1_SWI1: u32 = 2;
pub const EXTI_SWIER1_SWI2_Pos: u32 = 2;
pub const EXTI_SWIER1_SWI2_Msk: u32 = 4;
pub const EXTI_SWIER1_SWI2: u32 = 4;
pub const EXTI_SWIER1_SWI3_Pos: u32 = 3;
pub const EXTI_SWIER1_SWI3_Msk: u32 = 8;
pub const EXTI_SWIER1_SWI3: u32 = 8;
pub const EXTI_SWIER1_SWI4_Pos: u32 = 4;
pub const EXTI_SWIER1_SWI4_Msk: u32 = 16;
pub const EXTI_SWIER1_SWI4: u32 = 16;
pub const EXTI_SWIER1_SWI5_Pos: u32 = 5;
pub const EXTI_SWIER1_SWI5_Msk: u32 = 32;
pub const EXTI_SWIER1_SWI5: u32 = 32;
pub const EXTI_SWIER1_SWI6_Pos: u32 = 6;
pub const EXTI_SWIER1_SWI6_Msk: u32 = 64;
pub const EXTI_SWIER1_SWI6: u32 = 64;
pub const EXTI_SWIER1_SWI7_Pos: u32 = 7;
pub const EXTI_SWIER1_SWI7_Msk: u32 = 128;
pub const EXTI_SWIER1_SWI7: u32 = 128;
pub const EXTI_SWIER1_SWI8_Pos: u32 = 8;
pub const EXTI_SWIER1_SWI8_Msk: u32 = 256;
pub const EXTI_SWIER1_SWI8: u32 = 256;
pub const EXTI_SWIER1_SWI9_Pos: u32 = 9;
pub const EXTI_SWIER1_SWI9_Msk: u32 = 512;
pub const EXTI_SWIER1_SWI9: u32 = 512;
pub const EXTI_SWIER1_SWI10_Pos: u32 = 10;
pub const EXTI_SWIER1_SWI10_Msk: u32 = 1024;
pub const EXTI_SWIER1_SWI10: u32 = 1024;
pub const EXTI_SWIER1_SWI11_Pos: u32 = 11;
pub const EXTI_SWIER1_SWI11_Msk: u32 = 2048;
pub const EXTI_SWIER1_SWI11: u32 = 2048;
pub const EXTI_SWIER1_SWI12_Pos: u32 = 12;
pub const EXTI_SWIER1_SWI12_Msk: u32 = 4096;
pub const EXTI_SWIER1_SWI12: u32 = 4096;
pub const EXTI_SWIER1_SWI13_Pos: u32 = 13;
pub const EXTI_SWIER1_SWI13_Msk: u32 = 8192;
pub const EXTI_SWIER1_SWI13: u32 = 8192;
pub const EXTI_SWIER1_SWI14_Pos: u32 = 14;
pub const EXTI_SWIER1_SWI14_Msk: u32 = 16384;
pub const EXTI_SWIER1_SWI14: u32 = 16384;
pub const EXTI_SWIER1_SWI15_Pos: u32 = 15;
pub const EXTI_SWIER1_SWI15_Msk: u32 = 32768;
pub const EXTI_SWIER1_SWI15: u32 = 32768;
pub const EXTI_SWIER1_SWI16_Pos: u32 = 16;
pub const EXTI_SWIER1_SWI16_Msk: u32 = 65536;
pub const EXTI_SWIER1_SWI16: u32 = 65536;
pub const EXTI_SWIER1_SWI17_Pos: u32 = 17;
pub const EXTI_SWIER1_SWI17_Msk: u32 = 131072;
pub const EXTI_SWIER1_SWI17: u32 = 131072;
pub const EXTI_SWIER1_SWI19_Pos: u32 = 19;
pub const EXTI_SWIER1_SWI19_Msk: u32 = 524288;
pub const EXTI_SWIER1_SWI19: u32 = 524288;
pub const EXTI_SWIER1_SWI20_Pos: u32 = 20;
pub const EXTI_SWIER1_SWI20_Msk: u32 = 1048576;
pub const EXTI_SWIER1_SWI20: u32 = 1048576;
pub const EXTI_SWIER1_SWI21_Pos: u32 = 21;
pub const EXTI_SWIER1_SWI21_Msk: u32 = 2097152;
pub const EXTI_SWIER1_SWI21: u32 = 2097152;
pub const EXTI_SWIER1_SWI22_Pos: u32 = 22;
pub const EXTI_SWIER1_SWI22_Msk: u32 = 4194304;
pub const EXTI_SWIER1_SWI22: u32 = 4194304;
pub const EXTI_SWIER1_SWI29_Pos: u32 = 29;
pub const EXTI_SWIER1_SWI29_Msk: u32 = 536870912;
pub const EXTI_SWIER1_SWI29: u32 = 536870912;
pub const EXTI_SWIER1_SWI30_Pos: u32 = 30;
pub const EXTI_SWIER1_SWI30_Msk: u32 = 1073741824;
pub const EXTI_SWIER1_SWI30: u32 = 1073741824;
pub const EXTI_PR1_PIF0_Pos: u32 = 0;
pub const EXTI_PR1_PIF0_Msk: u32 = 1;
pub const EXTI_PR1_PIF0: u32 = 1;
pub const EXTI_PR1_PIF1_Pos: u32 = 1;
pub const EXTI_PR1_PIF1_Msk: u32 = 2;
pub const EXTI_PR1_PIF1: u32 = 2;
pub const EXTI_PR1_PIF2_Pos: u32 = 2;
pub const EXTI_PR1_PIF2_Msk: u32 = 4;
pub const EXTI_PR1_PIF2: u32 = 4;
pub const EXTI_PR1_PIF3_Pos: u32 = 3;
pub const EXTI_PR1_PIF3_Msk: u32 = 8;
pub const EXTI_PR1_PIF3: u32 = 8;
pub const EXTI_PR1_PIF4_Pos: u32 = 4;
pub const EXTI_PR1_PIF4_Msk: u32 = 16;
pub const EXTI_PR1_PIF4: u32 = 16;
pub const EXTI_PR1_PIF5_Pos: u32 = 5;
pub const EXTI_PR1_PIF5_Msk: u32 = 32;
pub const EXTI_PR1_PIF5: u32 = 32;
pub const EXTI_PR1_PIF6_Pos: u32 = 6;
pub const EXTI_PR1_PIF6_Msk: u32 = 64;
pub const EXTI_PR1_PIF6: u32 = 64;
pub const EXTI_PR1_PIF7_Pos: u32 = 7;
pub const EXTI_PR1_PIF7_Msk: u32 = 128;
pub const EXTI_PR1_PIF7: u32 = 128;
pub const EXTI_PR1_PIF8_Pos: u32 = 8;
pub const EXTI_PR1_PIF8_Msk: u32 = 256;
pub const EXTI_PR1_PIF8: u32 = 256;
pub const EXTI_PR1_PIF9_Pos: u32 = 9;
pub const EXTI_PR1_PIF9_Msk: u32 = 512;
pub const EXTI_PR1_PIF9: u32 = 512;
pub const EXTI_PR1_PIF10_Pos: u32 = 10;
pub const EXTI_PR1_PIF10_Msk: u32 = 1024;
pub const EXTI_PR1_PIF10: u32 = 1024;
pub const EXTI_PR1_PIF11_Pos: u32 = 11;
pub const EXTI_PR1_PIF11_Msk: u32 = 2048;
pub const EXTI_PR1_PIF11: u32 = 2048;
pub const EXTI_PR1_PIF12_Pos: u32 = 12;
pub const EXTI_PR1_PIF12_Msk: u32 = 4096;
pub const EXTI_PR1_PIF12: u32 = 4096;
pub const EXTI_PR1_PIF13_Pos: u32 = 13;
pub const EXTI_PR1_PIF13_Msk: u32 = 8192;
pub const EXTI_PR1_PIF13: u32 = 8192;
pub const EXTI_PR1_PIF14_Pos: u32 = 14;
pub const EXTI_PR1_PIF14_Msk: u32 = 16384;
pub const EXTI_PR1_PIF14: u32 = 16384;
pub const EXTI_PR1_PIF15_Pos: u32 = 15;
pub const EXTI_PR1_PIF15_Msk: u32 = 32768;
pub const EXTI_PR1_PIF15: u32 = 32768;
pub const EXTI_PR1_PIF16_Pos: u32 = 16;
pub const EXTI_PR1_PIF16_Msk: u32 = 65536;
pub const EXTI_PR1_PIF16: u32 = 65536;
pub const EXTI_PR1_PIF17_Pos: u32 = 17;
pub const EXTI_PR1_PIF17_Msk: u32 = 131072;
pub const EXTI_PR1_PIF17: u32 = 131072;
pub const EXTI_PR1_PIF19_Pos: u32 = 19;
pub const EXTI_PR1_PIF19_Msk: u32 = 524288;
pub const EXTI_PR1_PIF19: u32 = 524288;
pub const EXTI_PR1_PIF20_Pos: u32 = 20;
pub const EXTI_PR1_PIF20_Msk: u32 = 1048576;
pub const EXTI_PR1_PIF20: u32 = 1048576;
pub const EXTI_PR1_PIF21_Pos: u32 = 21;
pub const EXTI_PR1_PIF21_Msk: u32 = 2097152;
pub const EXTI_PR1_PIF21: u32 = 2097152;
pub const EXTI_PR1_PIF22_Pos: u32 = 22;
pub const EXTI_PR1_PIF22_Msk: u32 = 4194304;
pub const EXTI_PR1_PIF22: u32 = 4194304;
pub const EXTI_PR1_PIF29_Pos: u32 = 29;
pub const EXTI_PR1_PIF29_Msk: u32 = 536870912;
pub const EXTI_PR1_PIF29: u32 = 536870912;
pub const EXTI_PR1_PIF30_Pos: u32 = 30;
pub const EXTI_PR1_PIF30_Msk: u32 = 1073741824;
pub const EXTI_PR1_PIF30: u32 = 1073741824;
pub const EXTI_IMR2_IM34_Pos: u32 = 2;
pub const EXTI_IMR2_IM34_Msk: u32 = 4;
pub const EXTI_IMR2_IM34: u32 = 4;
pub const EXTI_IMR2_IM36_Pos: u32 = 4;
pub const EXTI_IMR2_IM36_Msk: u32 = 16;
pub const EXTI_IMR2_IM36: u32 = 16;
pub const EXTI_IMR2_IM37_Pos: u32 = 5;
pub const EXTI_IMR2_IM37_Msk: u32 = 32;
pub const EXTI_IMR2_IM37: u32 = 32;
pub const EXTI_IMR2_IM38_Pos: u32 = 6;
pub const EXTI_IMR2_IM38_Msk: u32 = 64;
pub const EXTI_IMR2_IM38: u32 = 64;
pub const EXTI_IMR2_IM39_Pos: u32 = 7;
pub const EXTI_IMR2_IM39_Msk: u32 = 128;
pub const EXTI_IMR2_IM39: u32 = 128;
pub const EXTI_IMR2_IM40_Pos: u32 = 8;
pub const EXTI_IMR2_IM40_Msk: u32 = 256;
pub const EXTI_IMR2_IM40: u32 = 256;
pub const EXTI_IMR2_IM41_Pos: u32 = 9;
pub const EXTI_IMR2_IM41_Msk: u32 = 512;
pub const EXTI_IMR2_IM41: u32 = 512;
pub const EXTI_IMR2_IM_Pos: u32 = 0;
pub const EXTI_IMR2_IM_Msk: u32 = 1012;
pub const EXTI_IMR2_IM: u32 = 1012;
pub const EXTI_EMR2_EM34_Pos: u32 = 2;
pub const EXTI_EMR2_EM34_Msk: u32 = 4;
pub const EXTI_EMR2_EM34: u32 = 4;
pub const EXTI_EMR2_EM36_Pos: u32 = 4;
pub const EXTI_EMR2_EM36_Msk: u32 = 16;
pub const EXTI_EMR2_EM36: u32 = 16;
pub const EXTI_EMR2_EM37_Pos: u32 = 5;
pub const EXTI_EMR2_EM37_Msk: u32 = 32;
pub const EXTI_EMR2_EM37: u32 = 32;
pub const EXTI_EMR2_EM38_Pos: u32 = 6;
pub const EXTI_EMR2_EM38_Msk: u32 = 64;
pub const EXTI_EMR2_EM38: u32 = 64;
pub const EXTI_EMR2_EM39_Pos: u32 = 7;
pub const EXTI_EMR2_EM39_Msk: u32 = 128;
pub const EXTI_EMR2_EM39: u32 = 128;
pub const EXTI_EMR2_EM40_Pos: u32 = 8;
pub const EXTI_EMR2_EM40_Msk: u32 = 256;
pub const EXTI_EMR2_EM40: u32 = 256;
pub const EXTI_EMR2_EM41_Pos: u32 = 9;
pub const EXTI_EMR2_EM41_Msk: u32 = 512;
pub const EXTI_EMR2_EM41: u32 = 512;
pub const EXTI_EMR2_EM_Pos: u32 = 0;
pub const EXTI_EMR2_EM_Msk: u32 = 1012;
pub const EXTI_EMR2_EM: u32 = 1012;
pub const EXTI_RTSR2_RT38_Pos: u32 = 6;
pub const EXTI_RTSR2_RT38_Msk: u32 = 64;
pub const EXTI_RTSR2_RT38: u32 = 64;
pub const EXTI_RTSR2_RT39_Pos: u32 = 7;
pub const EXTI_RTSR2_RT39_Msk: u32 = 128;
pub const EXTI_RTSR2_RT39: u32 = 128;
pub const EXTI_RTSR2_RT40_Pos: u32 = 8;
pub const EXTI_RTSR2_RT40_Msk: u32 = 256;
pub const EXTI_RTSR2_RT40: u32 = 256;
pub const EXTI_RTSR2_RT41_Pos: u32 = 9;
pub const EXTI_RTSR2_RT41_Msk: u32 = 512;
pub const EXTI_RTSR2_RT41: u32 = 512;
pub const EXTI_FTSR2_FT38_Pos: u32 = 6;
pub const EXTI_FTSR2_FT38_Msk: u32 = 64;
pub const EXTI_FTSR2_FT38: u32 = 64;
pub const EXTI_FTSR2_FT39_Pos: u32 = 7;
pub const EXTI_FTSR2_FT39_Msk: u32 = 128;
pub const EXTI_FTSR2_FT39: u32 = 128;
pub const EXTI_FTSR2_FT40_Pos: u32 = 8;
pub const EXTI_FTSR2_FT40_Msk: u32 = 256;
pub const EXTI_FTSR2_FT40: u32 = 256;
pub const EXTI_FTSR2_FT41_Pos: u32 = 9;
pub const EXTI_FTSR2_FT41_Msk: u32 = 512;
pub const EXTI_FTSR2_FT41: u32 = 512;
pub const EXTI_SWIER2_SWI38_Pos: u32 = 6;
pub const EXTI_SWIER2_SWI38_Msk: u32 = 64;
pub const EXTI_SWIER2_SWI38: u32 = 64;
pub const EXTI_SWIER2_SWI39_Pos: u32 = 7;
pub const EXTI_SWIER2_SWI39_Msk: u32 = 128;
pub const EXTI_SWIER2_SWI39: u32 = 128;
pub const EXTI_SWIER2_SWI40_Pos: u32 = 8;
pub const EXTI_SWIER2_SWI40_Msk: u32 = 256;
pub const EXTI_SWIER2_SWI40: u32 = 256;
pub const EXTI_SWIER2_SWI41_Pos: u32 = 9;
pub const EXTI_SWIER2_SWI41_Msk: u32 = 512;
pub const EXTI_SWIER2_SWI41: u32 = 512;
pub const EXTI_PR2_PIF38_Pos: u32 = 6;
pub const EXTI_PR2_PIF38_Msk: u32 = 64;
pub const EXTI_PR2_PIF38: u32 = 64;
pub const EXTI_PR2_PIF39_Pos: u32 = 7;
pub const EXTI_PR2_PIF39_Msk: u32 = 128;
pub const EXTI_PR2_PIF39: u32 = 128;
pub const EXTI_PR2_PIF40_Pos: u32 = 8;
pub const EXTI_PR2_PIF40_Msk: u32 = 256;
pub const EXTI_PR2_PIF40: u32 = 256;
pub const EXTI_PR2_PIF41_Pos: u32 = 9;
pub const EXTI_PR2_PIF41_Msk: u32 = 512;
pub const EXTI_PR2_PIF41: u32 = 512;
pub const FDCAN_CREL_DAY_Pos: u32 = 0;
pub const FDCAN_CREL_DAY_Msk: u32 = 255;
pub const FDCAN_CREL_DAY: u32 = 255;
pub const FDCAN_CREL_MON_Pos: u32 = 8;
pub const FDCAN_CREL_MON_Msk: u32 = 65280;
pub const FDCAN_CREL_MON: u32 = 65280;
pub const FDCAN_CREL_YEAR_Pos: u32 = 16;
pub const FDCAN_CREL_YEAR_Msk: u32 = 983040;
pub const FDCAN_CREL_YEAR: u32 = 983040;
pub const FDCAN_CREL_SUBSTEP_Pos: u32 = 20;
pub const FDCAN_CREL_SUBSTEP_Msk: u32 = 15728640;
pub const FDCAN_CREL_SUBSTEP: u32 = 15728640;
pub const FDCAN_CREL_STEP_Pos: u32 = 24;
pub const FDCAN_CREL_STEP_Msk: u32 = 251658240;
pub const FDCAN_CREL_STEP: u32 = 251658240;
pub const FDCAN_CREL_REL_Pos: u32 = 28;
pub const FDCAN_CREL_REL_Msk: u32 = 4026531840;
pub const FDCAN_CREL_REL: u32 = 4026531840;
pub const FDCAN_ENDN_ETV_Pos: u32 = 0;
pub const FDCAN_ENDN_ETV_Msk: u32 = 4294967295;
pub const FDCAN_ENDN_ETV: u32 = 4294967295;
pub const FDCAN_DBTP_DSJW_Pos: u32 = 0;
pub const FDCAN_DBTP_DSJW_Msk: u32 = 15;
pub const FDCAN_DBTP_DSJW: u32 = 15;
pub const FDCAN_DBTP_DTSEG2_Pos: u32 = 4;
pub const FDCAN_DBTP_DTSEG2_Msk: u32 = 240;
pub const FDCAN_DBTP_DTSEG2: u32 = 240;
pub const FDCAN_DBTP_DTSEG1_Pos: u32 = 8;
pub const FDCAN_DBTP_DTSEG1_Msk: u32 = 7936;
pub const FDCAN_DBTP_DTSEG1: u32 = 7936;
pub const FDCAN_DBTP_DBRP_Pos: u32 = 16;
pub const FDCAN_DBTP_DBRP_Msk: u32 = 2031616;
pub const FDCAN_DBTP_DBRP: u32 = 2031616;
pub const FDCAN_DBTP_TDC_Pos: u32 = 23;
pub const FDCAN_DBTP_TDC_Msk: u32 = 8388608;
pub const FDCAN_DBTP_TDC: u32 = 8388608;
pub const FDCAN_TEST_LBCK_Pos: u32 = 4;
pub const FDCAN_TEST_LBCK_Msk: u32 = 16;
pub const FDCAN_TEST_LBCK: u32 = 16;
pub const FDCAN_TEST_TX_Pos: u32 = 5;
pub const FDCAN_TEST_TX_Msk: u32 = 96;
pub const FDCAN_TEST_TX: u32 = 96;
pub const FDCAN_TEST_RX_Pos: u32 = 7;
pub const FDCAN_TEST_RX_Msk: u32 = 128;
pub const FDCAN_TEST_RX: u32 = 128;
pub const FDCAN_RWD_WDC_Pos: u32 = 0;
pub const FDCAN_RWD_WDC_Msk: u32 = 255;
pub const FDCAN_RWD_WDC: u32 = 255;
pub const FDCAN_RWD_WDV_Pos: u32 = 8;
pub const FDCAN_RWD_WDV_Msk: u32 = 65280;
pub const FDCAN_RWD_WDV: u32 = 65280;
pub const FDCAN_CCCR_INIT_Pos: u32 = 0;
pub const FDCAN_CCCR_INIT_Msk: u32 = 1;
pub const FDCAN_CCCR_INIT: u32 = 1;
pub const FDCAN_CCCR_CCE_Pos: u32 = 1;
pub const FDCAN_CCCR_CCE_Msk: u32 = 2;
pub const FDCAN_CCCR_CCE: u32 = 2;
pub const FDCAN_CCCR_ASM_Pos: u32 = 2;
pub const FDCAN_CCCR_ASM_Msk: u32 = 4;
pub const FDCAN_CCCR_ASM: u32 = 4;
pub const FDCAN_CCCR_CSA_Pos: u32 = 3;
pub const FDCAN_CCCR_CSA_Msk: u32 = 8;
pub const FDCAN_CCCR_CSA: u32 = 8;
pub const FDCAN_CCCR_CSR_Pos: u32 = 4;
pub const FDCAN_CCCR_CSR_Msk: u32 = 16;
pub const FDCAN_CCCR_CSR: u32 = 16;
pub const FDCAN_CCCR_MON_Pos: u32 = 5;
pub const FDCAN_CCCR_MON_Msk: u32 = 32;
pub const FDCAN_CCCR_MON: u32 = 32;
pub const FDCAN_CCCR_DAR_Pos: u32 = 6;
pub const FDCAN_CCCR_DAR_Msk: u32 = 64;
pub const FDCAN_CCCR_DAR: u32 = 64;
pub const FDCAN_CCCR_TEST_Pos: u32 = 7;
pub const FDCAN_CCCR_TEST_Msk: u32 = 128;
pub const FDCAN_CCCR_TEST: u32 = 128;
pub const FDCAN_CCCR_FDOE_Pos: u32 = 8;
pub const FDCAN_CCCR_FDOE_Msk: u32 = 256;
pub const FDCAN_CCCR_FDOE: u32 = 256;
pub const FDCAN_CCCR_BRSE_Pos: u32 = 9;
pub const FDCAN_CCCR_BRSE_Msk: u32 = 512;
pub const FDCAN_CCCR_BRSE: u32 = 512;
pub const FDCAN_CCCR_PXHD_Pos: u32 = 12;
pub const FDCAN_CCCR_PXHD_Msk: u32 = 4096;
pub const FDCAN_CCCR_PXHD: u32 = 4096;
pub const FDCAN_CCCR_EFBI_Pos: u32 = 13;
pub const FDCAN_CCCR_EFBI_Msk: u32 = 8192;
pub const FDCAN_CCCR_EFBI: u32 = 8192;
pub const FDCAN_CCCR_TXP_Pos: u32 = 14;
pub const FDCAN_CCCR_TXP_Msk: u32 = 16384;
pub const FDCAN_CCCR_TXP: u32 = 16384;
pub const FDCAN_CCCR_NISO_Pos: u32 = 15;
pub const FDCAN_CCCR_NISO_Msk: u32 = 32768;
pub const FDCAN_CCCR_NISO: u32 = 32768;
pub const FDCAN_NBTP_NTSEG2_Pos: u32 = 0;
pub const FDCAN_NBTP_NTSEG2_Msk: u32 = 127;
pub const FDCAN_NBTP_NTSEG2: u32 = 127;
pub const FDCAN_NBTP_NTSEG1_Pos: u32 = 8;
pub const FDCAN_NBTP_NTSEG1_Msk: u32 = 65280;
pub const FDCAN_NBTP_NTSEG1: u32 = 65280;
pub const FDCAN_NBTP_NBRP_Pos: u32 = 16;
pub const FDCAN_NBTP_NBRP_Msk: u32 = 33488896;
pub const FDCAN_NBTP_NBRP: u32 = 33488896;
pub const FDCAN_NBTP_NSJW_Pos: u32 = 25;
pub const FDCAN_NBTP_NSJW_Msk: u32 = 4261412864;
pub const FDCAN_NBTP_NSJW: u32 = 4261412864;
pub const FDCAN_TSCC_TSS_Pos: u32 = 0;
pub const FDCAN_TSCC_TSS_Msk: u32 = 3;
pub const FDCAN_TSCC_TSS: u32 = 3;
pub const FDCAN_TSCC_TCP_Pos: u32 = 16;
pub const FDCAN_TSCC_TCP_Msk: u32 = 983040;
pub const FDCAN_TSCC_TCP: u32 = 983040;
pub const FDCAN_TSCV_TSC_Pos: u32 = 0;
pub const FDCAN_TSCV_TSC_Msk: u32 = 65535;
pub const FDCAN_TSCV_TSC: u32 = 65535;
pub const FDCAN_TOCC_ETOC_Pos: u32 = 0;
pub const FDCAN_TOCC_ETOC_Msk: u32 = 1;
pub const FDCAN_TOCC_ETOC: u32 = 1;
pub const FDCAN_TOCC_TOS_Pos: u32 = 1;
pub const FDCAN_TOCC_TOS_Msk: u32 = 6;
pub const FDCAN_TOCC_TOS: u32 = 6;
pub const FDCAN_TOCC_TOP_Pos: u32 = 16;
pub const FDCAN_TOCC_TOP_Msk: u32 = 4294901760;
pub const FDCAN_TOCC_TOP: u32 = 4294901760;
pub const FDCAN_TOCV_TOC_Pos: u32 = 0;
pub const FDCAN_TOCV_TOC_Msk: u32 = 65535;
pub const FDCAN_TOCV_TOC: u32 = 65535;
pub const FDCAN_ECR_TEC_Pos: u32 = 0;
pub const FDCAN_ECR_TEC_Msk: u32 = 255;
pub const FDCAN_ECR_TEC: u32 = 255;
pub const FDCAN_ECR_REC_Pos: u32 = 8;
pub const FDCAN_ECR_REC_Msk: u32 = 32512;
pub const FDCAN_ECR_REC: u32 = 32512;
pub const FDCAN_ECR_RP_Pos: u32 = 15;
pub const FDCAN_ECR_RP_Msk: u32 = 32768;
pub const FDCAN_ECR_RP: u32 = 32768;
pub const FDCAN_ECR_CEL_Pos: u32 = 16;
pub const FDCAN_ECR_CEL_Msk: u32 = 16711680;
pub const FDCAN_ECR_CEL: u32 = 16711680;
pub const FDCAN_PSR_LEC_Pos: u32 = 0;
pub const FDCAN_PSR_LEC_Msk: u32 = 7;
pub const FDCAN_PSR_LEC: u32 = 7;
pub const FDCAN_PSR_ACT_Pos: u32 = 3;
pub const FDCAN_PSR_ACT_Msk: u32 = 24;
pub const FDCAN_PSR_ACT: u32 = 24;
pub const FDCAN_PSR_EP_Pos: u32 = 5;
pub const FDCAN_PSR_EP_Msk: u32 = 32;
pub const FDCAN_PSR_EP: u32 = 32;
pub const FDCAN_PSR_EW_Pos: u32 = 6;
pub const FDCAN_PSR_EW_Msk: u32 = 64;
pub const FDCAN_PSR_EW: u32 = 64;
pub const FDCAN_PSR_BO_Pos: u32 = 7;
pub const FDCAN_PSR_BO_Msk: u32 = 128;
pub const FDCAN_PSR_BO: u32 = 128;
pub const FDCAN_PSR_DLEC_Pos: u32 = 8;
pub const FDCAN_PSR_DLEC_Msk: u32 = 1792;
pub const FDCAN_PSR_DLEC: u32 = 1792;
pub const FDCAN_PSR_RESI_Pos: u32 = 11;
pub const FDCAN_PSR_RESI_Msk: u32 = 2048;
pub const FDCAN_PSR_RESI: u32 = 2048;
pub const FDCAN_PSR_RBRS_Pos: u32 = 12;
pub const FDCAN_PSR_RBRS_Msk: u32 = 4096;
pub const FDCAN_PSR_RBRS: u32 = 4096;
pub const FDCAN_PSR_REDL_Pos: u32 = 13;
pub const FDCAN_PSR_REDL_Msk: u32 = 8192;
pub const FDCAN_PSR_REDL: u32 = 8192;
pub const FDCAN_PSR_PXE_Pos: u32 = 14;
pub const FDCAN_PSR_PXE_Msk: u32 = 16384;
pub const FDCAN_PSR_PXE: u32 = 16384;
pub const FDCAN_PSR_TDCV_Pos: u32 = 16;
pub const FDCAN_PSR_TDCV_Msk: u32 = 8323072;
pub const FDCAN_PSR_TDCV: u32 = 8323072;
pub const FDCAN_TDCR_TDCF_Pos: u32 = 0;
pub const FDCAN_TDCR_TDCF_Msk: u32 = 127;
pub const FDCAN_TDCR_TDCF: u32 = 127;
pub const FDCAN_TDCR_TDCO_Pos: u32 = 8;
pub const FDCAN_TDCR_TDCO_Msk: u32 = 32512;
pub const FDCAN_TDCR_TDCO: u32 = 32512;
pub const FDCAN_IR_RF0N_Pos: u32 = 0;
pub const FDCAN_IR_RF0N_Msk: u32 = 1;
pub const FDCAN_IR_RF0N: u32 = 1;
pub const FDCAN_IR_RF0F_Pos: u32 = 1;
pub const FDCAN_IR_RF0F_Msk: u32 = 2;
pub const FDCAN_IR_RF0F: u32 = 2;
pub const FDCAN_IR_RF0L_Pos: u32 = 2;
pub const FDCAN_IR_RF0L_Msk: u32 = 4;
pub const FDCAN_IR_RF0L: u32 = 4;
pub const FDCAN_IR_RF1N_Pos: u32 = 3;
pub const FDCAN_IR_RF1N_Msk: u32 = 8;
pub const FDCAN_IR_RF1N: u32 = 8;
pub const FDCAN_IR_RF1F_Pos: u32 = 4;
pub const FDCAN_IR_RF1F_Msk: u32 = 16;
pub const FDCAN_IR_RF1F: u32 = 16;
pub const FDCAN_IR_RF1L_Pos: u32 = 5;
pub const FDCAN_IR_RF1L_Msk: u32 = 32;
pub const FDCAN_IR_RF1L: u32 = 32;
pub const FDCAN_IR_HPM_Pos: u32 = 6;
pub const FDCAN_IR_HPM_Msk: u32 = 64;
pub const FDCAN_IR_HPM: u32 = 64;
pub const FDCAN_IR_TC_Pos: u32 = 7;
pub const FDCAN_IR_TC_Msk: u32 = 128;
pub const FDCAN_IR_TC: u32 = 128;
pub const FDCAN_IR_TCF_Pos: u32 = 8;
pub const FDCAN_IR_TCF_Msk: u32 = 256;
pub const FDCAN_IR_TCF: u32 = 256;
pub const FDCAN_IR_TFE_Pos: u32 = 9;
pub const FDCAN_IR_TFE_Msk: u32 = 512;
pub const FDCAN_IR_TFE: u32 = 512;
pub const FDCAN_IR_TEFN_Pos: u32 = 10;
pub const FDCAN_IR_TEFN_Msk: u32 = 1024;
pub const FDCAN_IR_TEFN: u32 = 1024;
pub const FDCAN_IR_TEFF_Pos: u32 = 11;
pub const FDCAN_IR_TEFF_Msk: u32 = 2048;
pub const FDCAN_IR_TEFF: u32 = 2048;
pub const FDCAN_IR_TEFL_Pos: u32 = 12;
pub const FDCAN_IR_TEFL_Msk: u32 = 4096;
pub const FDCAN_IR_TEFL: u32 = 4096;
pub const FDCAN_IR_TSW_Pos: u32 = 13;
pub const FDCAN_IR_TSW_Msk: u32 = 8192;
pub const FDCAN_IR_TSW: u32 = 8192;
pub const FDCAN_IR_MRAF_Pos: u32 = 14;
pub const FDCAN_IR_MRAF_Msk: u32 = 16384;
pub const FDCAN_IR_MRAF: u32 = 16384;
pub const FDCAN_IR_TOO_Pos: u32 = 15;
pub const FDCAN_IR_TOO_Msk: u32 = 32768;
pub const FDCAN_IR_TOO: u32 = 32768;
pub const FDCAN_IR_ELO_Pos: u32 = 16;
pub const FDCAN_IR_ELO_Msk: u32 = 65536;
pub const FDCAN_IR_ELO: u32 = 65536;
pub const FDCAN_IR_EP_Pos: u32 = 17;
pub const FDCAN_IR_EP_Msk: u32 = 131072;
pub const FDCAN_IR_EP: u32 = 131072;
pub const FDCAN_IR_EW_Pos: u32 = 18;
pub const FDCAN_IR_EW_Msk: u32 = 262144;
pub const FDCAN_IR_EW: u32 = 262144;
pub const FDCAN_IR_BO_Pos: u32 = 19;
pub const FDCAN_IR_BO_Msk: u32 = 524288;
pub const FDCAN_IR_BO: u32 = 524288;
pub const FDCAN_IR_WDI_Pos: u32 = 20;
pub const FDCAN_IR_WDI_Msk: u32 = 1048576;
pub const FDCAN_IR_WDI: u32 = 1048576;
pub const FDCAN_IR_PEA_Pos: u32 = 21;
pub const FDCAN_IR_PEA_Msk: u32 = 2097152;
pub const FDCAN_IR_PEA: u32 = 2097152;
pub const FDCAN_IR_PED_Pos: u32 = 22;
pub const FDCAN_IR_PED_Msk: u32 = 4194304;
pub const FDCAN_IR_PED: u32 = 4194304;
pub const FDCAN_IR_ARA_Pos: u32 = 23;
pub const FDCAN_IR_ARA_Msk: u32 = 8388608;
pub const FDCAN_IR_ARA: u32 = 8388608;
pub const FDCAN_IE_RF0NE_Pos: u32 = 0;
pub const FDCAN_IE_RF0NE_Msk: u32 = 1;
pub const FDCAN_IE_RF0NE: u32 = 1;
pub const FDCAN_IE_RF0FE_Pos: u32 = 1;
pub const FDCAN_IE_RF0FE_Msk: u32 = 2;
pub const FDCAN_IE_RF0FE: u32 = 2;
pub const FDCAN_IE_RF0LE_Pos: u32 = 2;
pub const FDCAN_IE_RF0LE_Msk: u32 = 4;
pub const FDCAN_IE_RF0LE: u32 = 4;
pub const FDCAN_IE_RF1NE_Pos: u32 = 3;
pub const FDCAN_IE_RF1NE_Msk: u32 = 8;
pub const FDCAN_IE_RF1NE: u32 = 8;
pub const FDCAN_IE_RF1FE_Pos: u32 = 4;
pub const FDCAN_IE_RF1FE_Msk: u32 = 16;
pub const FDCAN_IE_RF1FE: u32 = 16;
pub const FDCAN_IE_RF1LE_Pos: u32 = 5;
pub const FDCAN_IE_RF1LE_Msk: u32 = 32;
pub const FDCAN_IE_RF1LE: u32 = 32;
pub const FDCAN_IE_HPME_Pos: u32 = 6;
pub const FDCAN_IE_HPME_Msk: u32 = 64;
pub const FDCAN_IE_HPME: u32 = 64;
pub const FDCAN_IE_TCE_Pos: u32 = 7;
pub const FDCAN_IE_TCE_Msk: u32 = 128;
pub const FDCAN_IE_TCE: u32 = 128;
pub const FDCAN_IE_TCFE_Pos: u32 = 8;
pub const FDCAN_IE_TCFE_Msk: u32 = 256;
pub const FDCAN_IE_TCFE: u32 = 256;
pub const FDCAN_IE_TFEE_Pos: u32 = 9;
pub const FDCAN_IE_TFEE_Msk: u32 = 512;
pub const FDCAN_IE_TFEE: u32 = 512;
pub const FDCAN_IE_TEFNE_Pos: u32 = 10;
pub const FDCAN_IE_TEFNE_Msk: u32 = 1024;
pub const FDCAN_IE_TEFNE: u32 = 1024;
pub const FDCAN_IE_TEFFE_Pos: u32 = 11;
pub const FDCAN_IE_TEFFE_Msk: u32 = 2048;
pub const FDCAN_IE_TEFFE: u32 = 2048;
pub const FDCAN_IE_TEFLE_Pos: u32 = 12;
pub const FDCAN_IE_TEFLE_Msk: u32 = 4096;
pub const FDCAN_IE_TEFLE: u32 = 4096;
pub const FDCAN_IE_TSWE_Pos: u32 = 13;
pub const FDCAN_IE_TSWE_Msk: u32 = 8192;
pub const FDCAN_IE_TSWE: u32 = 8192;
pub const FDCAN_IE_MRAFE_Pos: u32 = 14;
pub const FDCAN_IE_MRAFE_Msk: u32 = 16384;
pub const FDCAN_IE_MRAFE: u32 = 16384;
pub const FDCAN_IE_TOOE_Pos: u32 = 15;
pub const FDCAN_IE_TOOE_Msk: u32 = 32768;
pub const FDCAN_IE_TOOE: u32 = 32768;
pub const FDCAN_IE_ELOE_Pos: u32 = 16;
pub const FDCAN_IE_ELOE_Msk: u32 = 65536;
pub const FDCAN_IE_ELOE: u32 = 65536;
pub const FDCAN_IE_EPE_Pos: u32 = 17;
pub const FDCAN_IE_EPE_Msk: u32 = 131072;
pub const FDCAN_IE_EPE: u32 = 131072;
pub const FDCAN_IE_EWE_Pos: u32 = 18;
pub const FDCAN_IE_EWE_Msk: u32 = 262144;
pub const FDCAN_IE_EWE: u32 = 262144;
pub const FDCAN_IE_BOE_Pos: u32 = 19;
pub const FDCAN_IE_BOE_Msk: u32 = 524288;
pub const FDCAN_IE_BOE: u32 = 524288;
pub const FDCAN_IE_WDIE_Pos: u32 = 20;
pub const FDCAN_IE_WDIE_Msk: u32 = 1048576;
pub const FDCAN_IE_WDIE: u32 = 1048576;
pub const FDCAN_IE_PEAE_Pos: u32 = 21;
pub const FDCAN_IE_PEAE_Msk: u32 = 2097152;
pub const FDCAN_IE_PEAE: u32 = 2097152;
pub const FDCAN_IE_PEDE_Pos: u32 = 22;
pub const FDCAN_IE_PEDE_Msk: u32 = 4194304;
pub const FDCAN_IE_PEDE: u32 = 4194304;
pub const FDCAN_IE_ARAE_Pos: u32 = 23;
pub const FDCAN_IE_ARAE_Msk: u32 = 8388608;
pub const FDCAN_IE_ARAE: u32 = 8388608;
pub const FDCAN_ILS_RXFIFO0_Pos: u32 = 0;
pub const FDCAN_ILS_RXFIFO0_Msk: u32 = 1;
pub const FDCAN_ILS_RXFIFO0: u32 = 1;
pub const FDCAN_ILS_RXFIFO1_Pos: u32 = 1;
pub const FDCAN_ILS_RXFIFO1_Msk: u32 = 2;
pub const FDCAN_ILS_RXFIFO1: u32 = 2;
pub const FDCAN_ILS_SMSG_Pos: u32 = 2;
pub const FDCAN_ILS_SMSG_Msk: u32 = 4;
pub const FDCAN_ILS_SMSG: u32 = 4;
pub const FDCAN_ILS_TFERR_Pos: u32 = 3;
pub const FDCAN_ILS_TFERR_Msk: u32 = 8;
pub const FDCAN_ILS_TFERR: u32 = 8;
pub const FDCAN_ILS_MISC_Pos: u32 = 4;
pub const FDCAN_ILS_MISC_Msk: u32 = 16;
pub const FDCAN_ILS_MISC: u32 = 16;
pub const FDCAN_ILS_BERR_Pos: u32 = 5;
pub const FDCAN_ILS_BERR_Msk: u32 = 32;
pub const FDCAN_ILS_BERR: u32 = 32;
pub const FDCAN_ILS_PERR_Pos: u32 = 6;
pub const FDCAN_ILS_PERR_Msk: u32 = 64;
pub const FDCAN_ILS_PERR: u32 = 64;
pub const FDCAN_ILE_EINT0_Pos: u32 = 0;
pub const FDCAN_ILE_EINT0_Msk: u32 = 1;
pub const FDCAN_ILE_EINT0: u32 = 1;
pub const FDCAN_ILE_EINT1_Pos: u32 = 1;
pub const FDCAN_ILE_EINT1_Msk: u32 = 2;
pub const FDCAN_ILE_EINT1: u32 = 2;
pub const FDCAN_RXGFC_RRFE_Pos: u32 = 0;
pub const FDCAN_RXGFC_RRFE_Msk: u32 = 1;
pub const FDCAN_RXGFC_RRFE: u32 = 1;
pub const FDCAN_RXGFC_RRFS_Pos: u32 = 1;
pub const FDCAN_RXGFC_RRFS_Msk: u32 = 2;
pub const FDCAN_RXGFC_RRFS: u32 = 2;
pub const FDCAN_RXGFC_ANFE_Pos: u32 = 2;
pub const FDCAN_RXGFC_ANFE_Msk: u32 = 12;
pub const FDCAN_RXGFC_ANFE: u32 = 12;
pub const FDCAN_RXGFC_ANFS_Pos: u32 = 4;
pub const FDCAN_RXGFC_ANFS_Msk: u32 = 48;
pub const FDCAN_RXGFC_ANFS: u32 = 48;
pub const FDCAN_RXGFC_F1OM_Pos: u32 = 8;
pub const FDCAN_RXGFC_F1OM_Msk: u32 = 256;
pub const FDCAN_RXGFC_F1OM: u32 = 256;
pub const FDCAN_RXGFC_F0OM_Pos: u32 = 9;
pub const FDCAN_RXGFC_F0OM_Msk: u32 = 512;
pub const FDCAN_RXGFC_F0OM: u32 = 512;
pub const FDCAN_RXGFC_LSS_Pos: u32 = 16;
pub const FDCAN_RXGFC_LSS_Msk: u32 = 2031616;
pub const FDCAN_RXGFC_LSS: u32 = 2031616;
pub const FDCAN_RXGFC_LSE_Pos: u32 = 24;
pub const FDCAN_RXGFC_LSE_Msk: u32 = 251658240;
pub const FDCAN_RXGFC_LSE: u32 = 251658240;
pub const FDCAN_XIDAM_EIDM_Pos: u32 = 0;
pub const FDCAN_XIDAM_EIDM_Msk: u32 = 536870911;
pub const FDCAN_XIDAM_EIDM: u32 = 536870911;
pub const FDCAN_HPMS_BIDX_Pos: u32 = 0;
pub const FDCAN_HPMS_BIDX_Msk: u32 = 7;
pub const FDCAN_HPMS_BIDX: u32 = 7;
pub const FDCAN_HPMS_MSI_Pos: u32 = 6;
pub const FDCAN_HPMS_MSI_Msk: u32 = 192;
pub const FDCAN_HPMS_MSI: u32 = 192;
pub const FDCAN_HPMS_FIDX_Pos: u32 = 8;
pub const FDCAN_HPMS_FIDX_Msk: u32 = 7936;
pub const FDCAN_HPMS_FIDX: u32 = 7936;
pub const FDCAN_HPMS_FLST_Pos: u32 = 15;
pub const FDCAN_HPMS_FLST_Msk: u32 = 32768;
pub const FDCAN_HPMS_FLST: u32 = 32768;
pub const FDCAN_RXF0S_F0FL_Pos: u32 = 0;
pub const FDCAN_RXF0S_F0FL_Msk: u32 = 15;
pub const FDCAN_RXF0S_F0FL: u32 = 15;
pub const FDCAN_RXF0S_F0GI_Pos: u32 = 8;
pub const FDCAN_RXF0S_F0GI_Msk: u32 = 768;
pub const FDCAN_RXF0S_F0GI: u32 = 768;
pub const FDCAN_RXF0S_F0PI_Pos: u32 = 16;
pub const FDCAN_RXF0S_F0PI_Msk: u32 = 196608;
pub const FDCAN_RXF0S_F0PI: u32 = 196608;
pub const FDCAN_RXF0S_F0F_Pos: u32 = 24;
pub const FDCAN_RXF0S_F0F_Msk: u32 = 16777216;
pub const FDCAN_RXF0S_F0F: u32 = 16777216;
pub const FDCAN_RXF0S_RF0L_Pos: u32 = 25;
pub const FDCAN_RXF0S_RF0L_Msk: u32 = 33554432;
pub const FDCAN_RXF0S_RF0L: u32 = 33554432;
pub const FDCAN_RXF0A_F0AI_Pos: u32 = 0;
pub const FDCAN_RXF0A_F0AI_Msk: u32 = 7;
pub const FDCAN_RXF0A_F0AI: u32 = 7;
pub const FDCAN_RXF1S_F1FL_Pos: u32 = 0;
pub const FDCAN_RXF1S_F1FL_Msk: u32 = 15;
pub const FDCAN_RXF1S_F1FL: u32 = 15;
pub const FDCAN_RXF1S_F1GI_Pos: u32 = 8;
pub const FDCAN_RXF1S_F1GI_Msk: u32 = 768;
pub const FDCAN_RXF1S_F1GI: u32 = 768;
pub const FDCAN_RXF1S_F1PI_Pos: u32 = 16;
pub const FDCAN_RXF1S_F1PI_Msk: u32 = 196608;
pub const FDCAN_RXF1S_F1PI: u32 = 196608;
pub const FDCAN_RXF1S_F1F_Pos: u32 = 24;
pub const FDCAN_RXF1S_F1F_Msk: u32 = 16777216;
pub const FDCAN_RXF1S_F1F: u32 = 16777216;
pub const FDCAN_RXF1S_RF1L_Pos: u32 = 25;
pub const FDCAN_RXF1S_RF1L_Msk: u32 = 33554432;
pub const FDCAN_RXF1S_RF1L: u32 = 33554432;
pub const FDCAN_RXF1A_F1AI_Pos: u32 = 0;
pub const FDCAN_RXF1A_F1AI_Msk: u32 = 7;
pub const FDCAN_RXF1A_F1AI: u32 = 7;
pub const FDCAN_TXBC_TFQM_Pos: u32 = 24;
pub const FDCAN_TXBC_TFQM_Msk: u32 = 16777216;
pub const FDCAN_TXBC_TFQM: u32 = 16777216;
pub const FDCAN_TXFQS_TFFL_Pos: u32 = 0;
pub const FDCAN_TXFQS_TFFL_Msk: u32 = 7;
pub const FDCAN_TXFQS_TFFL: u32 = 7;
pub const FDCAN_TXFQS_TFGI_Pos: u32 = 8;
pub const FDCAN_TXFQS_TFGI_Msk: u32 = 768;
pub const FDCAN_TXFQS_TFGI: u32 = 768;
pub const FDCAN_TXFQS_TFQPI_Pos: u32 = 16;
pub const FDCAN_TXFQS_TFQPI_Msk: u32 = 196608;
pub const FDCAN_TXFQS_TFQPI: u32 = 196608;
pub const FDCAN_TXFQS_TFQF_Pos: u32 = 21;
pub const FDCAN_TXFQS_TFQF_Msk: u32 = 2097152;
pub const FDCAN_TXFQS_TFQF: u32 = 2097152;
pub const FDCAN_TXBRP_TRP_Pos: u32 = 0;
pub const FDCAN_TXBRP_TRP_Msk: u32 = 7;
pub const FDCAN_TXBRP_TRP: u32 = 7;
pub const FDCAN_TXBAR_AR_Pos: u32 = 0;
pub const FDCAN_TXBAR_AR_Msk: u32 = 7;
pub const FDCAN_TXBAR_AR: u32 = 7;
pub const FDCAN_TXBCR_CR_Pos: u32 = 0;
pub const FDCAN_TXBCR_CR_Msk: u32 = 7;
pub const FDCAN_TXBCR_CR: u32 = 7;
pub const FDCAN_TXBTO_TO_Pos: u32 = 0;
pub const FDCAN_TXBTO_TO_Msk: u32 = 7;
pub const FDCAN_TXBTO_TO: u32 = 7;
pub const FDCAN_TXBCF_CF_Pos: u32 = 0;
pub const FDCAN_TXBCF_CF_Msk: u32 = 7;
pub const FDCAN_TXBCF_CF: u32 = 7;
pub const FDCAN_TXBTIE_TIE_Pos: u32 = 0;
pub const FDCAN_TXBTIE_TIE_Msk: u32 = 7;
pub const FDCAN_TXBTIE_TIE: u32 = 7;
pub const FDCAN_TXBCIE_CFIE_Pos: u32 = 0;
pub const FDCAN_TXBCIE_CFIE_Msk: u32 = 7;
pub const FDCAN_TXBCIE_CFIE: u32 = 7;
pub const FDCAN_TXEFS_EFFL_Pos: u32 = 0;
pub const FDCAN_TXEFS_EFFL_Msk: u32 = 7;
pub const FDCAN_TXEFS_EFFL: u32 = 7;
pub const FDCAN_TXEFS_EFGI_Pos: u32 = 8;
pub const FDCAN_TXEFS_EFGI_Msk: u32 = 768;
pub const FDCAN_TXEFS_EFGI: u32 = 768;
pub const FDCAN_TXEFS_EFPI_Pos: u32 = 16;
pub const FDCAN_TXEFS_EFPI_Msk: u32 = 196608;
pub const FDCAN_TXEFS_EFPI: u32 = 196608;
pub const FDCAN_TXEFS_EFF_Pos: u32 = 24;
pub const FDCAN_TXEFS_EFF_Msk: u32 = 16777216;
pub const FDCAN_TXEFS_EFF: u32 = 16777216;
pub const FDCAN_TXEFS_TEFL_Pos: u32 = 25;
pub const FDCAN_TXEFS_TEFL_Msk: u32 = 33554432;
pub const FDCAN_TXEFS_TEFL: u32 = 33554432;
pub const FDCAN_TXEFA_EFAI_Pos: u32 = 0;
pub const FDCAN_TXEFA_EFAI_Msk: u32 = 3;
pub const FDCAN_TXEFA_EFAI: u32 = 3;
pub const FDCAN_CKDIV_PDIV_Pos: u32 = 0;
pub const FDCAN_CKDIV_PDIV_Msk: u32 = 15;
pub const FDCAN_CKDIV_PDIV: u32 = 15;
pub const FLASH_ACR_LATENCY_Pos: u32 = 0;
pub const FLASH_ACR_LATENCY_Msk: u32 = 15;
pub const FLASH_ACR_LATENCY: u32 = 15;
pub const FLASH_ACR_LATENCY_0WS: u32 = 0;
pub const FLASH_ACR_LATENCY_1WS: u32 = 1;
pub const FLASH_ACR_LATENCY_2WS: u32 = 2;
pub const FLASH_ACR_LATENCY_3WS: u32 = 3;
pub const FLASH_ACR_LATENCY_4WS: u32 = 4;
pub const FLASH_ACR_LATENCY_5WS: u32 = 5;
pub const FLASH_ACR_LATENCY_6WS: u32 = 6;
pub const FLASH_ACR_LATENCY_7WS: u32 = 7;
pub const FLASH_ACR_LATENCY_8WS: u32 = 8;
pub const FLASH_ACR_LATENCY_9WS: u32 = 9;
pub const FLASH_ACR_LATENCY_10WS: u32 = 10;
pub const FLASH_ACR_LATENCY_11WS: u32 = 11;
pub const FLASH_ACR_LATENCY_12WS: u32 = 12;
pub const FLASH_ACR_LATENCY_13WS: u32 = 13;
pub const FLASH_ACR_LATENCY_14WS: u32 = 14;
pub const FLASH_ACR_LATENCY_15WS: u32 = 15;
pub const FLASH_ACR_PRFTEN_Pos: u32 = 8;
pub const FLASH_ACR_PRFTEN_Msk: u32 = 256;
pub const FLASH_ACR_PRFTEN: u32 = 256;
pub const FLASH_ACR_ICEN_Pos: u32 = 9;
pub const FLASH_ACR_ICEN_Msk: u32 = 512;
pub const FLASH_ACR_ICEN: u32 = 512;
pub const FLASH_ACR_DCEN_Pos: u32 = 10;
pub const FLASH_ACR_DCEN_Msk: u32 = 1024;
pub const FLASH_ACR_DCEN: u32 = 1024;
pub const FLASH_ACR_ICRST_Pos: u32 = 11;
pub const FLASH_ACR_ICRST_Msk: u32 = 2048;
pub const FLASH_ACR_ICRST: u32 = 2048;
pub const FLASH_ACR_DCRST_Pos: u32 = 12;
pub const FLASH_ACR_DCRST_Msk: u32 = 4096;
pub const FLASH_ACR_DCRST: u32 = 4096;
pub const FLASH_ACR_RUN_PD_Pos: u32 = 13;
pub const FLASH_ACR_RUN_PD_Msk: u32 = 8192;
pub const FLASH_ACR_RUN_PD: u32 = 8192;
pub const FLASH_ACR_SLEEP_PD_Pos: u32 = 14;
pub const FLASH_ACR_SLEEP_PD_Msk: u32 = 16384;
pub const FLASH_ACR_SLEEP_PD: u32 = 16384;
pub const FLASH_ACR_DBG_SWEN_Pos: u32 = 18;
pub const FLASH_ACR_DBG_SWEN_Msk: u32 = 262144;
pub const FLASH_ACR_DBG_SWEN: u32 = 262144;
pub const FLASH_SR_EOP_Pos: u32 = 0;
pub const FLASH_SR_EOP_Msk: u32 = 1;
pub const FLASH_SR_EOP: u32 = 1;
pub const FLASH_SR_OPERR_Pos: u32 = 1;
pub const FLASH_SR_OPERR_Msk: u32 = 2;
pub const FLASH_SR_OPERR: u32 = 2;
pub const FLASH_SR_PROGERR_Pos: u32 = 3;
pub const FLASH_SR_PROGERR_Msk: u32 = 8;
pub const FLASH_SR_PROGERR: u32 = 8;
pub const FLASH_SR_WRPERR_Pos: u32 = 4;
pub const FLASH_SR_WRPERR_Msk: u32 = 16;
pub const FLASH_SR_WRPERR: u32 = 16;
pub const FLASH_SR_PGAERR_Pos: u32 = 5;
pub const FLASH_SR_PGAERR_Msk: u32 = 32;
pub const FLASH_SR_PGAERR: u32 = 32;
pub const FLASH_SR_SIZERR_Pos: u32 = 6;
pub const FLASH_SR_SIZERR_Msk: u32 = 64;
pub const FLASH_SR_SIZERR: u32 = 64;
pub const FLASH_SR_PGSERR_Pos: u32 = 7;
pub const FLASH_SR_PGSERR_Msk: u32 = 128;
pub const FLASH_SR_PGSERR: u32 = 128;
pub const FLASH_SR_MISERR_Pos: u32 = 8;
pub const FLASH_SR_MISERR_Msk: u32 = 256;
pub const FLASH_SR_MISERR: u32 = 256;
pub const FLASH_SR_FASTERR_Pos: u32 = 9;
pub const FLASH_SR_FASTERR_Msk: u32 = 512;
pub const FLASH_SR_FASTERR: u32 = 512;
pub const FLASH_SR_RDERR_Pos: u32 = 14;
pub const FLASH_SR_RDERR_Msk: u32 = 16384;
pub const FLASH_SR_RDERR: u32 = 16384;
pub const FLASH_SR_OPTVERR_Pos: u32 = 15;
pub const FLASH_SR_OPTVERR_Msk: u32 = 32768;
pub const FLASH_SR_OPTVERR: u32 = 32768;
pub const FLASH_SR_BSY_Pos: u32 = 16;
pub const FLASH_SR_BSY_Msk: u32 = 65536;
pub const FLASH_SR_BSY: u32 = 65536;
pub const FLASH_CR_PG_Pos: u32 = 0;
pub const FLASH_CR_PG_Msk: u32 = 1;
pub const FLASH_CR_PG: u32 = 1;
pub const FLASH_CR_PER_Pos: u32 = 1;
pub const FLASH_CR_PER_Msk: u32 = 2;
pub const FLASH_CR_PER: u32 = 2;
pub const FLASH_CR_MER1_Pos: u32 = 2;
pub const FLASH_CR_MER1_Msk: u32 = 4;
pub const FLASH_CR_MER1: u32 = 4;
pub const FLASH_CR_PNB_Pos: u32 = 3;
pub const FLASH_CR_PNB_Msk: u32 = 504;
pub const FLASH_CR_PNB: u32 = 504;
pub const FLASH_CR_STRT_Pos: u32 = 16;
pub const FLASH_CR_STRT_Msk: u32 = 65536;
pub const FLASH_CR_STRT: u32 = 65536;
pub const FLASH_CR_OPTSTRT_Pos: u32 = 17;
pub const FLASH_CR_OPTSTRT_Msk: u32 = 131072;
pub const FLASH_CR_OPTSTRT: u32 = 131072;
pub const FLASH_CR_FSTPG_Pos: u32 = 18;
pub const FLASH_CR_FSTPG_Msk: u32 = 262144;
pub const FLASH_CR_FSTPG: u32 = 262144;
pub const FLASH_CR_EOPIE_Pos: u32 = 24;
pub const FLASH_CR_EOPIE_Msk: u32 = 16777216;
pub const FLASH_CR_EOPIE: u32 = 16777216;
pub const FLASH_CR_ERRIE_Pos: u32 = 25;
pub const FLASH_CR_ERRIE_Msk: u32 = 33554432;
pub const FLASH_CR_ERRIE: u32 = 33554432;
pub const FLASH_CR_RDERRIE_Pos: u32 = 26;
pub const FLASH_CR_RDERRIE_Msk: u32 = 67108864;
pub const FLASH_CR_RDERRIE: u32 = 67108864;
pub const FLASH_CR_OBL_LAUNCH_Pos: u32 = 27;
pub const FLASH_CR_OBL_LAUNCH_Msk: u32 = 134217728;
pub const FLASH_CR_OBL_LAUNCH: u32 = 134217728;
pub const FLASH_CR_SEC_PROT1_Pos: u32 = 28;
pub const FLASH_CR_SEC_PROT1_Msk: u32 = 268435456;
pub const FLASH_CR_SEC_PROT1: u32 = 268435456;
pub const FLASH_CR_OPTLOCK_Pos: u32 = 30;
pub const FLASH_CR_OPTLOCK_Msk: u32 = 1073741824;
pub const FLASH_CR_OPTLOCK: u32 = 1073741824;
pub const FLASH_CR_LOCK_Pos: u32 = 31;
pub const FLASH_CR_LOCK_Msk: u32 = 2147483648;
pub const FLASH_CR_LOCK: u32 = 2147483648;
pub const FLASH_ECCR_ADDR_ECC_Pos: u32 = 0;
pub const FLASH_ECCR_ADDR_ECC_Msk: u32 = 262143;
pub const FLASH_ECCR_ADDR_ECC: u32 = 262143;
pub const FLASH_ECCR_SYSF_ECC_Pos: u32 = 22;
pub const FLASH_ECCR_SYSF_ECC_Msk: u32 = 4194304;
pub const FLASH_ECCR_SYSF_ECC: u32 = 4194304;
pub const FLASH_ECCR_ECCIE_Pos: u32 = 24;
pub const FLASH_ECCR_ECCIE_Msk: u32 = 16777216;
pub const FLASH_ECCR_ECCIE: u32 = 16777216;
pub const FLASH_ECCR_ECCC_Pos: u32 = 30;
pub const FLASH_ECCR_ECCC_Msk: u32 = 1073741824;
pub const FLASH_ECCR_ECCC: u32 = 1073741824;
pub const FLASH_ECCR_ECCD_Pos: u32 = 31;
pub const FLASH_ECCR_ECCD_Msk: u32 = 2147483648;
pub const FLASH_ECCR_ECCD: u32 = 2147483648;
pub const FLASH_OPTR_RDP_Pos: u32 = 0;
pub const FLASH_OPTR_RDP_Msk: u32 = 255;
pub const FLASH_OPTR_RDP: u32 = 255;
pub const FLASH_OPTR_BOR_LEV_Pos: u32 = 8;
pub const FLASH_OPTR_BOR_LEV_Msk: u32 = 1792;
pub const FLASH_OPTR_BOR_LEV: u32 = 1792;
pub const FLASH_OPTR_BOR_LEV_0: u32 = 0;
pub const FLASH_OPTR_BOR_LEV_1: u32 = 256;
pub const FLASH_OPTR_BOR_LEV_2: u32 = 512;
pub const FLASH_OPTR_BOR_LEV_3: u32 = 768;
pub const FLASH_OPTR_BOR_LEV_4: u32 = 1024;
pub const FLASH_OPTR_nRST_STOP_Pos: u32 = 12;
pub const FLASH_OPTR_nRST_STOP_Msk: u32 = 4096;
pub const FLASH_OPTR_nRST_STOP: u32 = 4096;
pub const FLASH_OPTR_nRST_STDBY_Pos: u32 = 13;
pub const FLASH_OPTR_nRST_STDBY_Msk: u32 = 8192;
pub const FLASH_OPTR_nRST_STDBY: u32 = 8192;
pub const FLASH_OPTR_nRST_SHDW_Pos: u32 = 14;
pub const FLASH_OPTR_nRST_SHDW_Msk: u32 = 16384;
pub const FLASH_OPTR_nRST_SHDW: u32 = 16384;
pub const FLASH_OPTR_IWDG_SW_Pos: u32 = 16;
pub const FLASH_OPTR_IWDG_SW_Msk: u32 = 65536;
pub const FLASH_OPTR_IWDG_SW: u32 = 65536;
pub const FLASH_OPTR_IWDG_STOP_Pos: u32 = 17;
pub const FLASH_OPTR_IWDG_STOP_Msk: u32 = 131072;
pub const FLASH_OPTR_IWDG_STOP: u32 = 131072;
pub const FLASH_OPTR_IWDG_STDBY_Pos: u32 = 18;
pub const FLASH_OPTR_IWDG_STDBY_Msk: u32 = 262144;
pub const FLASH_OPTR_IWDG_STDBY: u32 = 262144;
pub const FLASH_OPTR_WWDG_SW_Pos: u32 = 19;
pub const FLASH_OPTR_WWDG_SW_Msk: u32 = 524288;
pub const FLASH_OPTR_WWDG_SW: u32 = 524288;
pub const FLASH_OPTR_nBOOT1_Pos: u32 = 23;
pub const FLASH_OPTR_nBOOT1_Msk: u32 = 8388608;
pub const FLASH_OPTR_nBOOT1: u32 = 8388608;
pub const FLASH_OPTR_SRAM_PE_Pos: u32 = 24;
pub const FLASH_OPTR_SRAM_PE_Msk: u32 = 16777216;
pub const FLASH_OPTR_SRAM_PE: u32 = 16777216;
pub const FLASH_OPTR_CCMSRAM_RST_Pos: u32 = 25;
pub const FLASH_OPTR_CCMSRAM_RST_Msk: u32 = 33554432;
pub const FLASH_OPTR_CCMSRAM_RST: u32 = 33554432;
pub const FLASH_OPTR_nSWBOOT0_Pos: u32 = 26;
pub const FLASH_OPTR_nSWBOOT0_Msk: u32 = 67108864;
pub const FLASH_OPTR_nSWBOOT0: u32 = 67108864;
pub const FLASH_OPTR_nBOOT0_Pos: u32 = 27;
pub const FLASH_OPTR_nBOOT0_Msk: u32 = 134217728;
pub const FLASH_OPTR_nBOOT0: u32 = 134217728;
pub const FLASH_OPTR_NRST_MODE_Pos: u32 = 28;
pub const FLASH_OPTR_NRST_MODE_Msk: u32 = 805306368;
pub const FLASH_OPTR_NRST_MODE: u32 = 805306368;
pub const FLASH_OPTR_NRST_MODE_0: u32 = 268435456;
pub const FLASH_OPTR_NRST_MODE_1: u32 = 536870912;
pub const FLASH_OPTR_IRHEN_Pos: u32 = 30;
pub const FLASH_OPTR_IRHEN_Msk: u32 = 1073741824;
pub const FLASH_OPTR_IRHEN: u32 = 1073741824;
pub const FLASH_PCROP1SR_PCROP1_STRT_Pos: u32 = 0;
pub const FLASH_PCROP1SR_PCROP1_STRT_Msk: u32 = 16383;
pub const FLASH_PCROP1SR_PCROP1_STRT: u32 = 16383;
pub const FLASH_PCROP1ER_PCROP1_END_Pos: u32 = 0;
pub const FLASH_PCROP1ER_PCROP1_END_Msk: u32 = 16383;
pub const FLASH_PCROP1ER_PCROP1_END: u32 = 16383;
pub const FLASH_PCROP1ER_PCROP_RDP_Pos: u32 = 31;
pub const FLASH_PCROP1ER_PCROP_RDP_Msk: u32 = 2147483648;
pub const FLASH_PCROP1ER_PCROP_RDP: u32 = 2147483648;
pub const FLASH_WRP1AR_WRP1A_STRT_Pos: u32 = 0;
pub const FLASH_WRP1AR_WRP1A_STRT_Msk: u32 = 63;
pub const FLASH_WRP1AR_WRP1A_STRT: u32 = 63;
pub const FLASH_WRP1AR_WRP1A_END_Pos: u32 = 16;
pub const FLASH_WRP1AR_WRP1A_END_Msk: u32 = 4128768;
pub const FLASH_WRP1AR_WRP1A_END: u32 = 4128768;
pub const FLASH_WRP1BR_WRP1B_STRT_Pos: u32 = 0;
pub const FLASH_WRP1BR_WRP1B_STRT_Msk: u32 = 63;
pub const FLASH_WRP1BR_WRP1B_STRT: u32 = 63;
pub const FLASH_WRP1BR_WRP1B_END_Pos: u32 = 16;
pub const FLASH_WRP1BR_WRP1B_END_Msk: u32 = 4128768;
pub const FLASH_WRP1BR_WRP1B_END: u32 = 4128768;
pub const FLASH_SEC1R_SEC_SIZE1_Pos: u32 = 0;
pub const FLASH_SEC1R_SEC_SIZE1_Msk: u32 = 127;
pub const FLASH_SEC1R_SEC_SIZE1: u32 = 127;
pub const FLASH_SEC1R_BOOT_LOCK_Pos: u32 = 16;
pub const FLASH_SEC1R_BOOT_LOCK_Msk: u32 = 65536;
pub const FLASH_SEC1R_BOOT_LOCK: u32 = 65536;
pub const FMAC_X1BUFCFG_X1_BASE_Pos: u32 = 0;
pub const FMAC_X1BUFCFG_X1_BASE_Msk: u32 = 255;
pub const FMAC_X1BUFCFG_X1_BASE: u32 = 255;
pub const FMAC_X1BUFCFG_X1_BUF_SIZE_Pos: u32 = 8;
pub const FMAC_X1BUFCFG_X1_BUF_SIZE_Msk: u32 = 65280;
pub const FMAC_X1BUFCFG_X1_BUF_SIZE: u32 = 65280;
pub const FMAC_X1BUFCFG_FULL_WM_Pos: u32 = 24;
pub const FMAC_X1BUFCFG_FULL_WM_Msk: u32 = 50331648;
pub const FMAC_X1BUFCFG_FULL_WM: u32 = 50331648;
pub const FMAC_X2BUFCFG_X2_BASE_Pos: u32 = 0;
pub const FMAC_X2BUFCFG_X2_BASE_Msk: u32 = 255;
pub const FMAC_X2BUFCFG_X2_BASE: u32 = 255;
pub const FMAC_X2BUFCFG_X2_BUF_SIZE_Pos: u32 = 8;
pub const FMAC_X2BUFCFG_X2_BUF_SIZE_Msk: u32 = 65280;
pub const FMAC_X2BUFCFG_X2_BUF_SIZE: u32 = 65280;
pub const FMAC_YBUFCFG_Y_BASE_Pos: u32 = 0;
pub const FMAC_YBUFCFG_Y_BASE_Msk: u32 = 255;
pub const FMAC_YBUFCFG_Y_BASE: u32 = 255;
pub const FMAC_YBUFCFG_Y_BUF_SIZE_Pos: u32 = 8;
pub const FMAC_YBUFCFG_Y_BUF_SIZE_Msk: u32 = 65280;
pub const FMAC_YBUFCFG_Y_BUF_SIZE: u32 = 65280;
pub const FMAC_YBUFCFG_EMPTY_WM_Pos: u32 = 24;
pub const FMAC_YBUFCFG_EMPTY_WM_Msk: u32 = 50331648;
pub const FMAC_YBUFCFG_EMPTY_WM: u32 = 50331648;
pub const FMAC_PARAM_P_Pos: u32 = 0;
pub const FMAC_PARAM_P_Msk: u32 = 255;
pub const FMAC_PARAM_P: u32 = 255;
pub const FMAC_PARAM_Q_Pos: u32 = 8;
pub const FMAC_PARAM_Q_Msk: u32 = 65280;
pub const FMAC_PARAM_Q: u32 = 65280;
pub const FMAC_PARAM_R_Pos: u32 = 16;
pub const FMAC_PARAM_R_Msk: u32 = 16711680;
pub const FMAC_PARAM_R: u32 = 16711680;
pub const FMAC_PARAM_FUNC_Pos: u32 = 24;
pub const FMAC_PARAM_FUNC_Msk: u32 = 2130706432;
pub const FMAC_PARAM_FUNC: u32 = 2130706432;
pub const FMAC_PARAM_FUNC_0: u32 = 16777216;
pub const FMAC_PARAM_FUNC_1: u32 = 33554432;
pub const FMAC_PARAM_FUNC_2: u32 = 67108864;
pub const FMAC_PARAM_FUNC_3: u32 = 134217728;
pub const FMAC_PARAM_FUNC_4: u32 = 268435456;
pub const FMAC_PARAM_FUNC_5: u32 = 536870912;
pub const FMAC_PARAM_FUNC_6: u32 = 1073741824;
pub const FMAC_PARAM_START_Pos: u32 = 31;
pub const FMAC_PARAM_START_Msk: u32 = 2147483648;
pub const FMAC_PARAM_START: u32 = 2147483648;
pub const FMAC_CR_RIEN_Pos: u32 = 0;
pub const FMAC_CR_RIEN_Msk: u32 = 1;
pub const FMAC_CR_RIEN: u32 = 1;
pub const FMAC_CR_WIEN_Pos: u32 = 1;
pub const FMAC_CR_WIEN_Msk: u32 = 2;
pub const FMAC_CR_WIEN: u32 = 2;
pub const FMAC_CR_OVFLIEN_Pos: u32 = 2;
pub const FMAC_CR_OVFLIEN_Msk: u32 = 4;
pub const FMAC_CR_OVFLIEN: u32 = 4;
pub const FMAC_CR_UNFLIEN_Pos: u32 = 3;
pub const FMAC_CR_UNFLIEN_Msk: u32 = 8;
pub const FMAC_CR_UNFLIEN: u32 = 8;
pub const FMAC_CR_SATIEN_Pos: u32 = 4;
pub const FMAC_CR_SATIEN_Msk: u32 = 16;
pub const FMAC_CR_SATIEN: u32 = 16;
pub const FMAC_CR_DMAREN_Pos: u32 = 8;
pub const FMAC_CR_DMAREN_Msk: u32 = 256;
pub const FMAC_CR_DMAREN: u32 = 256;
pub const FMAC_CR_DMAWEN_Pos: u32 = 9;
pub const FMAC_CR_DMAWEN_Msk: u32 = 512;
pub const FMAC_CR_DMAWEN: u32 = 512;
pub const FMAC_CR_CLIPEN_Pos: u32 = 15;
pub const FMAC_CR_CLIPEN_Msk: u32 = 32768;
pub const FMAC_CR_CLIPEN: u32 = 32768;
pub const FMAC_CR_RESET_Pos: u32 = 16;
pub const FMAC_CR_RESET_Msk: u32 = 65536;
pub const FMAC_CR_RESET: u32 = 65536;
pub const FMAC_SR_YEMPTY_Pos: u32 = 0;
pub const FMAC_SR_YEMPTY_Msk: u32 = 1;
pub const FMAC_SR_YEMPTY: u32 = 1;
pub const FMAC_SR_X1FULL_Pos: u32 = 1;
pub const FMAC_SR_X1FULL_Msk: u32 = 2;
pub const FMAC_SR_X1FULL: u32 = 2;
pub const FMAC_SR_OVFL_Pos: u32 = 8;
pub const FMAC_SR_OVFL_Msk: u32 = 256;
pub const FMAC_SR_OVFL: u32 = 256;
pub const FMAC_SR_UNFL_Pos: u32 = 9;
pub const FMAC_SR_UNFL_Msk: u32 = 512;
pub const FMAC_SR_UNFL: u32 = 512;
pub const FMAC_SR_SAT_Pos: u32 = 10;
pub const FMAC_SR_SAT_Msk: u32 = 1024;
pub const FMAC_SR_SAT: u32 = 1024;
pub const FMAC_WDATA_WDATA_Pos: u32 = 0;
pub const FMAC_WDATA_WDATA_Msk: u32 = 65535;
pub const FMAC_WDATA_WDATA: u32 = 65535;
pub const FMAC_RDATA_RDATA_Pos: u32 = 0;
pub const FMAC_RDATA_RDATA_Msk: u32 = 65535;
pub const FMAC_RDATA_RDATA: u32 = 65535;
pub const GPIO_MODER_MODE0_Pos: u32 = 0;
pub const GPIO_MODER_MODE0_Msk: u32 = 3;
pub const GPIO_MODER_MODE0: u32 = 3;
pub const GPIO_MODER_MODE0_0: u32 = 1;
pub const GPIO_MODER_MODE0_1: u32 = 2;
pub const GPIO_MODER_MODE1_Pos: u32 = 2;
pub const GPIO_MODER_MODE1_Msk: u32 = 12;
pub const GPIO_MODER_MODE1: u32 = 12;
pub const GPIO_MODER_MODE1_0: u32 = 4;
pub const GPIO_MODER_MODE1_1: u32 = 8;
pub const GPIO_MODER_MODE2_Pos: u32 = 4;
pub const GPIO_MODER_MODE2_Msk: u32 = 48;
pub const GPIO_MODER_MODE2: u32 = 48;
pub const GPIO_MODER_MODE2_0: u32 = 16;
pub const GPIO_MODER_MODE2_1: u32 = 32;
pub const GPIO_MODER_MODE3_Pos: u32 = 6;
pub const GPIO_MODER_MODE3_Msk: u32 = 192;
pub const GPIO_MODER_MODE3: u32 = 192;
pub const GPIO_MODER_MODE3_0: u32 = 64;
pub const GPIO_MODER_MODE3_1: u32 = 128;
pub const GPIO_MODER_MODE4_Pos: u32 = 8;
pub const GPIO_MODER_MODE4_Msk: u32 = 768;
pub const GPIO_MODER_MODE4: u32 = 768;
pub const GPIO_MODER_MODE4_0: u32 = 256;
pub const GPIO_MODER_MODE4_1: u32 = 512;
pub const GPIO_MODER_MODE5_Pos: u32 = 10;
pub const GPIO_MODER_MODE5_Msk: u32 = 3072;
pub const GPIO_MODER_MODE5: u32 = 3072;
pub const GPIO_MODER_MODE5_0: u32 = 1024;
pub const GPIO_MODER_MODE5_1: u32 = 2048;
pub const GPIO_MODER_MODE6_Pos: u32 = 12;
pub const GPIO_MODER_MODE6_Msk: u32 = 12288;
pub const GPIO_MODER_MODE6: u32 = 12288;
pub const GPIO_MODER_MODE6_0: u32 = 4096;
pub const GPIO_MODER_MODE6_1: u32 = 8192;
pub const GPIO_MODER_MODE7_Pos: u32 = 14;
pub const GPIO_MODER_MODE7_Msk: u32 = 49152;
pub const GPIO_MODER_MODE7: u32 = 49152;
pub const GPIO_MODER_MODE7_0: u32 = 16384;
pub const GPIO_MODER_MODE7_1: u32 = 32768;
pub const GPIO_MODER_MODE8_Pos: u32 = 16;
pub const GPIO_MODER_MODE8_Msk: u32 = 196608;
pub const GPIO_MODER_MODE8: u32 = 196608;
pub const GPIO_MODER_MODE8_0: u32 = 65536;
pub const GPIO_MODER_MODE8_1: u32 = 131072;
pub const GPIO_MODER_MODE9_Pos: u32 = 18;
pub const GPIO_MODER_MODE9_Msk: u32 = 786432;
pub const GPIO_MODER_MODE9: u32 = 786432;
pub const GPIO_MODER_MODE9_0: u32 = 262144;
pub const GPIO_MODER_MODE9_1: u32 = 524288;
pub const GPIO_MODER_MODE10_Pos: u32 = 20;
pub const GPIO_MODER_MODE10_Msk: u32 = 3145728;
pub const GPIO_MODER_MODE10: u32 = 3145728;
pub const GPIO_MODER_MODE10_0: u32 = 1048576;
pub const GPIO_MODER_MODE10_1: u32 = 2097152;
pub const GPIO_MODER_MODE11_Pos: u32 = 22;
pub const GPIO_MODER_MODE11_Msk: u32 = 12582912;
pub const GPIO_MODER_MODE11: u32 = 12582912;
pub const GPIO_MODER_MODE11_0: u32 = 4194304;
pub const GPIO_MODER_MODE11_1: u32 = 8388608;
pub const GPIO_MODER_MODE12_Pos: u32 = 24;
pub const GPIO_MODER_MODE12_Msk: u32 = 50331648;
pub const GPIO_MODER_MODE12: u32 = 50331648;
pub const GPIO_MODER_MODE12_0: u32 = 16777216;
pub const GPIO_MODER_MODE12_1: u32 = 33554432;
pub const GPIO_MODER_MODE13_Pos: u32 = 26;
pub const GPIO_MODER_MODE13_Msk: u32 = 201326592;
pub const GPIO_MODER_MODE13: u32 = 201326592;
pub const GPIO_MODER_MODE13_0: u32 = 67108864;
pub const GPIO_MODER_MODE13_1: u32 = 134217728;
pub const GPIO_MODER_MODE14_Pos: u32 = 28;
pub const GPIO_MODER_MODE14_Msk: u32 = 805306368;
pub const GPIO_MODER_MODE14: u32 = 805306368;
pub const GPIO_MODER_MODE14_0: u32 = 268435456;
pub const GPIO_MODER_MODE14_1: u32 = 536870912;
pub const GPIO_MODER_MODE15_Pos: u32 = 30;
pub const GPIO_MODER_MODE15_Msk: u32 = 3221225472;
pub const GPIO_MODER_MODE15: u32 = 3221225472;
pub const GPIO_MODER_MODE15_0: u32 = 1073741824;
pub const GPIO_MODER_MODE15_1: u32 = 2147483648;
pub const GPIO_MODER_MODER0: u32 = 3;
pub const GPIO_MODER_MODER0_0: u32 = 1;
pub const GPIO_MODER_MODER0_1: u32 = 2;
pub const GPIO_MODER_MODER1: u32 = 12;
pub const GPIO_MODER_MODER1_0: u32 = 4;
pub const GPIO_MODER_MODER1_1: u32 = 8;
pub const GPIO_MODER_MODER2: u32 = 48;
pub const GPIO_MODER_MODER2_0: u32 = 16;
pub const GPIO_MODER_MODER2_1: u32 = 32;
pub const GPIO_MODER_MODER3: u32 = 192;
pub const GPIO_MODER_MODER3_0: u32 = 64;
pub const GPIO_MODER_MODER3_1: u32 = 128;
pub const GPIO_MODER_MODER4: u32 = 768;
pub const GPIO_MODER_MODER4_0: u32 = 256;
pub const GPIO_MODER_MODER4_1: u32 = 512;
pub const GPIO_MODER_MODER5: u32 = 3072;
pub const GPIO_MODER_MODER5_0: u32 = 1024;
pub const GPIO_MODER_MODER5_1: u32 = 2048;
pub const GPIO_MODER_MODER6: u32 = 12288;
pub const GPIO_MODER_MODER6_0: u32 = 4096;
pub const GPIO_MODER_MODER6_1: u32 = 8192;
pub const GPIO_MODER_MODER7: u32 = 49152;
pub const GPIO_MODER_MODER7_0: u32 = 16384;
pub const GPIO_MODER_MODER7_1: u32 = 32768;
pub const GPIO_MODER_MODER8: u32 = 196608;
pub const GPIO_MODER_MODER8_0: u32 = 65536;
pub const GPIO_MODER_MODER8_1: u32 = 131072;
pub const GPIO_MODER_MODER9: u32 = 786432;
pub const GPIO_MODER_MODER9_0: u32 = 262144;
pub const GPIO_MODER_MODER9_1: u32 = 524288;
pub const GPIO_MODER_MODER10: u32 = 3145728;
pub const GPIO_MODER_MODER10_0: u32 = 1048576;
pub const GPIO_MODER_MODER10_1: u32 = 2097152;
pub const GPIO_MODER_MODER11: u32 = 12582912;
pub const GPIO_MODER_MODER11_0: u32 = 4194304;
pub const GPIO_MODER_MODER11_1: u32 = 8388608;
pub const GPIO_MODER_MODER12: u32 = 50331648;
pub const GPIO_MODER_MODER12_0: u32 = 16777216;
pub const GPIO_MODER_MODER12_1: u32 = 33554432;
pub const GPIO_MODER_MODER13: u32 = 201326592;
pub const GPIO_MODER_MODER13_0: u32 = 67108864;
pub const GPIO_MODER_MODER13_1: u32 = 134217728;
pub const GPIO_MODER_MODER14: u32 = 805306368;
pub const GPIO_MODER_MODER14_0: u32 = 268435456;
pub const GPIO_MODER_MODER14_1: u32 = 536870912;
pub const GPIO_MODER_MODER15: u32 = 3221225472;
pub const GPIO_MODER_MODER15_0: u32 = 1073741824;
pub const GPIO_MODER_MODER15_1: u32 = 2147483648;
pub const GPIO_OTYPER_OT0_Pos: u32 = 0;
pub const GPIO_OTYPER_OT0_Msk: u32 = 1;
pub const GPIO_OTYPER_OT0: u32 = 1;
pub const GPIO_OTYPER_OT1_Pos: u32 = 1;
pub const GPIO_OTYPER_OT1_Msk: u32 = 2;
pub const GPIO_OTYPER_OT1: u32 = 2;
pub const GPIO_OTYPER_OT2_Pos: u32 = 2;
pub const GPIO_OTYPER_OT2_Msk: u32 = 4;
pub const GPIO_OTYPER_OT2: u32 = 4;
pub const GPIO_OTYPER_OT3_Pos: u32 = 3;
pub const GPIO_OTYPER_OT3_Msk: u32 = 8;
pub const GPIO_OTYPER_OT3: u32 = 8;
pub const GPIO_OTYPER_OT4_Pos: u32 = 4;
pub const GPIO_OTYPER_OT4_Msk: u32 = 16;
pub const GPIO_OTYPER_OT4: u32 = 16;
pub const GPIO_OTYPER_OT5_Pos: u32 = 5;
pub const GPIO_OTYPER_OT5_Msk: u32 = 32;
pub const GPIO_OTYPER_OT5: u32 = 32;
pub const GPIO_OTYPER_OT6_Pos: u32 = 6;
pub const GPIO_OTYPER_OT6_Msk: u32 = 64;
pub const GPIO_OTYPER_OT6: u32 = 64;
pub const GPIO_OTYPER_OT7_Pos: u32 = 7;
pub const GPIO_OTYPER_OT7_Msk: u32 = 128;
pub const GPIO_OTYPER_OT7: u32 = 128;
pub const GPIO_OTYPER_OT8_Pos: u32 = 8;
pub const GPIO_OTYPER_OT8_Msk: u32 = 256;
pub const GPIO_OTYPER_OT8: u32 = 256;
pub const GPIO_OTYPER_OT9_Pos: u32 = 9;
pub const GPIO_OTYPER_OT9_Msk: u32 = 512;
pub const GPIO_OTYPER_OT9: u32 = 512;
pub const GPIO_OTYPER_OT10_Pos: u32 = 10;
pub const GPIO_OTYPER_OT10_Msk: u32 = 1024;
pub const GPIO_OTYPER_OT10: u32 = 1024;
pub const GPIO_OTYPER_OT11_Pos: u32 = 11;
pub const GPIO_OTYPER_OT11_Msk: u32 = 2048;
pub const GPIO_OTYPER_OT11: u32 = 2048;
pub const GPIO_OTYPER_OT12_Pos: u32 = 12;
pub const GPIO_OTYPER_OT12_Msk: u32 = 4096;
pub const GPIO_OTYPER_OT12: u32 = 4096;
pub const GPIO_OTYPER_OT13_Pos: u32 = 13;
pub const GPIO_OTYPER_OT13_Msk: u32 = 8192;
pub const GPIO_OTYPER_OT13: u32 = 8192;
pub const GPIO_OTYPER_OT14_Pos: u32 = 14;
pub const GPIO_OTYPER_OT14_Msk: u32 = 16384;
pub const GPIO_OTYPER_OT14: u32 = 16384;
pub const GPIO_OTYPER_OT15_Pos: u32 = 15;
pub const GPIO_OTYPER_OT15_Msk: u32 = 32768;
pub const GPIO_OTYPER_OT15: u32 = 32768;
pub const GPIO_OTYPER_OT_0: u32 = 1;
pub const GPIO_OTYPER_OT_1: u32 = 2;
pub const GPIO_OTYPER_OT_2: u32 = 4;
pub const GPIO_OTYPER_OT_3: u32 = 8;
pub const GPIO_OTYPER_OT_4: u32 = 16;
pub const GPIO_OTYPER_OT_5: u32 = 32;
pub const GPIO_OTYPER_OT_6: u32 = 64;
pub const GPIO_OTYPER_OT_7: u32 = 128;
pub const GPIO_OTYPER_OT_8: u32 = 256;
pub const GPIO_OTYPER_OT_9: u32 = 512;
pub const GPIO_OTYPER_OT_10: u32 = 1024;
pub const GPIO_OTYPER_OT_11: u32 = 2048;
pub const GPIO_OTYPER_OT_12: u32 = 4096;
pub const GPIO_OTYPER_OT_13: u32 = 8192;
pub const GPIO_OTYPER_OT_14: u32 = 16384;
pub const GPIO_OTYPER_OT_15: u32 = 32768;
pub const GPIO_OSPEEDR_OSPEED0_Pos: u32 = 0;
pub const GPIO_OSPEEDR_OSPEED0_Msk: u32 = 3;
pub const GPIO_OSPEEDR_OSPEED0: u32 = 3;
pub const GPIO_OSPEEDR_OSPEED0_0: u32 = 1;
pub const GPIO_OSPEEDR_OSPEED0_1: u32 = 2;
pub const GPIO_OSPEEDR_OSPEED1_Pos: u32 = 2;
pub const GPIO_OSPEEDR_OSPEED1_Msk: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED1: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED1_0: u32 = 4;
pub const GPIO_OSPEEDR_OSPEED1_1: u32 = 8;
pub const GPIO_OSPEEDR_OSPEED2_Pos: u32 = 4;
pub const GPIO_OSPEEDR_OSPEED2_Msk: u32 = 48;
pub const GPIO_OSPEEDR_OSPEED2: u32 = 48;
pub const GPIO_OSPEEDR_OSPEED2_0: u32 = 16;
pub const GPIO_OSPEEDR_OSPEED2_1: u32 = 32;
pub const GPIO_OSPEEDR_OSPEED3_Pos: u32 = 6;
pub const GPIO_OSPEEDR_OSPEED3_Msk: u32 = 192;
pub const GPIO_OSPEEDR_OSPEED3: u32 = 192;
pub const GPIO_OSPEEDR_OSPEED3_0: u32 = 64;
pub const GPIO_OSPEEDR_OSPEED3_1: u32 = 128;
pub const GPIO_OSPEEDR_OSPEED4_Pos: u32 = 8;
pub const GPIO_OSPEEDR_OSPEED4_Msk: u32 = 768;
pub const GPIO_OSPEEDR_OSPEED4: u32 = 768;
pub const GPIO_OSPEEDR_OSPEED4_0: u32 = 256;
pub const GPIO_OSPEEDR_OSPEED4_1: u32 = 512;
pub const GPIO_OSPEEDR_OSPEED5_Pos: u32 = 10;
pub const GPIO_OSPEEDR_OSPEED5_Msk: u32 = 3072;
pub const GPIO_OSPEEDR_OSPEED5: u32 = 3072;
pub const GPIO_OSPEEDR_OSPEED5_0: u32 = 1024;
pub const GPIO_OSPEEDR_OSPEED5_1: u32 = 2048;
pub const GPIO_OSPEEDR_OSPEED6_Pos: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED6_Msk: u32 = 12288;
pub const GPIO_OSPEEDR_OSPEED6: u32 = 12288;
pub const GPIO_OSPEEDR_OSPEED6_0: u32 = 4096;
pub const GPIO_OSPEEDR_OSPEED6_1: u32 = 8192;
pub const GPIO_OSPEEDR_OSPEED7_Pos: u32 = 14;
pub const GPIO_OSPEEDR_OSPEED7_Msk: u32 = 49152;
pub const GPIO_OSPEEDR_OSPEED7: u32 = 49152;
pub const GPIO_OSPEEDR_OSPEED7_0: u32 = 16384;
pub const GPIO_OSPEEDR_OSPEED7_1: u32 = 32768;
pub const GPIO_OSPEEDR_OSPEED8_Pos: u32 = 16;
pub const GPIO_OSPEEDR_OSPEED8_Msk: u32 = 196608;
pub const GPIO_OSPEEDR_OSPEED8: u32 = 196608;
pub const GPIO_OSPEEDR_OSPEED8_0: u32 = 65536;
pub const GPIO_OSPEEDR_OSPEED8_1: u32 = 131072;
pub const GPIO_OSPEEDR_OSPEED9_Pos: u32 = 18;
pub const GPIO_OSPEEDR_OSPEED9_Msk: u32 = 786432;
pub const GPIO_OSPEEDR_OSPEED9: u32 = 786432;
pub const GPIO_OSPEEDR_OSPEED9_0: u32 = 262144;
pub const GPIO_OSPEEDR_OSPEED9_1: u32 = 524288;
pub const GPIO_OSPEEDR_OSPEED10_Pos: u32 = 20;
pub const GPIO_OSPEEDR_OSPEED10_Msk: u32 = 3145728;
pub const GPIO_OSPEEDR_OSPEED10: u32 = 3145728;
pub const GPIO_OSPEEDR_OSPEED10_0: u32 = 1048576;
pub const GPIO_OSPEEDR_OSPEED10_1: u32 = 2097152;
pub const GPIO_OSPEEDR_OSPEED11_Pos: u32 = 22;
pub const GPIO_OSPEEDR_OSPEED11_Msk: u32 = 12582912;
pub const GPIO_OSPEEDR_OSPEED11: u32 = 12582912;
pub const GPIO_OSPEEDR_OSPEED11_0: u32 = 4194304;
pub const GPIO_OSPEEDR_OSPEED11_1: u32 = 8388608;
pub const GPIO_OSPEEDR_OSPEED12_Pos: u32 = 24;
pub const GPIO_OSPEEDR_OSPEED12_Msk: u32 = 50331648;
pub const GPIO_OSPEEDR_OSPEED12: u32 = 50331648;
pub const GPIO_OSPEEDR_OSPEED12_0: u32 = 16777216;
pub const GPIO_OSPEEDR_OSPEED12_1: u32 = 33554432;
pub const GPIO_OSPEEDR_OSPEED13_Pos: u32 = 26;
pub const GPIO_OSPEEDR_OSPEED13_Msk: u32 = 201326592;
pub const GPIO_OSPEEDR_OSPEED13: u32 = 201326592;
pub const GPIO_OSPEEDR_OSPEED13_0: u32 = 67108864;
pub const GPIO_OSPEEDR_OSPEED13_1: u32 = 134217728;
pub const GPIO_OSPEEDR_OSPEED14_Pos: u32 = 28;
pub const GPIO_OSPEEDR_OSPEED14_Msk: u32 = 805306368;
pub const GPIO_OSPEEDR_OSPEED14: u32 = 805306368;
pub const GPIO_OSPEEDR_OSPEED14_0: u32 = 268435456;
pub const GPIO_OSPEEDR_OSPEED14_1: u32 = 536870912;
pub const GPIO_OSPEEDR_OSPEED15_Pos: u32 = 30;
pub const GPIO_OSPEEDR_OSPEED15_Msk: u32 = 3221225472;
pub const GPIO_OSPEEDR_OSPEED15: u32 = 3221225472;
pub const GPIO_OSPEEDR_OSPEED15_0: u32 = 1073741824;
pub const GPIO_OSPEEDR_OSPEED15_1: u32 = 2147483648;
pub const GPIO_OSPEEDER_OSPEEDR0: u32 = 3;
pub const GPIO_OSPEEDER_OSPEEDR0_0: u32 = 1;
pub const GPIO_OSPEEDER_OSPEEDR0_1: u32 = 2;
pub const GPIO_OSPEEDER_OSPEEDR1: u32 = 12;
pub const GPIO_OSPEEDER_OSPEEDR1_0: u32 = 4;
pub const GPIO_OSPEEDER_OSPEEDR1_1: u32 = 8;
pub const GPIO_OSPEEDER_OSPEEDR2: u32 = 48;
pub const GPIO_OSPEEDER_OSPEEDR2_0: u32 = 16;
pub const GPIO_OSPEEDER_OSPEEDR2_1: u32 = 32;
pub const GPIO_OSPEEDER_OSPEEDR3: u32 = 192;
pub const GPIO_OSPEEDER_OSPEEDR3_0: u32 = 64;
pub const GPIO_OSPEEDER_OSPEEDR3_1: u32 = 128;
pub const GPIO_OSPEEDER_OSPEEDR4: u32 = 768;
pub const GPIO_OSPEEDER_OSPEEDR4_0: u32 = 256;
pub const GPIO_OSPEEDER_OSPEEDR4_1: u32 = 512;
pub const GPIO_OSPEEDER_OSPEEDR5: u32 = 3072;
pub const GPIO_OSPEEDER_OSPEEDR5_0: u32 = 1024;
pub const GPIO_OSPEEDER_OSPEEDR5_1: u32 = 2048;
pub const GPIO_OSPEEDER_OSPEEDR6: u32 = 12288;
pub const GPIO_OSPEEDER_OSPEEDR6_0: u32 = 4096;
pub const GPIO_OSPEEDER_OSPEEDR6_1: u32 = 8192;
pub const GPIO_OSPEEDER_OSPEEDR7: u32 = 49152;
pub const GPIO_OSPEEDER_OSPEEDR7_0: u32 = 16384;
pub const GPIO_OSPEEDER_OSPEEDR7_1: u32 = 32768;
pub const GPIO_OSPEEDER_OSPEEDR8: u32 = 196608;
pub const GPIO_OSPEEDER_OSPEEDR8_0: u32 = 65536;
pub const GPIO_OSPEEDER_OSPEEDR8_1: u32 = 131072;
pub const GPIO_OSPEEDER_OSPEEDR9: u32 = 786432;
pub const GPIO_OSPEEDER_OSPEEDR9_0: u32 = 262144;
pub const GPIO_OSPEEDER_OSPEEDR9_1: u32 = 524288;
pub const GPIO_OSPEEDER_OSPEEDR10: u32 = 3145728;
pub const GPIO_OSPEEDER_OSPEEDR10_0: u32 = 1048576;
pub const GPIO_OSPEEDER_OSPEEDR10_1: u32 = 2097152;
pub const GPIO_OSPEEDER_OSPEEDR11: u32 = 12582912;
pub const GPIO_OSPEEDER_OSPEEDR11_0: u32 = 4194304;
pub const GPIO_OSPEEDER_OSPEEDR11_1: u32 = 8388608;
pub const GPIO_OSPEEDER_OSPEEDR12: u32 = 50331648;
pub const GPIO_OSPEEDER_OSPEEDR12_0: u32 = 16777216;
pub const GPIO_OSPEEDER_OSPEEDR12_1: u32 = 33554432;
pub const GPIO_OSPEEDER_OSPEEDR13: u32 = 201326592;
pub const GPIO_OSPEEDER_OSPEEDR13_0: u32 = 67108864;
pub const GPIO_OSPEEDER_OSPEEDR13_1: u32 = 134217728;
pub const GPIO_OSPEEDER_OSPEEDR14: u32 = 805306368;
pub const GPIO_OSPEEDER_OSPEEDR14_0: u32 = 268435456;
pub const GPIO_OSPEEDER_OSPEEDR14_1: u32 = 536870912;
pub const GPIO_OSPEEDER_OSPEEDR15: u32 = 3221225472;
pub const GPIO_OSPEEDER_OSPEEDR15_0: u32 = 1073741824;
pub const GPIO_OSPEEDER_OSPEEDR15_1: u32 = 2147483648;
pub const GPIO_PUPDR_PUPD0_Pos: u32 = 0;
pub const GPIO_PUPDR_PUPD0_Msk: u32 = 3;
pub const GPIO_PUPDR_PUPD0: u32 = 3;
pub const GPIO_PUPDR_PUPD0_0: u32 = 1;
pub const GPIO_PUPDR_PUPD0_1: u32 = 2;
pub const GPIO_PUPDR_PUPD1_Pos: u32 = 2;
pub const GPIO_PUPDR_PUPD1_Msk: u32 = 12;
pub const GPIO_PUPDR_PUPD1: u32 = 12;
pub const GPIO_PUPDR_PUPD1_0: u32 = 4;
pub const GPIO_PUPDR_PUPD1_1: u32 = 8;
pub const GPIO_PUPDR_PUPD2_Pos: u32 = 4;
pub const GPIO_PUPDR_PUPD2_Msk: u32 = 48;
pub const GPIO_PUPDR_PUPD2: u32 = 48;
pub const GPIO_PUPDR_PUPD2_0: u32 = 16;
pub const GPIO_PUPDR_PUPD2_1: u32 = 32;
pub const GPIO_PUPDR_PUPD3_Pos: u32 = 6;
pub const GPIO_PUPDR_PUPD3_Msk: u32 = 192;
pub const GPIO_PUPDR_PUPD3: u32 = 192;
pub const GPIO_PUPDR_PUPD3_0: u32 = 64;
pub const GPIO_PUPDR_PUPD3_1: u32 = 128;
pub const GPIO_PUPDR_PUPD4_Pos: u32 = 8;
pub const GPIO_PUPDR_PUPD4_Msk: u32 = 768;
pub const GPIO_PUPDR_PUPD4: u32 = 768;
pub const GPIO_PUPDR_PUPD4_0: u32 = 256;
pub const GPIO_PUPDR_PUPD4_1: u32 = 512;
pub const GPIO_PUPDR_PUPD5_Pos: u32 = 10;
pub const GPIO_PUPDR_PUPD5_Msk: u32 = 3072;
pub const GPIO_PUPDR_PUPD5: u32 = 3072;
pub const GPIO_PUPDR_PUPD5_0: u32 = 1024;
pub const GPIO_PUPDR_PUPD5_1: u32 = 2048;
pub const GPIO_PUPDR_PUPD6_Pos: u32 = 12;
pub const GPIO_PUPDR_PUPD6_Msk: u32 = 12288;
pub const GPIO_PUPDR_PUPD6: u32 = 12288;
pub const GPIO_PUPDR_PUPD6_0: u32 = 4096;
pub const GPIO_PUPDR_PUPD6_1: u32 = 8192;
pub const GPIO_PUPDR_PUPD7_Pos: u32 = 14;
pub const GPIO_PUPDR_PUPD7_Msk: u32 = 49152;
pub const GPIO_PUPDR_PUPD7: u32 = 49152;
pub const GPIO_PUPDR_PUPD7_0: u32 = 16384;
pub const GPIO_PUPDR_PUPD7_1: u32 = 32768;
pub const GPIO_PUPDR_PUPD8_Pos: u32 = 16;
pub const GPIO_PUPDR_PUPD8_Msk: u32 = 196608;
pub const GPIO_PUPDR_PUPD8: u32 = 196608;
pub const GPIO_PUPDR_PUPD8_0: u32 = 65536;
pub const GPIO_PUPDR_PUPD8_1: u32 = 131072;
pub const GPIO_PUPDR_PUPD9_Pos: u32 = 18;
pub const GPIO_PUPDR_PUPD9_Msk: u32 = 786432;
pub const GPIO_PUPDR_PUPD9: u32 = 786432;
pub const GPIO_PUPDR_PUPD9_0: u32 = 262144;
pub const GPIO_PUPDR_PUPD9_1: u32 = 524288;
pub const GPIO_PUPDR_PUPD10_Pos: u32 = 20;
pub const GPIO_PUPDR_PUPD10_Msk: u32 = 3145728;
pub const GPIO_PUPDR_PUPD10: u32 = 3145728;
pub const GPIO_PUPDR_PUPD10_0: u32 = 1048576;
pub const GPIO_PUPDR_PUPD10_1: u32 = 2097152;
pub const GPIO_PUPDR_PUPD11_Pos: u32 = 22;
pub const GPIO_PUPDR_PUPD11_Msk: u32 = 12582912;
pub const GPIO_PUPDR_PUPD11: u32 = 12582912;
pub const GPIO_PUPDR_PUPD11_0: u32 = 4194304;
pub const GPIO_PUPDR_PUPD11_1: u32 = 8388608;
pub const GPIO_PUPDR_PUPD12_Pos: u32 = 24;
pub const GPIO_PUPDR_PUPD12_Msk: u32 = 50331648;
pub const GPIO_PUPDR_PUPD12: u32 = 50331648;
pub const GPIO_PUPDR_PUPD12_0: u32 = 16777216;
pub const GPIO_PUPDR_PUPD12_1: u32 = 33554432;
pub const GPIO_PUPDR_PUPD13_Pos: u32 = 26;
pub const GPIO_PUPDR_PUPD13_Msk: u32 = 201326592;
pub const GPIO_PUPDR_PUPD13: u32 = 201326592;
pub const GPIO_PUPDR_PUPD13_0: u32 = 67108864;
pub const GPIO_PUPDR_PUPD13_1: u32 = 134217728;
pub const GPIO_PUPDR_PUPD14_Pos: u32 = 28;
pub const GPIO_PUPDR_PUPD14_Msk: u32 = 805306368;
pub const GPIO_PUPDR_PUPD14: u32 = 805306368;
pub const GPIO_PUPDR_PUPD14_0: u32 = 268435456;
pub const GPIO_PUPDR_PUPD14_1: u32 = 536870912;
pub const GPIO_PUPDR_PUPD15_Pos: u32 = 30;
pub const GPIO_PUPDR_PUPD15_Msk: u32 = 3221225472;
pub const GPIO_PUPDR_PUPD15: u32 = 3221225472;
pub const GPIO_PUPDR_PUPD15_0: u32 = 1073741824;
pub const GPIO_PUPDR_PUPD15_1: u32 = 2147483648;
pub const GPIO_PUPDR_PUPDR0: u32 = 3;
pub const GPIO_PUPDR_PUPDR0_0: u32 = 1;
pub const GPIO_PUPDR_PUPDR0_1: u32 = 2;
pub const GPIO_PUPDR_PUPDR1: u32 = 12;
pub const GPIO_PUPDR_PUPDR1_0: u32 = 4;
pub const GPIO_PUPDR_PUPDR1_1: u32 = 8;
pub const GPIO_PUPDR_PUPDR2: u32 = 48;
pub const GPIO_PUPDR_PUPDR2_0: u32 = 16;
pub const GPIO_PUPDR_PUPDR2_1: u32 = 32;
pub const GPIO_PUPDR_PUPDR3: u32 = 192;
pub const GPIO_PUPDR_PUPDR3_0: u32 = 64;
pub const GPIO_PUPDR_PUPDR3_1: u32 = 128;
pub const GPIO_PUPDR_PUPDR4: u32 = 768;
pub const GPIO_PUPDR_PUPDR4_0: u32 = 256;
pub const GPIO_PUPDR_PUPDR4_1: u32 = 512;
pub const GPIO_PUPDR_PUPDR5: u32 = 3072;
pub const GPIO_PUPDR_PUPDR5_0: u32 = 1024;
pub const GPIO_PUPDR_PUPDR5_1: u32 = 2048;
pub const GPIO_PUPDR_PUPDR6: u32 = 12288;
pub const GPIO_PUPDR_PUPDR6_0: u32 = 4096;
pub const GPIO_PUPDR_PUPDR6_1: u32 = 8192;
pub const GPIO_PUPDR_PUPDR7: u32 = 49152;
pub const GPIO_PUPDR_PUPDR7_0: u32 = 16384;
pub const GPIO_PUPDR_PUPDR7_1: u32 = 32768;
pub const GPIO_PUPDR_PUPDR8: u32 = 196608;
pub const GPIO_PUPDR_PUPDR8_0: u32 = 65536;
pub const GPIO_PUPDR_PUPDR8_1: u32 = 131072;
pub const GPIO_PUPDR_PUPDR9: u32 = 786432;
pub const GPIO_PUPDR_PUPDR9_0: u32 = 262144;
pub const GPIO_PUPDR_PUPDR9_1: u32 = 524288;
pub const GPIO_PUPDR_PUPDR10: u32 = 3145728;
pub const GPIO_PUPDR_PUPDR10_0: u32 = 1048576;
pub const GPIO_PUPDR_PUPDR10_1: u32 = 2097152;
pub const GPIO_PUPDR_PUPDR11: u32 = 12582912;
pub const GPIO_PUPDR_PUPDR11_0: u32 = 4194304;
pub const GPIO_PUPDR_PUPDR11_1: u32 = 8388608;
pub const GPIO_PUPDR_PUPDR12: u32 = 50331648;
pub const GPIO_PUPDR_PUPDR12_0: u32 = 16777216;
pub const GPIO_PUPDR_PUPDR12_1: u32 = 33554432;
pub const GPIO_PUPDR_PUPDR13: u32 = 201326592;
pub const GPIO_PUPDR_PUPDR13_0: u32 = 67108864;
pub const GPIO_PUPDR_PUPDR13_1: u32 = 134217728;
pub const GPIO_PUPDR_PUPDR14: u32 = 805306368;
pub const GPIO_PUPDR_PUPDR14_0: u32 = 268435456;
pub const GPIO_PUPDR_PUPDR14_1: u32 = 536870912;
pub const GPIO_PUPDR_PUPDR15: u32 = 3221225472;
pub const GPIO_PUPDR_PUPDR15_0: u32 = 1073741824;
pub const GPIO_PUPDR_PUPDR15_1: u32 = 2147483648;
pub const GPIO_IDR_ID0_Pos: u32 = 0;
pub const GPIO_IDR_ID0_Msk: u32 = 1;
pub const GPIO_IDR_ID0: u32 = 1;
pub const GPIO_IDR_ID1_Pos: u32 = 1;
pub const GPIO_IDR_ID1_Msk: u32 = 2;
pub const GPIO_IDR_ID1: u32 = 2;
pub const GPIO_IDR_ID2_Pos: u32 = 2;
pub const GPIO_IDR_ID2_Msk: u32 = 4;
pub const GPIO_IDR_ID2: u32 = 4;
pub const GPIO_IDR_ID3_Pos: u32 = 3;
pub const GPIO_IDR_ID3_Msk: u32 = 8;
pub const GPIO_IDR_ID3: u32 = 8;
pub const GPIO_IDR_ID4_Pos: u32 = 4;
pub const GPIO_IDR_ID4_Msk: u32 = 16;
pub const GPIO_IDR_ID4: u32 = 16;
pub const GPIO_IDR_ID5_Pos: u32 = 5;
pub const GPIO_IDR_ID5_Msk: u32 = 32;
pub const GPIO_IDR_ID5: u32 = 32;
pub const GPIO_IDR_ID6_Pos: u32 = 6;
pub const GPIO_IDR_ID6_Msk: u32 = 64;
pub const GPIO_IDR_ID6: u32 = 64;
pub const GPIO_IDR_ID7_Pos: u32 = 7;
pub const GPIO_IDR_ID7_Msk: u32 = 128;
pub const GPIO_IDR_ID7: u32 = 128;
pub const GPIO_IDR_ID8_Pos: u32 = 8;
pub const GPIO_IDR_ID8_Msk: u32 = 256;
pub const GPIO_IDR_ID8: u32 = 256;
pub const GPIO_IDR_ID9_Pos: u32 = 9;
pub const GPIO_IDR_ID9_Msk: u32 = 512;
pub const GPIO_IDR_ID9: u32 = 512;
pub const GPIO_IDR_ID10_Pos: u32 = 10;
pub const GPIO_IDR_ID10_Msk: u32 = 1024;
pub const GPIO_IDR_ID10: u32 = 1024;
pub const GPIO_IDR_ID11_Pos: u32 = 11;
pub const GPIO_IDR_ID11_Msk: u32 = 2048;
pub const GPIO_IDR_ID11: u32 = 2048;
pub const GPIO_IDR_ID12_Pos: u32 = 12;
pub const GPIO_IDR_ID12_Msk: u32 = 4096;
pub const GPIO_IDR_ID12: u32 = 4096;
pub const GPIO_IDR_ID13_Pos: u32 = 13;
pub const GPIO_IDR_ID13_Msk: u32 = 8192;
pub const GPIO_IDR_ID13: u32 = 8192;
pub const GPIO_IDR_ID14_Pos: u32 = 14;
pub const GPIO_IDR_ID14_Msk: u32 = 16384;
pub const GPIO_IDR_ID14: u32 = 16384;
pub const GPIO_IDR_ID15_Pos: u32 = 15;
pub const GPIO_IDR_ID15_Msk: u32 = 32768;
pub const GPIO_IDR_ID15: u32 = 32768;
pub const GPIO_IDR_IDR_0: u32 = 1;
pub const GPIO_IDR_IDR_1: u32 = 2;
pub const GPIO_IDR_IDR_2: u32 = 4;
pub const GPIO_IDR_IDR_3: u32 = 8;
pub const GPIO_IDR_IDR_4: u32 = 16;
pub const GPIO_IDR_IDR_5: u32 = 32;
pub const GPIO_IDR_IDR_6: u32 = 64;
pub const GPIO_IDR_IDR_7: u32 = 128;
pub const GPIO_IDR_IDR_8: u32 = 256;
pub const GPIO_IDR_IDR_9: u32 = 512;
pub const GPIO_IDR_IDR_10: u32 = 1024;
pub const GPIO_IDR_IDR_11: u32 = 2048;
pub const GPIO_IDR_IDR_12: u32 = 4096;
pub const GPIO_IDR_IDR_13: u32 = 8192;
pub const GPIO_IDR_IDR_14: u32 = 16384;
pub const GPIO_IDR_IDR_15: u32 = 32768;
pub const GPIO_OTYPER_IDR_0: u32 = 1;
pub const GPIO_OTYPER_IDR_1: u32 = 2;
pub const GPIO_OTYPER_IDR_2: u32 = 4;
pub const GPIO_OTYPER_IDR_3: u32 = 8;
pub const GPIO_OTYPER_IDR_4: u32 = 16;
pub const GPIO_OTYPER_IDR_5: u32 = 32;
pub const GPIO_OTYPER_IDR_6: u32 = 64;
pub const GPIO_OTYPER_IDR_7: u32 = 128;
pub const GPIO_OTYPER_IDR_8: u32 = 256;
pub const GPIO_OTYPER_IDR_9: u32 = 512;
pub const GPIO_OTYPER_IDR_10: u32 = 1024;
pub const GPIO_OTYPER_IDR_11: u32 = 2048;
pub const GPIO_OTYPER_IDR_12: u32 = 4096;
pub const GPIO_OTYPER_IDR_13: u32 = 8192;
pub const GPIO_OTYPER_IDR_14: u32 = 16384;
pub const GPIO_OTYPER_IDR_15: u32 = 32768;
pub const GPIO_ODR_OD0_Pos: u32 = 0;
pub const GPIO_ODR_OD0_Msk: u32 = 1;
pub const GPIO_ODR_OD0: u32 = 1;
pub const GPIO_ODR_OD1_Pos: u32 = 1;
pub const GPIO_ODR_OD1_Msk: u32 = 2;
pub const GPIO_ODR_OD1: u32 = 2;
pub const GPIO_ODR_OD2_Pos: u32 = 2;
pub const GPIO_ODR_OD2_Msk: u32 = 4;
pub const GPIO_ODR_OD2: u32 = 4;
pub const GPIO_ODR_OD3_Pos: u32 = 3;
pub const GPIO_ODR_OD3_Msk: u32 = 8;
pub const GPIO_ODR_OD3: u32 = 8;
pub const GPIO_ODR_OD4_Pos: u32 = 4;
pub const GPIO_ODR_OD4_Msk: u32 = 16;
pub const GPIO_ODR_OD4: u32 = 16;
pub const GPIO_ODR_OD5_Pos: u32 = 5;
pub const GPIO_ODR_OD5_Msk: u32 = 32;
pub const GPIO_ODR_OD5: u32 = 32;
pub const GPIO_ODR_OD6_Pos: u32 = 6;
pub const GPIO_ODR_OD6_Msk: u32 = 64;
pub const GPIO_ODR_OD6: u32 = 64;
pub const GPIO_ODR_OD7_Pos: u32 = 7;
pub const GPIO_ODR_OD7_Msk: u32 = 128;
pub const GPIO_ODR_OD7: u32 = 128;
pub const GPIO_ODR_OD8_Pos: u32 = 8;
pub const GPIO_ODR_OD8_Msk: u32 = 256;
pub const GPIO_ODR_OD8: u32 = 256;
pub const GPIO_ODR_OD9_Pos: u32 = 9;
pub const GPIO_ODR_OD9_Msk: u32 = 512;
pub const GPIO_ODR_OD9: u32 = 512;
pub const GPIO_ODR_OD10_Pos: u32 = 10;
pub const GPIO_ODR_OD10_Msk: u32 = 1024;
pub const GPIO_ODR_OD10: u32 = 1024;
pub const GPIO_ODR_OD11_Pos: u32 = 11;
pub const GPIO_ODR_OD11_Msk: u32 = 2048;
pub const GPIO_ODR_OD11: u32 = 2048;
pub const GPIO_ODR_OD12_Pos: u32 = 12;
pub const GPIO_ODR_OD12_Msk: u32 = 4096;
pub const GPIO_ODR_OD12: u32 = 4096;
pub const GPIO_ODR_OD13_Pos: u32 = 13;
pub const GPIO_ODR_OD13_Msk: u32 = 8192;
pub const GPIO_ODR_OD13: u32 = 8192;
pub const GPIO_ODR_OD14_Pos: u32 = 14;
pub const GPIO_ODR_OD14_Msk: u32 = 16384;
pub const GPIO_ODR_OD14: u32 = 16384;
pub const GPIO_ODR_OD15_Pos: u32 = 15;
pub const GPIO_ODR_OD15_Msk: u32 = 32768;
pub const GPIO_ODR_OD15: u32 = 32768;
pub const GPIO_ODR_ODR_0: u32 = 1;
pub const GPIO_ODR_ODR_1: u32 = 2;
pub const GPIO_ODR_ODR_2: u32 = 4;
pub const GPIO_ODR_ODR_3: u32 = 8;
pub const GPIO_ODR_ODR_4: u32 = 16;
pub const GPIO_ODR_ODR_5: u32 = 32;
pub const GPIO_ODR_ODR_6: u32 = 64;
pub const GPIO_ODR_ODR_7: u32 = 128;
pub const GPIO_ODR_ODR_8: u32 = 256;
pub const GPIO_ODR_ODR_9: u32 = 512;
pub const GPIO_ODR_ODR_10: u32 = 1024;
pub const GPIO_ODR_ODR_11: u32 = 2048;
pub const GPIO_ODR_ODR_12: u32 = 4096;
pub const GPIO_ODR_ODR_13: u32 = 8192;
pub const GPIO_ODR_ODR_14: u32 = 16384;
pub const GPIO_ODR_ODR_15: u32 = 32768;
pub const GPIO_OTYPER_ODR_0: u32 = 1;
pub const GPIO_OTYPER_ODR_1: u32 = 2;
pub const GPIO_OTYPER_ODR_2: u32 = 4;
pub const GPIO_OTYPER_ODR_3: u32 = 8;
pub const GPIO_OTYPER_ODR_4: u32 = 16;
pub const GPIO_OTYPER_ODR_5: u32 = 32;
pub const GPIO_OTYPER_ODR_6: u32 = 64;
pub const GPIO_OTYPER_ODR_7: u32 = 128;
pub const GPIO_OTYPER_ODR_8: u32 = 256;
pub const GPIO_OTYPER_ODR_9: u32 = 512;
pub const GPIO_OTYPER_ODR_10: u32 = 1024;
pub const GPIO_OTYPER_ODR_11: u32 = 2048;
pub const GPIO_OTYPER_ODR_12: u32 = 4096;
pub const GPIO_OTYPER_ODR_13: u32 = 8192;
pub const GPIO_OTYPER_ODR_14: u32 = 16384;
pub const GPIO_OTYPER_ODR_15: u32 = 32768;
pub const GPIO_BSRR_BS0_Pos: u32 = 0;
pub const GPIO_BSRR_BS0_Msk: u32 = 1;
pub const GPIO_BSRR_BS0: u32 = 1;
pub const GPIO_BSRR_BS1_Pos: u32 = 1;
pub const GPIO_BSRR_BS1_Msk: u32 = 2;
pub const GPIO_BSRR_BS1: u32 = 2;
pub const GPIO_BSRR_BS2_Pos: u32 = 2;
pub const GPIO_BSRR_BS2_Msk: u32 = 4;
pub const GPIO_BSRR_BS2: u32 = 4;
pub const GPIO_BSRR_BS3_Pos: u32 = 3;
pub const GPIO_BSRR_BS3_Msk: u32 = 8;
pub const GPIO_BSRR_BS3: u32 = 8;
pub const GPIO_BSRR_BS4_Pos: u32 = 4;
pub const GPIO_BSRR_BS4_Msk: u32 = 16;
pub const GPIO_BSRR_BS4: u32 = 16;
pub const GPIO_BSRR_BS5_Pos: u32 = 5;
pub const GPIO_BSRR_BS5_Msk: u32 = 32;
pub const GPIO_BSRR_BS5: u32 = 32;
pub const GPIO_BSRR_BS6_Pos: u32 = 6;
pub const GPIO_BSRR_BS6_Msk: u32 = 64;
pub const GPIO_BSRR_BS6: u32 = 64;
pub const GPIO_BSRR_BS7_Pos: u32 = 7;
pub const GPIO_BSRR_BS7_Msk: u32 = 128;
pub const GPIO_BSRR_BS7: u32 = 128;
pub const GPIO_BSRR_BS8_Pos: u32 = 8;
pub const GPIO_BSRR_BS8_Msk: u32 = 256;
pub const GPIO_BSRR_BS8: u32 = 256;
pub const GPIO_BSRR_BS9_Pos: u32 = 9;
pub const GPIO_BSRR_BS9_Msk: u32 = 512;
pub const GPIO_BSRR_BS9: u32 = 512;
pub const GPIO_BSRR_BS10_Pos: u32 = 10;
pub const GPIO_BSRR_BS10_Msk: u32 = 1024;
pub const GPIO_BSRR_BS10: u32 = 1024;
pub const GPIO_BSRR_BS11_Pos: u32 = 11;
pub const GPIO_BSRR_BS11_Msk: u32 = 2048;
pub const GPIO_BSRR_BS11: u32 = 2048;
pub const GPIO_BSRR_BS12_Pos: u32 = 12;
pub const GPIO_BSRR_BS12_Msk: u32 = 4096;
pub const GPIO_BSRR_BS12: u32 = 4096;
pub const GPIO_BSRR_BS13_Pos: u32 = 13;
pub const GPIO_BSRR_BS13_Msk: u32 = 8192;
pub const GPIO_BSRR_BS13: u32 = 8192;
pub const GPIO_BSRR_BS14_Pos: u32 = 14;
pub const GPIO_BSRR_BS14_Msk: u32 = 16384;
pub const GPIO_BSRR_BS14: u32 = 16384;
pub const GPIO_BSRR_BS15_Pos: u32 = 15;
pub const GPIO_BSRR_BS15_Msk: u32 = 32768;
pub const GPIO_BSRR_BS15: u32 = 32768;
pub const GPIO_BSRR_BR0_Pos: u32 = 16;
pub const GPIO_BSRR_BR0_Msk: u32 = 65536;
pub const GPIO_BSRR_BR0: u32 = 65536;
pub const GPIO_BSRR_BR1_Pos: u32 = 17;
pub const GPIO_BSRR_BR1_Msk: u32 = 131072;
pub const GPIO_BSRR_BR1: u32 = 131072;
pub const GPIO_BSRR_BR2_Pos: u32 = 18;
pub const GPIO_BSRR_BR2_Msk: u32 = 262144;
pub const GPIO_BSRR_BR2: u32 = 262144;
pub const GPIO_BSRR_BR3_Pos: u32 = 19;
pub const GPIO_BSRR_BR3_Msk: u32 = 524288;
pub const GPIO_BSRR_BR3: u32 = 524288;
pub const GPIO_BSRR_BR4_Pos: u32 = 20;
pub const GPIO_BSRR_BR4_Msk: u32 = 1048576;
pub const GPIO_BSRR_BR4: u32 = 1048576;
pub const GPIO_BSRR_BR5_Pos: u32 = 21;
pub const GPIO_BSRR_BR5_Msk: u32 = 2097152;
pub const GPIO_BSRR_BR5: u32 = 2097152;
pub const GPIO_BSRR_BR6_Pos: u32 = 22;
pub const GPIO_BSRR_BR6_Msk: u32 = 4194304;
pub const GPIO_BSRR_BR6: u32 = 4194304;
pub const GPIO_BSRR_BR7_Pos: u32 = 23;
pub const GPIO_BSRR_BR7_Msk: u32 = 8388608;
pub const GPIO_BSRR_BR7: u32 = 8388608;
pub const GPIO_BSRR_BR8_Pos: u32 = 24;
pub const GPIO_BSRR_BR8_Msk: u32 = 16777216;
pub const GPIO_BSRR_BR8: u32 = 16777216;
pub const GPIO_BSRR_BR9_Pos: u32 = 25;
pub const GPIO_BSRR_BR9_Msk: u32 = 33554432;
pub const GPIO_BSRR_BR9: u32 = 33554432;
pub const GPIO_BSRR_BR10_Pos: u32 = 26;
pub const GPIO_BSRR_BR10_Msk: u32 = 67108864;
pub const GPIO_BSRR_BR10: u32 = 67108864;
pub const GPIO_BSRR_BR11_Pos: u32 = 27;
pub const GPIO_BSRR_BR11_Msk: u32 = 134217728;
pub const GPIO_BSRR_BR11: u32 = 134217728;
pub const GPIO_BSRR_BR12_Pos: u32 = 28;
pub const GPIO_BSRR_BR12_Msk: u32 = 268435456;
pub const GPIO_BSRR_BR12: u32 = 268435456;
pub const GPIO_BSRR_BR13_Pos: u32 = 29;
pub const GPIO_BSRR_BR13_Msk: u32 = 536870912;
pub const GPIO_BSRR_BR13: u32 = 536870912;
pub const GPIO_BSRR_BR14_Pos: u32 = 30;
pub const GPIO_BSRR_BR14_Msk: u32 = 1073741824;
pub const GPIO_BSRR_BR14: u32 = 1073741824;
pub const GPIO_BSRR_BR15_Pos: u32 = 31;
pub const GPIO_BSRR_BR15_Msk: u32 = 2147483648;
pub const GPIO_BSRR_BR15: u32 = 2147483648;
pub const GPIO_BSRR_BS_0: u32 = 1;
pub const GPIO_BSRR_BS_1: u32 = 2;
pub const GPIO_BSRR_BS_2: u32 = 4;
pub const GPIO_BSRR_BS_3: u32 = 8;
pub const GPIO_BSRR_BS_4: u32 = 16;
pub const GPIO_BSRR_BS_5: u32 = 32;
pub const GPIO_BSRR_BS_6: u32 = 64;
pub const GPIO_BSRR_BS_7: u32 = 128;
pub const GPIO_BSRR_BS_8: u32 = 256;
pub const GPIO_BSRR_BS_9: u32 = 512;
pub const GPIO_BSRR_BS_10: u32 = 1024;
pub const GPIO_BSRR_BS_11: u32 = 2048;
pub const GPIO_BSRR_BS_12: u32 = 4096;
pub const GPIO_BSRR_BS_13: u32 = 8192;
pub const GPIO_BSRR_BS_14: u32 = 16384;
pub const GPIO_BSRR_BS_15: u32 = 32768;
pub const GPIO_BSRR_BR_0: u32 = 65536;
pub const GPIO_BSRR_BR_1: u32 = 131072;
pub const GPIO_BSRR_BR_2: u32 = 262144;
pub const GPIO_BSRR_BR_3: u32 = 524288;
pub const GPIO_BSRR_BR_4: u32 = 1048576;
pub const GPIO_BSRR_BR_5: u32 = 2097152;
pub const GPIO_BSRR_BR_6: u32 = 4194304;
pub const GPIO_BSRR_BR_7: u32 = 8388608;
pub const GPIO_BSRR_BR_8: u32 = 16777216;
pub const GPIO_BSRR_BR_9: u32 = 33554432;
pub const GPIO_BSRR_BR_10: u32 = 67108864;
pub const GPIO_BSRR_BR_11: u32 = 134217728;
pub const GPIO_BSRR_BR_12: u32 = 268435456;
pub const GPIO_BSRR_BR_13: u32 = 536870912;
pub const GPIO_BSRR_BR_14: u32 = 1073741824;
pub const GPIO_BSRR_BR_15: u32 = 2147483648;
pub const GPIO_LCKR_LCK0_Pos: u32 = 0;
pub const GPIO_LCKR_LCK0_Msk: u32 = 1;
pub const GPIO_LCKR_LCK0: u32 = 1;
pub const GPIO_LCKR_LCK1_Pos: u32 = 1;
pub const GPIO_LCKR_LCK1_Msk: u32 = 2;
pub const GPIO_LCKR_LCK1: u32 = 2;
pub const GPIO_LCKR_LCK2_Pos: u32 = 2;
pub const GPIO_LCKR_LCK2_Msk: u32 = 4;
pub const GPIO_LCKR_LCK2: u32 = 4;
pub const GPIO_LCKR_LCK3_Pos: u32 = 3;
pub const GPIO_LCKR_LCK3_Msk: u32 = 8;
pub const GPIO_LCKR_LCK3: u32 = 8;
pub const GPIO_LCKR_LCK4_Pos: u32 = 4;
pub const GPIO_LCKR_LCK4_Msk: u32 = 16;
pub const GPIO_LCKR_LCK4: u32 = 16;
pub const GPIO_LCKR_LCK5_Pos: u32 = 5;
pub const GPIO_LCKR_LCK5_Msk: u32 = 32;
pub const GPIO_LCKR_LCK5: u32 = 32;
pub const GPIO_LCKR_LCK6_Pos: u32 = 6;
pub const GPIO_LCKR_LCK6_Msk: u32 = 64;
pub const GPIO_LCKR_LCK6: u32 = 64;
pub const GPIO_LCKR_LCK7_Pos: u32 = 7;
pub const GPIO_LCKR_LCK7_Msk: u32 = 128;
pub const GPIO_LCKR_LCK7: u32 = 128;
pub const GPIO_LCKR_LCK8_Pos: u32 = 8;
pub const GPIO_LCKR_LCK8_Msk: u32 = 256;
pub const GPIO_LCKR_LCK8: u32 = 256;
pub const GPIO_LCKR_LCK9_Pos: u32 = 9;
pub const GPIO_LCKR_LCK9_Msk: u32 = 512;
pub const GPIO_LCKR_LCK9: u32 = 512;
pub const GPIO_LCKR_LCK10_Pos: u32 = 10;
pub const GPIO_LCKR_LCK10_Msk: u32 = 1024;
pub const GPIO_LCKR_LCK10: u32 = 1024;
pub const GPIO_LCKR_LCK11_Pos: u32 = 11;
pub const GPIO_LCKR_LCK11_Msk: u32 = 2048;
pub const GPIO_LCKR_LCK11: u32 = 2048;
pub const GPIO_LCKR_LCK12_Pos: u32 = 12;
pub const GPIO_LCKR_LCK12_Msk: u32 = 4096;
pub const GPIO_LCKR_LCK12: u32 = 4096;
pub const GPIO_LCKR_LCK13_Pos: u32 = 13;
pub const GPIO_LCKR_LCK13_Msk: u32 = 8192;
pub const GPIO_LCKR_LCK13: u32 = 8192;
pub const GPIO_LCKR_LCK14_Pos: u32 = 14;
pub const GPIO_LCKR_LCK14_Msk: u32 = 16384;
pub const GPIO_LCKR_LCK14: u32 = 16384;
pub const GPIO_LCKR_LCK15_Pos: u32 = 15;
pub const GPIO_LCKR_LCK15_Msk: u32 = 32768;
pub const GPIO_LCKR_LCK15: u32 = 32768;
pub const GPIO_LCKR_LCKK_Pos: u32 = 16;
pub const GPIO_LCKR_LCKK_Msk: u32 = 65536;
pub const GPIO_LCKR_LCKK: u32 = 65536;
pub const GPIO_AFRL_AFSEL0_Pos: u32 = 0;
pub const GPIO_AFRL_AFSEL0_Msk: u32 = 15;
pub const GPIO_AFRL_AFSEL0: u32 = 15;
pub const GPIO_AFRL_AFSEL0_0: u32 = 1;
pub const GPIO_AFRL_AFSEL0_1: u32 = 2;
pub const GPIO_AFRL_AFSEL0_2: u32 = 4;
pub const GPIO_AFRL_AFSEL0_3: u32 = 8;
pub const GPIO_AFRL_AFSEL1_Pos: u32 = 4;
pub const GPIO_AFRL_AFSEL1_Msk: u32 = 240;
pub const GPIO_AFRL_AFSEL1: u32 = 240;
pub const GPIO_AFRL_AFSEL1_0: u32 = 16;
pub const GPIO_AFRL_AFSEL1_1: u32 = 32;
pub const GPIO_AFRL_AFSEL1_2: u32 = 64;
pub const GPIO_AFRL_AFSEL1_3: u32 = 128;
pub const GPIO_AFRL_AFSEL2_Pos: u32 = 8;
pub const GPIO_AFRL_AFSEL2_Msk: u32 = 3840;
pub const GPIO_AFRL_AFSEL2: u32 = 3840;
pub const GPIO_AFRL_AFSEL2_0: u32 = 256;
pub const GPIO_AFRL_AFSEL2_1: u32 = 512;
pub const GPIO_AFRL_AFSEL2_2: u32 = 1024;
pub const GPIO_AFRL_AFSEL2_3: u32 = 2048;
pub const GPIO_AFRL_AFSEL3_Pos: u32 = 12;
pub const GPIO_AFRL_AFSEL3_Msk: u32 = 61440;
pub const GPIO_AFRL_AFSEL3: u32 = 61440;
pub const GPIO_AFRL_AFSEL3_0: u32 = 4096;
pub const GPIO_AFRL_AFSEL3_1: u32 = 8192;
pub const GPIO_AFRL_AFSEL3_2: u32 = 16384;
pub const GPIO_AFRL_AFSEL3_3: u32 = 32768;
pub const GPIO_AFRL_AFSEL4_Pos: u32 = 16;
pub const GPIO_AFRL_AFSEL4_Msk: u32 = 983040;
pub const GPIO_AFRL_AFSEL4: u32 = 983040;
pub const GPIO_AFRL_AFSEL4_0: u32 = 65536;
pub const GPIO_AFRL_AFSEL4_1: u32 = 131072;
pub const GPIO_AFRL_AFSEL4_2: u32 = 262144;
pub const GPIO_AFRL_AFSEL4_3: u32 = 524288;
pub const GPIO_AFRL_AFSEL5_Pos: u32 = 20;
pub const GPIO_AFRL_AFSEL5_Msk: u32 = 15728640;
pub const GPIO_AFRL_AFSEL5: u32 = 15728640;
pub const GPIO_AFRL_AFSEL5_0: u32 = 1048576;
pub const GPIO_AFRL_AFSEL5_1: u32 = 2097152;
pub const GPIO_AFRL_AFSEL5_2: u32 = 4194304;
pub const GPIO_AFRL_AFSEL5_3: u32 = 8388608;
pub const GPIO_AFRL_AFSEL6_Pos: u32 = 24;
pub const GPIO_AFRL_AFSEL6_Msk: u32 = 251658240;
pub const GPIO_AFRL_AFSEL6: u32 = 251658240;
pub const GPIO_AFRL_AFSEL6_0: u32 = 16777216;
pub const GPIO_AFRL_AFSEL6_1: u32 = 33554432;
pub const GPIO_AFRL_AFSEL6_2: u32 = 67108864;
pub const GPIO_AFRL_AFSEL6_3: u32 = 134217728;
pub const GPIO_AFRL_AFSEL7_Pos: u32 = 28;
pub const GPIO_AFRL_AFSEL7_Msk: u32 = 4026531840;
pub const GPIO_AFRL_AFSEL7: u32 = 4026531840;
pub const GPIO_AFRL_AFSEL7_0: u32 = 268435456;
pub const GPIO_AFRL_AFSEL7_1: u32 = 536870912;
pub const GPIO_AFRL_AFSEL7_2: u32 = 1073741824;
pub const GPIO_AFRL_AFSEL7_3: u32 = 2147483648;
pub const GPIO_AFRL_AFRL0: u32 = 15;
pub const GPIO_AFRL_AFRL1: u32 = 240;
pub const GPIO_AFRL_AFRL2: u32 = 3840;
pub const GPIO_AFRL_AFRL3: u32 = 61440;
pub const GPIO_AFRL_AFRL4: u32 = 983040;
pub const GPIO_AFRL_AFRL5: u32 = 15728640;
pub const GPIO_AFRL_AFRL6: u32 = 251658240;
pub const GPIO_AFRL_AFRL7: u32 = 4026531840;
pub const GPIO_AFRH_AFSEL8_Pos: u32 = 0;
pub const GPIO_AFRH_AFSEL8_Msk: u32 = 15;
pub const GPIO_AFRH_AFSEL8: u32 = 15;
pub const GPIO_AFRH_AFSEL8_0: u32 = 1;
pub const GPIO_AFRH_AFSEL8_1: u32 = 2;
pub const GPIO_AFRH_AFSEL8_2: u32 = 4;
pub const GPIO_AFRH_AFSEL8_3: u32 = 8;
pub const GPIO_AFRH_AFSEL9_Pos: u32 = 4;
pub const GPIO_AFRH_AFSEL9_Msk: u32 = 240;
pub const GPIO_AFRH_AFSEL9: u32 = 240;
pub const GPIO_AFRH_AFSEL9_0: u32 = 16;
pub const GPIO_AFRH_AFSEL9_1: u32 = 32;
pub const GPIO_AFRH_AFSEL9_2: u32 = 64;
pub const GPIO_AFRH_AFSEL9_3: u32 = 128;
pub const GPIO_AFRH_AFSEL10_Pos: u32 = 8;
pub const GPIO_AFRH_AFSEL10_Msk: u32 = 3840;
pub const GPIO_AFRH_AFSEL10: u32 = 3840;
pub const GPIO_AFRH_AFSEL10_0: u32 = 256;
pub const GPIO_AFRH_AFSEL10_1: u32 = 512;
pub const GPIO_AFRH_AFSEL10_2: u32 = 1024;
pub const GPIO_AFRH_AFSEL10_3: u32 = 2048;
pub const GPIO_AFRH_AFSEL11_Pos: u32 = 12;
pub const GPIO_AFRH_AFSEL11_Msk: u32 = 61440;
pub const GPIO_AFRH_AFSEL11: u32 = 61440;
pub const GPIO_AFRH_AFSEL11_0: u32 = 4096;
pub const GPIO_AFRH_AFSEL11_1: u32 = 8192;
pub const GPIO_AFRH_AFSEL11_2: u32 = 16384;
pub const GPIO_AFRH_AFSEL11_3: u32 = 32768;
pub const GPIO_AFRH_AFSEL12_Pos: u32 = 16;
pub const GPIO_AFRH_AFSEL12_Msk: u32 = 983040;
pub const GPIO_AFRH_AFSEL12: u32 = 983040;
pub const GPIO_AFRH_AFSEL12_0: u32 = 65536;
pub const GPIO_AFRH_AFSEL12_1: u32 = 131072;
pub const GPIO_AFRH_AFSEL12_2: u32 = 262144;
pub const GPIO_AFRH_AFSEL12_3: u32 = 524288;
pub const GPIO_AFRH_AFSEL13_Pos: u32 = 20;
pub const GPIO_AFRH_AFSEL13_Msk: u32 = 15728640;
pub const GPIO_AFRH_AFSEL13: u32 = 15728640;
pub const GPIO_AFRH_AFSEL13_0: u32 = 1048576;
pub const GPIO_AFRH_AFSEL13_1: u32 = 2097152;
pub const GPIO_AFRH_AFSEL13_2: u32 = 4194304;
pub const GPIO_AFRH_AFSEL13_3: u32 = 8388608;
pub const GPIO_AFRH_AFSEL14_Pos: u32 = 24;
pub const GPIO_AFRH_AFSEL14_Msk: u32 = 251658240;
pub const GPIO_AFRH_AFSEL14: u32 = 251658240;
pub const GPIO_AFRH_AFSEL14_0: u32 = 16777216;
pub const GPIO_AFRH_AFSEL14_1: u32 = 33554432;
pub const GPIO_AFRH_AFSEL14_2: u32 = 67108864;
pub const GPIO_AFRH_AFSEL14_3: u32 = 134217728;
pub const GPIO_AFRH_AFSEL15_Pos: u32 = 28;
pub const GPIO_AFRH_AFSEL15_Msk: u32 = 4026531840;
pub const GPIO_AFRH_AFSEL15: u32 = 4026531840;
pub const GPIO_AFRH_AFSEL15_0: u32 = 268435456;
pub const GPIO_AFRH_AFSEL15_1: u32 = 536870912;
pub const GPIO_AFRH_AFSEL15_2: u32 = 1073741824;
pub const GPIO_AFRH_AFSEL15_3: u32 = 2147483648;
pub const GPIO_AFRH_AFRH0: u32 = 15;
pub const GPIO_AFRH_AFRH1: u32 = 240;
pub const GPIO_AFRH_AFRH2: u32 = 3840;
pub const GPIO_AFRH_AFRH3: u32 = 61440;
pub const GPIO_AFRH_AFRH4: u32 = 983040;
pub const GPIO_AFRH_AFRH5: u32 = 15728640;
pub const GPIO_AFRH_AFRH6: u32 = 251658240;
pub const GPIO_AFRH_AFRH7: u32 = 4026531840;
pub const GPIO_BRR_BR0_Pos: u32 = 0;
pub const GPIO_BRR_BR0_Msk: u32 = 1;
pub const GPIO_BRR_BR0: u32 = 1;
pub const GPIO_BRR_BR1_Pos: u32 = 1;
pub const GPIO_BRR_BR1_Msk: u32 = 2;
pub const GPIO_BRR_BR1: u32 = 2;
pub const GPIO_BRR_BR2_Pos: u32 = 2;
pub const GPIO_BRR_BR2_Msk: u32 = 4;
pub const GPIO_BRR_BR2: u32 = 4;
pub const GPIO_BRR_BR3_Pos: u32 = 3;
pub const GPIO_BRR_BR3_Msk: u32 = 8;
pub const GPIO_BRR_BR3: u32 = 8;
pub const GPIO_BRR_BR4_Pos: u32 = 4;
pub const GPIO_BRR_BR4_Msk: u32 = 16;
pub const GPIO_BRR_BR4: u32 = 16;
pub const GPIO_BRR_BR5_Pos: u32 = 5;
pub const GPIO_BRR_BR5_Msk: u32 = 32;
pub const GPIO_BRR_BR5: u32 = 32;
pub const GPIO_BRR_BR6_Pos: u32 = 6;
pub const GPIO_BRR_BR6_Msk: u32 = 64;
pub const GPIO_BRR_BR6: u32 = 64;
pub const GPIO_BRR_BR7_Pos: u32 = 7;
pub const GPIO_BRR_BR7_Msk: u32 = 128;
pub const GPIO_BRR_BR7: u32 = 128;
pub const GPIO_BRR_BR8_Pos: u32 = 8;
pub const GPIO_BRR_BR8_Msk: u32 = 256;
pub const GPIO_BRR_BR8: u32 = 256;
pub const GPIO_BRR_BR9_Pos: u32 = 9;
pub const GPIO_BRR_BR9_Msk: u32 = 512;
pub const GPIO_BRR_BR9: u32 = 512;
pub const GPIO_BRR_BR10_Pos: u32 = 10;
pub const GPIO_BRR_BR10_Msk: u32 = 1024;
pub const GPIO_BRR_BR10: u32 = 1024;
pub const GPIO_BRR_BR11_Pos: u32 = 11;
pub const GPIO_BRR_BR11_Msk: u32 = 2048;
pub const GPIO_BRR_BR11: u32 = 2048;
pub const GPIO_BRR_BR12_Pos: u32 = 12;
pub const GPIO_BRR_BR12_Msk: u32 = 4096;
pub const GPIO_BRR_BR12: u32 = 4096;
pub const GPIO_BRR_BR13_Pos: u32 = 13;
pub const GPIO_BRR_BR13_Msk: u32 = 8192;
pub const GPIO_BRR_BR13: u32 = 8192;
pub const GPIO_BRR_BR14_Pos: u32 = 14;
pub const GPIO_BRR_BR14_Msk: u32 = 16384;
pub const GPIO_BRR_BR14: u32 = 16384;
pub const GPIO_BRR_BR15_Pos: u32 = 15;
pub const GPIO_BRR_BR15_Msk: u32 = 32768;
pub const GPIO_BRR_BR15: u32 = 32768;
pub const GPIO_BRR_BR_0: u32 = 1;
pub const GPIO_BRR_BR_1: u32 = 2;
pub const GPIO_BRR_BR_2: u32 = 4;
pub const GPIO_BRR_BR_3: u32 = 8;
pub const GPIO_BRR_BR_4: u32 = 16;
pub const GPIO_BRR_BR_5: u32 = 32;
pub const GPIO_BRR_BR_6: u32 = 64;
pub const GPIO_BRR_BR_7: u32 = 128;
pub const GPIO_BRR_BR_8: u32 = 256;
pub const GPIO_BRR_BR_9: u32 = 512;
pub const GPIO_BRR_BR_10: u32 = 1024;
pub const GPIO_BRR_BR_11: u32 = 2048;
pub const GPIO_BRR_BR_12: u32 = 4096;
pub const GPIO_BRR_BR_13: u32 = 8192;
pub const GPIO_BRR_BR_14: u32 = 16384;
pub const GPIO_BRR_BR_15: u32 = 32768;
pub const I2C_CR1_PE_Pos: u32 = 0;
pub const I2C_CR1_PE_Msk: u32 = 1;
pub const I2C_CR1_PE: u32 = 1;
pub const I2C_CR1_TXIE_Pos: u32 = 1;
pub const I2C_CR1_TXIE_Msk: u32 = 2;
pub const I2C_CR1_TXIE: u32 = 2;
pub const I2C_CR1_RXIE_Pos: u32 = 2;
pub const I2C_CR1_RXIE_Msk: u32 = 4;
pub const I2C_CR1_RXIE: u32 = 4;
pub const I2C_CR1_ADDRIE_Pos: u32 = 3;
pub const I2C_CR1_ADDRIE_Msk: u32 = 8;
pub const I2C_CR1_ADDRIE: u32 = 8;
pub const I2C_CR1_NACKIE_Pos: u32 = 4;
pub const I2C_CR1_NACKIE_Msk: u32 = 16;
pub const I2C_CR1_NACKIE: u32 = 16;
pub const I2C_CR1_STOPIE_Pos: u32 = 5;
pub const I2C_CR1_STOPIE_Msk: u32 = 32;
pub const I2C_CR1_STOPIE: u32 = 32;
pub const I2C_CR1_TCIE_Pos: u32 = 6;
pub const I2C_CR1_TCIE_Msk: u32 = 64;
pub const I2C_CR1_TCIE: u32 = 64;
pub const I2C_CR1_ERRIE_Pos: u32 = 7;
pub const I2C_CR1_ERRIE_Msk: u32 = 128;
pub const I2C_CR1_ERRIE: u32 = 128;
pub const I2C_CR1_DNF_Pos: u32 = 8;
pub const I2C_CR1_DNF_Msk: u32 = 3840;
pub const I2C_CR1_DNF: u32 = 3840;
pub const I2C_CR1_ANFOFF_Pos: u32 = 12;
pub const I2C_CR1_ANFOFF_Msk: u32 = 4096;
pub const I2C_CR1_ANFOFF: u32 = 4096;
pub const I2C_CR1_SWRST_Pos: u32 = 13;
pub const I2C_CR1_SWRST_Msk: u32 = 8192;
pub const I2C_CR1_SWRST: u32 = 8192;
pub const I2C_CR1_TXDMAEN_Pos: u32 = 14;
pub const I2C_CR1_TXDMAEN_Msk: u32 = 16384;
pub const I2C_CR1_TXDMAEN: u32 = 16384;
pub const I2C_CR1_RXDMAEN_Pos: u32 = 15;
pub const I2C_CR1_RXDMAEN_Msk: u32 = 32768;
pub const I2C_CR1_RXDMAEN: u32 = 32768;
pub const I2C_CR1_SBC_Pos: u32 = 16;
pub const I2C_CR1_SBC_Msk: u32 = 65536;
pub const I2C_CR1_SBC: u32 = 65536;
pub const I2C_CR1_NOSTRETCH_Pos: u32 = 17;
pub const I2C_CR1_NOSTRETCH_Msk: u32 = 131072;
pub const I2C_CR1_NOSTRETCH: u32 = 131072;
pub const I2C_CR1_WUPEN_Pos: u32 = 18;
pub const I2C_CR1_WUPEN_Msk: u32 = 262144;
pub const I2C_CR1_WUPEN: u32 = 262144;
pub const I2C_CR1_GCEN_Pos: u32 = 19;
pub const I2C_CR1_GCEN_Msk: u32 = 524288;
pub const I2C_CR1_GCEN: u32 = 524288;
pub const I2C_CR1_SMBHEN_Pos: u32 = 20;
pub const I2C_CR1_SMBHEN_Msk: u32 = 1048576;
pub const I2C_CR1_SMBHEN: u32 = 1048576;
pub const I2C_CR1_SMBDEN_Pos: u32 = 21;
pub const I2C_CR1_SMBDEN_Msk: u32 = 2097152;
pub const I2C_CR1_SMBDEN: u32 = 2097152;
pub const I2C_CR1_ALERTEN_Pos: u32 = 22;
pub const I2C_CR1_ALERTEN_Msk: u32 = 4194304;
pub const I2C_CR1_ALERTEN: u32 = 4194304;
pub const I2C_CR1_PECEN_Pos: u32 = 23;
pub const I2C_CR1_PECEN_Msk: u32 = 8388608;
pub const I2C_CR1_PECEN: u32 = 8388608;
pub const I2C_CR2_SADD_Pos: u32 = 0;
pub const I2C_CR2_SADD_Msk: u32 = 1023;
pub const I2C_CR2_SADD: u32 = 1023;
pub const I2C_CR2_RD_WRN_Pos: u32 = 10;
pub const I2C_CR2_RD_WRN_Msk: u32 = 1024;
pub const I2C_CR2_RD_WRN: u32 = 1024;
pub const I2C_CR2_ADD10_Pos: u32 = 11;
pub const I2C_CR2_ADD10_Msk: u32 = 2048;
pub const I2C_CR2_ADD10: u32 = 2048;
pub const I2C_CR2_HEAD10R_Pos: u32 = 12;
pub const I2C_CR2_HEAD10R_Msk: u32 = 4096;
pub const I2C_CR2_HEAD10R: u32 = 4096;
pub const I2C_CR2_START_Pos: u32 = 13;
pub const I2C_CR2_START_Msk: u32 = 8192;
pub const I2C_CR2_START: u32 = 8192;
pub const I2C_CR2_STOP_Pos: u32 = 14;
pub const I2C_CR2_STOP_Msk: u32 = 16384;
pub const I2C_CR2_STOP: u32 = 16384;
pub const I2C_CR2_NACK_Pos: u32 = 15;
pub const I2C_CR2_NACK_Msk: u32 = 32768;
pub const I2C_CR2_NACK: u32 = 32768;
pub const I2C_CR2_NBYTES_Pos: u32 = 16;
pub const I2C_CR2_NBYTES_Msk: u32 = 16711680;
pub const I2C_CR2_NBYTES: u32 = 16711680;
pub const I2C_CR2_RELOAD_Pos: u32 = 24;
pub const I2C_CR2_RELOAD_Msk: u32 = 16777216;
pub const I2C_CR2_RELOAD: u32 = 16777216;
pub const I2C_CR2_AUTOEND_Pos: u32 = 25;
pub const I2C_CR2_AUTOEND_Msk: u32 = 33554432;
pub const I2C_CR2_AUTOEND: u32 = 33554432;
pub const I2C_CR2_PECBYTE_Pos: u32 = 26;
pub const I2C_CR2_PECBYTE_Msk: u32 = 67108864;
pub const I2C_CR2_PECBYTE: u32 = 67108864;
pub const I2C_OAR1_OA1_Pos: u32 = 0;
pub const I2C_OAR1_OA1_Msk: u32 = 1023;
pub const I2C_OAR1_OA1: u32 = 1023;
pub const I2C_OAR1_OA1MODE_Pos: u32 = 10;
pub const I2C_OAR1_OA1MODE_Msk: u32 = 1024;
pub const I2C_OAR1_OA1MODE: u32 = 1024;
pub const I2C_OAR1_OA1EN_Pos: u32 = 15;
pub const I2C_OAR1_OA1EN_Msk: u32 = 32768;
pub const I2C_OAR1_OA1EN: u32 = 32768;
pub const I2C_OAR2_OA2_Pos: u32 = 1;
pub const I2C_OAR2_OA2_Msk: u32 = 254;
pub const I2C_OAR2_OA2: u32 = 254;
pub const I2C_OAR2_OA2MSK_Pos: u32 = 8;
pub const I2C_OAR2_OA2MSK_Msk: u32 = 1792;
pub const I2C_OAR2_OA2MSK: u32 = 1792;
pub const I2C_OAR2_OA2NOMASK: u32 = 0;
pub const I2C_OAR2_OA2MASK01_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK01_Msk: u32 = 256;
pub const I2C_OAR2_OA2MASK01: u32 = 256;
pub const I2C_OAR2_OA2MASK02_Pos: u32 = 9;
pub const I2C_OAR2_OA2MASK02_Msk: u32 = 512;
pub const I2C_OAR2_OA2MASK02: u32 = 512;
pub const I2C_OAR2_OA2MASK03_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK03_Msk: u32 = 768;
pub const I2C_OAR2_OA2MASK03: u32 = 768;
pub const I2C_OAR2_OA2MASK04_Pos: u32 = 10;
pub const I2C_OAR2_OA2MASK04_Msk: u32 = 1024;
pub const I2C_OAR2_OA2MASK04: u32 = 1024;
pub const I2C_OAR2_OA2MASK05_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK05_Msk: u32 = 1280;
pub const I2C_OAR2_OA2MASK05: u32 = 1280;
pub const I2C_OAR2_OA2MASK06_Pos: u32 = 9;
pub const I2C_OAR2_OA2MASK06_Msk: u32 = 1536;
pub const I2C_OAR2_OA2MASK06: u32 = 1536;
pub const I2C_OAR2_OA2MASK07_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK07_Msk: u32 = 1792;
pub const I2C_OAR2_OA2MASK07: u32 = 1792;
pub const I2C_OAR2_OA2EN_Pos: u32 = 15;
pub const I2C_OAR2_OA2EN_Msk: u32 = 32768;
pub const I2C_OAR2_OA2EN: u32 = 32768;
pub const I2C_TIMINGR_SCLL_Pos: u32 = 0;
pub const I2C_TIMINGR_SCLL_Msk: u32 = 255;
pub const I2C_TIMINGR_SCLL: u32 = 255;
pub const I2C_TIMINGR_SCLH_Pos: u32 = 8;
pub const I2C_TIMINGR_SCLH_Msk: u32 = 65280;
pub const I2C_TIMINGR_SCLH: u32 = 65280;
pub const I2C_TIMINGR_SDADEL_Pos: u32 = 16;
pub const I2C_TIMINGR_SDADEL_Msk: u32 = 983040;
pub const I2C_TIMINGR_SDADEL: u32 = 983040;
pub const I2C_TIMINGR_SCLDEL_Pos: u32 = 20;
pub const I2C_TIMINGR_SCLDEL_Msk: u32 = 15728640;
pub const I2C_TIMINGR_SCLDEL: u32 = 15728640;
pub const I2C_TIMINGR_PRESC_Pos: u32 = 28;
pub const I2C_TIMINGR_PRESC_Msk: u32 = 4026531840;
pub const I2C_TIMINGR_PRESC: u32 = 4026531840;
pub const I2C_TIMEOUTR_TIMEOUTA_Pos: u32 = 0;
pub const I2C_TIMEOUTR_TIMEOUTA_Msk: u32 = 4095;
pub const I2C_TIMEOUTR_TIMEOUTA: u32 = 4095;
pub const I2C_TIMEOUTR_TIDLE_Pos: u32 = 12;
pub const I2C_TIMEOUTR_TIDLE_Msk: u32 = 4096;
pub const I2C_TIMEOUTR_TIDLE: u32 = 4096;
pub const I2C_TIMEOUTR_TIMOUTEN_Pos: u32 = 15;
pub const I2C_TIMEOUTR_TIMOUTEN_Msk: u32 = 32768;
pub const I2C_TIMEOUTR_TIMOUTEN: u32 = 32768;
pub const I2C_TIMEOUTR_TIMEOUTB_Pos: u32 = 16;
pub const I2C_TIMEOUTR_TIMEOUTB_Msk: u32 = 268369920;
pub const I2C_TIMEOUTR_TIMEOUTB: u32 = 268369920;
pub const I2C_TIMEOUTR_TEXTEN_Pos: u32 = 31;
pub const I2C_TIMEOUTR_TEXTEN_Msk: u32 = 2147483648;
pub const I2C_TIMEOUTR_TEXTEN: u32 = 2147483648;
pub const I2C_ISR_TXE_Pos: u32 = 0;
pub const I2C_ISR_TXE_Msk: u32 = 1;
pub const I2C_ISR_TXE: u32 = 1;
pub const I2C_ISR_TXIS_Pos: u32 = 1;
pub const I2C_ISR_TXIS_Msk: u32 = 2;
pub const I2C_ISR_TXIS: u32 = 2;
pub const I2C_ISR_RXNE_Pos: u32 = 2;
pub const I2C_ISR_RXNE_Msk: u32 = 4;
pub const I2C_ISR_RXNE: u32 = 4;
pub const I2C_ISR_ADDR_Pos: u32 = 3;
pub const I2C_ISR_ADDR_Msk: u32 = 8;
pub const I2C_ISR_ADDR: u32 = 8;
pub const I2C_ISR_NACKF_Pos: u32 = 4;
pub const I2C_ISR_NACKF_Msk: u32 = 16;
pub const I2C_ISR_NACKF: u32 = 16;
pub const I2C_ISR_STOPF_Pos: u32 = 5;
pub const I2C_ISR_STOPF_Msk: u32 = 32;
pub const I2C_ISR_STOPF: u32 = 32;
pub const I2C_ISR_TC_Pos: u32 = 6;
pub const I2C_ISR_TC_Msk: u32 = 64;
pub const I2C_ISR_TC: u32 = 64;
pub const I2C_ISR_TCR_Pos: u32 = 7;
pub const I2C_ISR_TCR_Msk: u32 = 128;
pub const I2C_ISR_TCR: u32 = 128;
pub const I2C_ISR_BERR_Pos: u32 = 8;
pub const I2C_ISR_BERR_Msk: u32 = 256;
pub const I2C_ISR_BERR: u32 = 256;
pub const I2C_ISR_ARLO_Pos: u32 = 9;
pub const I2C_ISR_ARLO_Msk: u32 = 512;
pub const I2C_ISR_ARLO: u32 = 512;
pub const I2C_ISR_OVR_Pos: u32 = 10;
pub const I2C_ISR_OVR_Msk: u32 = 1024;
pub const I2C_ISR_OVR: u32 = 1024;
pub const I2C_ISR_PECERR_Pos: u32 = 11;
pub const I2C_ISR_PECERR_Msk: u32 = 2048;
pub const I2C_ISR_PECERR: u32 = 2048;
pub const I2C_ISR_TIMEOUT_Pos: u32 = 12;
pub const I2C_ISR_TIMEOUT_Msk: u32 = 4096;
pub const I2C_ISR_TIMEOUT: u32 = 4096;
pub const I2C_ISR_ALERT_Pos: u32 = 13;
pub const I2C_ISR_ALERT_Msk: u32 = 8192;
pub const I2C_ISR_ALERT: u32 = 8192;
pub const I2C_ISR_BUSY_Pos: u32 = 15;
pub const I2C_ISR_BUSY_Msk: u32 = 32768;
pub const I2C_ISR_BUSY: u32 = 32768;
pub const I2C_ISR_DIR_Pos: u32 = 16;
pub const I2C_ISR_DIR_Msk: u32 = 65536;
pub const I2C_ISR_DIR: u32 = 65536;
pub const I2C_ISR_ADDCODE_Pos: u32 = 17;
pub const I2C_ISR_ADDCODE_Msk: u32 = 16646144;
pub const I2C_ISR_ADDCODE: u32 = 16646144;
pub const I2C_ICR_ADDRCF_Pos: u32 = 3;
pub const I2C_ICR_ADDRCF_Msk: u32 = 8;
pub const I2C_ICR_ADDRCF: u32 = 8;
pub const I2C_ICR_NACKCF_Pos: u32 = 4;
pub const I2C_ICR_NACKCF_Msk: u32 = 16;
pub const I2C_ICR_NACKCF: u32 = 16;
pub const I2C_ICR_STOPCF_Pos: u32 = 5;
pub const I2C_ICR_STOPCF_Msk: u32 = 32;
pub const I2C_ICR_STOPCF: u32 = 32;
pub const I2C_ICR_BERRCF_Pos: u32 = 8;
pub const I2C_ICR_BERRCF_Msk: u32 = 256;
pub const I2C_ICR_BERRCF: u32 = 256;
pub const I2C_ICR_ARLOCF_Pos: u32 = 9;
pub const I2C_ICR_ARLOCF_Msk: u32 = 512;
pub const I2C_ICR_ARLOCF: u32 = 512;
pub const I2C_ICR_OVRCF_Pos: u32 = 10;
pub const I2C_ICR_OVRCF_Msk: u32 = 1024;
pub const I2C_ICR_OVRCF: u32 = 1024;
pub const I2C_ICR_PECCF_Pos: u32 = 11;
pub const I2C_ICR_PECCF_Msk: u32 = 2048;
pub const I2C_ICR_PECCF: u32 = 2048;
pub const I2C_ICR_TIMOUTCF_Pos: u32 = 12;
pub const I2C_ICR_TIMOUTCF_Msk: u32 = 4096;
pub const I2C_ICR_TIMOUTCF: u32 = 4096;
pub const I2C_ICR_ALERTCF_Pos: u32 = 13;
pub const I2C_ICR_ALERTCF_Msk: u32 = 8192;
pub const I2C_ICR_ALERTCF: u32 = 8192;
pub const I2C_PECR_PEC_Pos: u32 = 0;
pub const I2C_PECR_PEC_Msk: u32 = 255;
pub const I2C_PECR_PEC: u32 = 255;
pub const I2C_RXDR_RXDATA_Pos: u32 = 0;
pub const I2C_RXDR_RXDATA_Msk: u32 = 255;
pub const I2C_RXDR_RXDATA: u32 = 255;
pub const I2C_TXDR_TXDATA_Pos: u32 = 0;
pub const I2C_TXDR_TXDATA_Msk: u32 = 255;
pub const I2C_TXDR_TXDATA: u32 = 255;
pub const IWDG_KR_KEY_Pos: u32 = 0;
pub const IWDG_KR_KEY_Msk: u32 = 65535;
pub const IWDG_KR_KEY: u32 = 65535;
pub const IWDG_PR_PR_Pos: u32 = 0;
pub const IWDG_PR_PR_Msk: u32 = 7;
pub const IWDG_PR_PR: u32 = 7;
pub const IWDG_PR_PR_0: u32 = 1;
pub const IWDG_PR_PR_1: u32 = 2;
pub const IWDG_PR_PR_2: u32 = 4;
pub const IWDG_RLR_RL_Pos: u32 = 0;
pub const IWDG_RLR_RL_Msk: u32 = 4095;
pub const IWDG_RLR_RL: u32 = 4095;
pub const IWDG_SR_PVU_Pos: u32 = 0;
pub const IWDG_SR_PVU_Msk: u32 = 1;
pub const IWDG_SR_PVU: u32 = 1;
pub const IWDG_SR_RVU_Pos: u32 = 1;
pub const IWDG_SR_RVU_Msk: u32 = 2;
pub const IWDG_SR_RVU: u32 = 2;
pub const IWDG_SR_WVU_Pos: u32 = 2;
pub const IWDG_SR_WVU_Msk: u32 = 4;
pub const IWDG_SR_WVU: u32 = 4;
pub const IWDG_WINR_WIN_Pos: u32 = 0;
pub const IWDG_WINR_WIN_Msk: u32 = 4095;
pub const IWDG_WINR_WIN: u32 = 4095;
pub const OPAMP_CSR_OPAMPxEN_Pos: u32 = 0;
pub const OPAMP_CSR_OPAMPxEN_Msk: u32 = 1;
pub const OPAMP_CSR_OPAMPxEN: u32 = 1;
pub const OPAMP_CSR_FORCEVP_Pos: u32 = 1;
pub const OPAMP_CSR_FORCEVP_Msk: u32 = 2;
pub const OPAMP_CSR_FORCEVP: u32 = 2;
pub const OPAMP_CSR_VPSEL_Pos: u32 = 2;
pub const OPAMP_CSR_VPSEL_Msk: u32 = 12;
pub const OPAMP_CSR_VPSEL: u32 = 12;
pub const OPAMP_CSR_VPSEL_0: u32 = 4;
pub const OPAMP_CSR_VPSEL_1: u32 = 8;
pub const OPAMP_CSR_USERTRIM_Pos: u32 = 4;
pub const OPAMP_CSR_USERTRIM_Msk: u32 = 16;
pub const OPAMP_CSR_USERTRIM: u32 = 16;
pub const OPAMP_CSR_VMSEL_Pos: u32 = 5;
pub const OPAMP_CSR_VMSEL_Msk: u32 = 96;
pub const OPAMP_CSR_VMSEL: u32 = 96;
pub const OPAMP_CSR_VMSEL_0: u32 = 32;
pub const OPAMP_CSR_VMSEL_1: u32 = 64;
pub const OPAMP_CSR_HIGHSPEEDEN_Pos: u32 = 7;
pub const OPAMP_CSR_HIGHSPEEDEN_Msk: u32 = 128;
pub const OPAMP_CSR_HIGHSPEEDEN: u32 = 128;
pub const OPAMP_CSR_OPAMPINTEN_Pos: u32 = 8;
pub const OPAMP_CSR_OPAMPINTEN_Msk: u32 = 256;
pub const OPAMP_CSR_OPAMPINTEN: u32 = 256;
pub const OPAMP_CSR_CALON_Pos: u32 = 11;
pub const OPAMP_CSR_CALON_Msk: u32 = 2048;
pub const OPAMP_CSR_CALON: u32 = 2048;
pub const OPAMP_CSR_CALSEL_Pos: u32 = 12;
pub const OPAMP_CSR_CALSEL_Msk: u32 = 12288;
pub const OPAMP_CSR_CALSEL: u32 = 12288;
pub const OPAMP_CSR_CALSEL_0: u32 = 4096;
pub const OPAMP_CSR_CALSEL_1: u32 = 8192;
pub const OPAMP_CSR_PGGAIN_Pos: u32 = 14;
pub const OPAMP_CSR_PGGAIN_Msk: u32 = 507904;
pub const OPAMP_CSR_PGGAIN: u32 = 507904;
pub const OPAMP_CSR_PGGAIN_0: u32 = 16384;
pub const OPAMP_CSR_PGGAIN_1: u32 = 32768;
pub const OPAMP_CSR_PGGAIN_2: u32 = 65536;
pub const OPAMP_CSR_PGGAIN_3: u32 = 131072;
pub const OPAMP_CSR_PGGAIN_4: u32 = 262144;
pub const OPAMP_CSR_TRIMOFFSETP_Pos: u32 = 19;
pub const OPAMP_CSR_TRIMOFFSETP_Msk: u32 = 16252928;
pub const OPAMP_CSR_TRIMOFFSETP: u32 = 16252928;
pub const OPAMP_CSR_TRIMOFFSETN_Pos: u32 = 24;
pub const OPAMP_CSR_TRIMOFFSETN_Msk: u32 = 520093696;
pub const OPAMP_CSR_TRIMOFFSETN: u32 = 520093696;
pub const OPAMP_CSR_OUTCAL_Pos: u32 = 30;
pub const OPAMP_CSR_OUTCAL_Msk: u32 = 1073741824;
pub const OPAMP_CSR_OUTCAL: u32 = 1073741824;
pub const OPAMP_CSR_LOCK_Pos: u32 = 31;
pub const OPAMP_CSR_LOCK_Msk: u32 = 2147483648;
pub const OPAMP_CSR_LOCK: u32 = 2147483648;
pub const OPAMP_TCMR_VMSSEL_Pos: u32 = 0;
pub const OPAMP_TCMR_VMSSEL_Msk: u32 = 1;
pub const OPAMP_TCMR_VMSSEL: u32 = 1;
pub const OPAMP_TCMR_VPSSEL_Pos: u32 = 1;
pub const OPAMP_TCMR_VPSSEL_Msk: u32 = 6;
pub const OPAMP_TCMR_VPSSEL: u32 = 6;
pub const OPAMP_TCMR_VPSSEL_0: u32 = 2;
pub const OPAMP_TCMR_VPSSEL_1: u32 = 4;
pub const OPAMP_TCMR_T1CMEN_Pos: u32 = 3;
pub const OPAMP_TCMR_T1CMEN_Msk: u32 = 8;
pub const OPAMP_TCMR_T1CMEN: u32 = 8;
pub const OPAMP_TCMR_T8CMEN_Pos: u32 = 4;
pub const OPAMP_TCMR_T8CMEN_Msk: u32 = 16;
pub const OPAMP_TCMR_T8CMEN: u32 = 16;
pub const OPAMP_TCMR_T20CMEN_Pos: u32 = 5;
pub const OPAMP_TCMR_T20CMEN_Msk: u32 = 32;
pub const OPAMP_TCMR_T20CMEN: u32 = 32;
pub const OPAMP_TCMR_LOCK_Pos: u32 = 31;
pub const OPAMP_TCMR_LOCK_Msk: u32 = 2147483648;
pub const OPAMP_TCMR_LOCK: u32 = 2147483648;
pub const PWR_CR1_LPR_Pos: u32 = 14;
pub const PWR_CR1_LPR_Msk: u32 = 16384;
pub const PWR_CR1_LPR: u32 = 16384;
pub const PWR_CR1_VOS_Pos: u32 = 9;
pub const PWR_CR1_VOS_Msk: u32 = 1536;
pub const PWR_CR1_VOS: u32 = 1536;
pub const PWR_CR1_VOS_0: u32 = 512;
pub const PWR_CR1_VOS_1: u32 = 1024;
pub const PWR_CR1_DBP_Pos: u32 = 8;
pub const PWR_CR1_DBP_Msk: u32 = 256;
pub const PWR_CR1_DBP: u32 = 256;
pub const PWR_CR1_LPMS_Pos: u32 = 0;
pub const PWR_CR1_LPMS_Msk: u32 = 7;
pub const PWR_CR1_LPMS: u32 = 7;
pub const PWR_CR1_LPMS_STOP0: u32 = 0;
pub const PWR_CR1_LPMS_STOP1_Pos: u32 = 0;
pub const PWR_CR1_LPMS_STOP1_Msk: u32 = 1;
pub const PWR_CR1_LPMS_STOP1: u32 = 1;
pub const PWR_CR1_LPMS_STANDBY_Pos: u32 = 0;
pub const PWR_CR1_LPMS_STANDBY_Msk: u32 = 3;
pub const PWR_CR1_LPMS_STANDBY: u32 = 3;
pub const PWR_CR1_LPMS_SHUTDOWN_Pos: u32 = 2;
pub const PWR_CR1_LPMS_SHUTDOWN_Msk: u32 = 4;
pub const PWR_CR1_LPMS_SHUTDOWN: u32 = 4;
pub const PWR_CR2_PVME_Pos: u32 = 4;
pub const PWR_CR2_PVME_Msk: u32 = 240;
pub const PWR_CR2_PVME: u32 = 240;
pub const PWR_CR2_PVME4_Pos: u32 = 7;
pub const PWR_CR2_PVME4_Msk: u32 = 128;
pub const PWR_CR2_PVME4: u32 = 128;
pub const PWR_CR2_PVME3_Pos: u32 = 6;
pub const PWR_CR2_PVME3_Msk: u32 = 64;
pub const PWR_CR2_PVME3: u32 = 64;
pub const PWR_CR2_PVME2_Pos: u32 = 5;
pub const PWR_CR2_PVME2_Msk: u32 = 32;
pub const PWR_CR2_PVME2: u32 = 32;
pub const PWR_CR2_PVME1_Pos: u32 = 4;
pub const PWR_CR2_PVME1_Msk: u32 = 16;
pub const PWR_CR2_PVME1: u32 = 16;
pub const PWR_CR2_PLS_Pos: u32 = 1;
pub const PWR_CR2_PLS_Msk: u32 = 14;
pub const PWR_CR2_PLS: u32 = 14;
pub const PWR_CR2_PLS_LEV0: u32 = 0;
pub const PWR_CR2_PLS_LEV1_Pos: u32 = 1;
pub const PWR_CR2_PLS_LEV1_Msk: u32 = 2;
pub const PWR_CR2_PLS_LEV1: u32 = 2;
pub const PWR_CR2_PLS_LEV2_Pos: u32 = 2;
pub const PWR_CR2_PLS_LEV2_Msk: u32 = 4;
pub const PWR_CR2_PLS_LEV2: u32 = 4;
pub const PWR_CR2_PLS_LEV3_Pos: u32 = 1;
pub const PWR_CR2_PLS_LEV3_Msk: u32 = 6;
pub const PWR_CR2_PLS_LEV3: u32 = 6;
pub const PWR_CR2_PLS_LEV4_Pos: u32 = 3;
pub const PWR_CR2_PLS_LEV4_Msk: u32 = 8;
pub const PWR_CR2_PLS_LEV4: u32 = 8;
pub const PWR_CR2_PLS_LEV5_Pos: u32 = 1;
pub const PWR_CR2_PLS_LEV5_Msk: u32 = 10;
pub const PWR_CR2_PLS_LEV5: u32 = 10;
pub const PWR_CR2_PLS_LEV6_Pos: u32 = 2;
pub const PWR_CR2_PLS_LEV6_Msk: u32 = 12;
pub const PWR_CR2_PLS_LEV6: u32 = 12;
pub const PWR_CR2_PLS_LEV7_Pos: u32 = 1;
pub const PWR_CR2_PLS_LEV7_Msk: u32 = 14;
pub const PWR_CR2_PLS_LEV7: u32 = 14;
pub const PWR_CR2_PVDE_Pos: u32 = 0;
pub const PWR_CR2_PVDE_Msk: u32 = 1;
pub const PWR_CR2_PVDE: u32 = 1;
pub const PWR_CR3_EIWF_Pos: u32 = 15;
pub const PWR_CR3_EIWF_Msk: u32 = 32768;
pub const PWR_CR3_EIWF: u32 = 32768;
pub const PWR_CR3_UCPD_DBDIS_Pos: u32 = 14;
pub const PWR_CR3_UCPD_DBDIS_Msk: u32 = 16384;
pub const PWR_CR3_UCPD_DBDIS: u32 = 16384;
pub const PWR_CR3_UCPD_STDBY_Pos: u32 = 13;
pub const PWR_CR3_UCPD_STDBY_Msk: u32 = 8192;
pub const PWR_CR3_UCPD_STDBY: u32 = 8192;
pub const PWR_CR3_APC_Pos: u32 = 10;
pub const PWR_CR3_APC_Msk: u32 = 1024;
pub const PWR_CR3_APC: u32 = 1024;
pub const PWR_CR3_RRS_Pos: u32 = 8;
pub const PWR_CR3_RRS_Msk: u32 = 256;
pub const PWR_CR3_RRS: u32 = 256;
pub const PWR_CR3_EWUP5_Pos: u32 = 4;
pub const PWR_CR3_EWUP5_Msk: u32 = 16;
pub const PWR_CR3_EWUP5: u32 = 16;
pub const PWR_CR3_EWUP4_Pos: u32 = 3;
pub const PWR_CR3_EWUP4_Msk: u32 = 8;
pub const PWR_CR3_EWUP4: u32 = 8;
pub const PWR_CR3_EWUP3_Pos: u32 = 2;
pub const PWR_CR3_EWUP3_Msk: u32 = 4;
pub const PWR_CR3_EWUP3: u32 = 4;
pub const PWR_CR3_EWUP2_Pos: u32 = 1;
pub const PWR_CR3_EWUP2_Msk: u32 = 2;
pub const PWR_CR3_EWUP2: u32 = 2;
pub const PWR_CR3_EWUP1_Pos: u32 = 0;
pub const PWR_CR3_EWUP1_Msk: u32 = 1;
pub const PWR_CR3_EWUP1: u32 = 1;
pub const PWR_CR3_EWUP_Pos: u32 = 0;
pub const PWR_CR3_EWUP_Msk: u32 = 31;
pub const PWR_CR3_EWUP: u32 = 31;
pub const PWR_CR4_VBRS_Pos: u32 = 9;
pub const PWR_CR4_VBRS_Msk: u32 = 512;
pub const PWR_CR4_VBRS: u32 = 512;
pub const PWR_CR4_VBE_Pos: u32 = 8;
pub const PWR_CR4_VBE_Msk: u32 = 256;
pub const PWR_CR4_VBE: u32 = 256;
pub const PWR_CR4_WP5_Pos: u32 = 4;
pub const PWR_CR4_WP5_Msk: u32 = 16;
pub const PWR_CR4_WP5: u32 = 16;
pub const PWR_CR4_WP4_Pos: u32 = 3;
pub const PWR_CR4_WP4_Msk: u32 = 8;
pub const PWR_CR4_WP4: u32 = 8;
pub const PWR_CR4_WP3_Pos: u32 = 2;
pub const PWR_CR4_WP3_Msk: u32 = 4;
pub const PWR_CR4_WP3: u32 = 4;
pub const PWR_CR4_WP2_Pos: u32 = 1;
pub const PWR_CR4_WP2_Msk: u32 = 2;
pub const PWR_CR4_WP2: u32 = 2;
pub const PWR_CR4_WP1_Pos: u32 = 0;
pub const PWR_CR4_WP1_Msk: u32 = 1;
pub const PWR_CR4_WP1: u32 = 1;
pub const PWR_SR1_WUFI_Pos: u32 = 15;
pub const PWR_SR1_WUFI_Msk: u32 = 32768;
pub const PWR_SR1_WUFI: u32 = 32768;
pub const PWR_SR1_SBF_Pos: u32 = 8;
pub const PWR_SR1_SBF_Msk: u32 = 256;
pub const PWR_SR1_SBF: u32 = 256;
pub const PWR_SR1_WUF_Pos: u32 = 0;
pub const PWR_SR1_WUF_Msk: u32 = 31;
pub const PWR_SR1_WUF: u32 = 31;
pub const PWR_SR1_WUF5_Pos: u32 = 4;
pub const PWR_SR1_WUF5_Msk: u32 = 16;
pub const PWR_SR1_WUF5: u32 = 16;
pub const PWR_SR1_WUF4_Pos: u32 = 3;
pub const PWR_SR1_WUF4_Msk: u32 = 8;
pub const PWR_SR1_WUF4: u32 = 8;
pub const PWR_SR1_WUF3_Pos: u32 = 2;
pub const PWR_SR1_WUF3_Msk: u32 = 4;
pub const PWR_SR1_WUF3: u32 = 4;
pub const PWR_SR1_WUF2_Pos: u32 = 1;
pub const PWR_SR1_WUF2_Msk: u32 = 2;
pub const PWR_SR1_WUF2: u32 = 2;
pub const PWR_SR1_WUF1_Pos: u32 = 0;
pub const PWR_SR1_WUF1_Msk: u32 = 1;
pub const PWR_SR1_WUF1: u32 = 1;
pub const PWR_SR2_PVMO4_Pos: u32 = 15;
pub const PWR_SR2_PVMO4_Msk: u32 = 32768;
pub const PWR_SR2_PVMO4: u32 = 32768;
pub const PWR_SR2_PVMO3_Pos: u32 = 14;
pub const PWR_SR2_PVMO3_Msk: u32 = 16384;
pub const PWR_SR2_PVMO3: u32 = 16384;
pub const PWR_SR2_PVMO2_Pos: u32 = 13;
pub const PWR_SR2_PVMO2_Msk: u32 = 8192;
pub const PWR_SR2_PVMO2: u32 = 8192;
pub const PWR_SR2_PVMO1_Pos: u32 = 12;
pub const PWR_SR2_PVMO1_Msk: u32 = 4096;
pub const PWR_SR2_PVMO1: u32 = 4096;
pub const PWR_SR2_PVDO_Pos: u32 = 11;
pub const PWR_SR2_PVDO_Msk: u32 = 2048;
pub const PWR_SR2_PVDO: u32 = 2048;
pub const PWR_SR2_VOSF_Pos: u32 = 10;
pub const PWR_SR2_VOSF_Msk: u32 = 1024;
pub const PWR_SR2_VOSF: u32 = 1024;
pub const PWR_SR2_REGLPF_Pos: u32 = 9;
pub const PWR_SR2_REGLPF_Msk: u32 = 512;
pub const PWR_SR2_REGLPF: u32 = 512;
pub const PWR_SR2_REGLPS_Pos: u32 = 8;
pub const PWR_SR2_REGLPS_Msk: u32 = 256;
pub const PWR_SR2_REGLPS: u32 = 256;
pub const PWR_SCR_CSBF_Pos: u32 = 8;
pub const PWR_SCR_CSBF_Msk: u32 = 256;
pub const PWR_SCR_CSBF: u32 = 256;
pub const PWR_SCR_CWUF_Pos: u32 = 0;
pub const PWR_SCR_CWUF_Msk: u32 = 31;
pub const PWR_SCR_CWUF: u32 = 31;
pub const PWR_SCR_CWUF5_Pos: u32 = 4;
pub const PWR_SCR_CWUF5_Msk: u32 = 16;
pub const PWR_SCR_CWUF5: u32 = 16;
pub const PWR_SCR_CWUF4_Pos: u32 = 3;
pub const PWR_SCR_CWUF4_Msk: u32 = 8;
pub const PWR_SCR_CWUF4: u32 = 8;
pub const PWR_SCR_CWUF3_Pos: u32 = 2;
pub const PWR_SCR_CWUF3_Msk: u32 = 4;
pub const PWR_SCR_CWUF3: u32 = 4;
pub const PWR_SCR_CWUF2_Pos: u32 = 1;
pub const PWR_SCR_CWUF2_Msk: u32 = 2;
pub const PWR_SCR_CWUF2: u32 = 2;
pub const PWR_SCR_CWUF1_Pos: u32 = 0;
pub const PWR_SCR_CWUF1_Msk: u32 = 1;
pub const PWR_SCR_CWUF1: u32 = 1;
pub const PWR_PUCRA_PA15_Pos: u32 = 15;
pub const PWR_PUCRA_PA15_Msk: u32 = 32768;
pub const PWR_PUCRA_PA15: u32 = 32768;
pub const PWR_PUCRA_PA13_Pos: u32 = 13;
pub const PWR_PUCRA_PA13_Msk: u32 = 8192;
pub const PWR_PUCRA_PA13: u32 = 8192;
pub const PWR_PUCRA_PA12_Pos: u32 = 12;
pub const PWR_PUCRA_PA12_Msk: u32 = 4096;
pub const PWR_PUCRA_PA12: u32 = 4096;
pub const PWR_PUCRA_PA11_Pos: u32 = 11;
pub const PWR_PUCRA_PA11_Msk: u32 = 2048;
pub const PWR_PUCRA_PA11: u32 = 2048;
pub const PWR_PUCRA_PA10_Pos: u32 = 10;
pub const PWR_PUCRA_PA10_Msk: u32 = 1024;
pub const PWR_PUCRA_PA10: u32 = 1024;
pub const PWR_PUCRA_PA9_Pos: u32 = 9;
pub const PWR_PUCRA_PA9_Msk: u32 = 512;
pub const PWR_PUCRA_PA9: u32 = 512;
pub const PWR_PUCRA_PA8_Pos: u32 = 8;
pub const PWR_PUCRA_PA8_Msk: u32 = 256;
pub const PWR_PUCRA_PA8: u32 = 256;
pub const PWR_PUCRA_PA7_Pos: u32 = 7;
pub const PWR_PUCRA_PA7_Msk: u32 = 128;
pub const PWR_PUCRA_PA7: u32 = 128;
pub const PWR_PUCRA_PA6_Pos: u32 = 6;
pub const PWR_PUCRA_PA6_Msk: u32 = 64;
pub const PWR_PUCRA_PA6: u32 = 64;
pub const PWR_PUCRA_PA5_Pos: u32 = 5;
pub const PWR_PUCRA_PA5_Msk: u32 = 32;
pub const PWR_PUCRA_PA5: u32 = 32;
pub const PWR_PUCRA_PA4_Pos: u32 = 4;
pub const PWR_PUCRA_PA4_Msk: u32 = 16;
pub const PWR_PUCRA_PA4: u32 = 16;
pub const PWR_PUCRA_PA3_Pos: u32 = 3;
pub const PWR_PUCRA_PA3_Msk: u32 = 8;
pub const PWR_PUCRA_PA3: u32 = 8;
pub const PWR_PUCRA_PA2_Pos: u32 = 2;
pub const PWR_PUCRA_PA2_Msk: u32 = 4;
pub const PWR_PUCRA_PA2: u32 = 4;
pub const PWR_PUCRA_PA1_Pos: u32 = 1;
pub const PWR_PUCRA_PA1_Msk: u32 = 2;
pub const PWR_PUCRA_PA1: u32 = 2;
pub const PWR_PUCRA_PA0_Pos: u32 = 0;
pub const PWR_PUCRA_PA0_Msk: u32 = 1;
pub const PWR_PUCRA_PA0: u32 = 1;
pub const PWR_PDCRA_PA14_Pos: u32 = 14;
pub const PWR_PDCRA_PA14_Msk: u32 = 16384;
pub const PWR_PDCRA_PA14: u32 = 16384;
pub const PWR_PDCRA_PA12_Pos: u32 = 12;
pub const PWR_PDCRA_PA12_Msk: u32 = 4096;
pub const PWR_PDCRA_PA12: u32 = 4096;
pub const PWR_PDCRA_PA11_Pos: u32 = 11;
pub const PWR_PDCRA_PA11_Msk: u32 = 2048;
pub const PWR_PDCRA_PA11: u32 = 2048;
pub const PWR_PDCRA_PA10_Pos: u32 = 10;
pub const PWR_PDCRA_PA10_Msk: u32 = 1024;
pub const PWR_PDCRA_PA10: u32 = 1024;
pub const PWR_PDCRA_PA9_Pos: u32 = 9;
pub const PWR_PDCRA_PA9_Msk: u32 = 512;
pub const PWR_PDCRA_PA9: u32 = 512;
pub const PWR_PDCRA_PA8_Pos: u32 = 8;
pub const PWR_PDCRA_PA8_Msk: u32 = 256;
pub const PWR_PDCRA_PA8: u32 = 256;
pub const PWR_PDCRA_PA7_Pos: u32 = 7;
pub const PWR_PDCRA_PA7_Msk: u32 = 128;
pub const PWR_PDCRA_PA7: u32 = 128;
pub const PWR_PDCRA_PA6_Pos: u32 = 6;
pub const PWR_PDCRA_PA6_Msk: u32 = 64;
pub const PWR_PDCRA_PA6: u32 = 64;
pub const PWR_PDCRA_PA5_Pos: u32 = 5;
pub const PWR_PDCRA_PA5_Msk: u32 = 32;
pub const PWR_PDCRA_PA5: u32 = 32;
pub const PWR_PDCRA_PA4_Pos: u32 = 4;
pub const PWR_PDCRA_PA4_Msk: u32 = 16;
pub const PWR_PDCRA_PA4: u32 = 16;
pub const PWR_PDCRA_PA3_Pos: u32 = 3;
pub const PWR_PDCRA_PA3_Msk: u32 = 8;
pub const PWR_PDCRA_PA3: u32 = 8;
pub const PWR_PDCRA_PA2_Pos: u32 = 2;
pub const PWR_PDCRA_PA2_Msk: u32 = 4;
pub const PWR_PDCRA_PA2: u32 = 4;
pub const PWR_PDCRA_PA1_Pos: u32 = 1;
pub const PWR_PDCRA_PA1_Msk: u32 = 2;
pub const PWR_PDCRA_PA1: u32 = 2;
pub const PWR_PDCRA_PA0_Pos: u32 = 0;
pub const PWR_PDCRA_PA0_Msk: u32 = 1;
pub const PWR_PDCRA_PA0: u32 = 1;
pub const PWR_PUCRB_PB15_Pos: u32 = 15;
pub const PWR_PUCRB_PB15_Msk: u32 = 32768;
pub const PWR_PUCRB_PB15: u32 = 32768;
pub const PWR_PUCRB_PB14_Pos: u32 = 14;
pub const PWR_PUCRB_PB14_Msk: u32 = 16384;
pub const PWR_PUCRB_PB14: u32 = 16384;
pub const PWR_PUCRB_PB13_Pos: u32 = 13;
pub const PWR_PUCRB_PB13_Msk: u32 = 8192;
pub const PWR_PUCRB_PB13: u32 = 8192;
pub const PWR_PUCRB_PB12_Pos: u32 = 12;
pub const PWR_PUCRB_PB12_Msk: u32 = 4096;
pub const PWR_PUCRB_PB12: u32 = 4096;
pub const PWR_PUCRB_PB11_Pos: u32 = 11;
pub const PWR_PUCRB_PB11_Msk: u32 = 2048;
pub const PWR_PUCRB_PB11: u32 = 2048;
pub const PWR_PUCRB_PB10_Pos: u32 = 10;
pub const PWR_PUCRB_PB10_Msk: u32 = 1024;
pub const PWR_PUCRB_PB10: u32 = 1024;
pub const PWR_PUCRB_PB9_Pos: u32 = 9;
pub const PWR_PUCRB_PB9_Msk: u32 = 512;
pub const PWR_PUCRB_PB9: u32 = 512;
pub const PWR_PUCRB_PB8_Pos: u32 = 8;
pub const PWR_PUCRB_PB8_Msk: u32 = 256;
pub const PWR_PUCRB_PB8: u32 = 256;
pub const PWR_PUCRB_PB7_Pos: u32 = 7;
pub const PWR_PUCRB_PB7_Msk: u32 = 128;
pub const PWR_PUCRB_PB7: u32 = 128;
pub const PWR_PUCRB_PB6_Pos: u32 = 6;
pub const PWR_PUCRB_PB6_Msk: u32 = 64;
pub const PWR_PUCRB_PB6: u32 = 64;
pub const PWR_PUCRB_PB5_Pos: u32 = 5;
pub const PWR_PUCRB_PB5_Msk: u32 = 32;
pub const PWR_PUCRB_PB5: u32 = 32;
pub const PWR_PUCRB_PB4_Pos: u32 = 4;
pub const PWR_PUCRB_PB4_Msk: u32 = 16;
pub const PWR_PUCRB_PB4: u32 = 16;
pub const PWR_PUCRB_PB3_Pos: u32 = 3;
pub const PWR_PUCRB_PB3_Msk: u32 = 8;
pub const PWR_PUCRB_PB3: u32 = 8;
pub const PWR_PUCRB_PB2_Pos: u32 = 2;
pub const PWR_PUCRB_PB2_Msk: u32 = 4;
pub const PWR_PUCRB_PB2: u32 = 4;
pub const PWR_PUCRB_PB1_Pos: u32 = 1;
pub const PWR_PUCRB_PB1_Msk: u32 = 2;
pub const PWR_PUCRB_PB1: u32 = 2;
pub const PWR_PUCRB_PB0_Pos: u32 = 0;
pub const PWR_PUCRB_PB0_Msk: u32 = 1;
pub const PWR_PUCRB_PB0: u32 = 1;
pub const PWR_PDCRB_PB15_Pos: u32 = 15;
pub const PWR_PDCRB_PB15_Msk: u32 = 32768;
pub const PWR_PDCRB_PB15: u32 = 32768;
pub const PWR_PDCRB_PB14_Pos: u32 = 14;
pub const PWR_PDCRB_PB14_Msk: u32 = 16384;
pub const PWR_PDCRB_PB14: u32 = 16384;
pub const PWR_PDCRB_PB13_Pos: u32 = 13;
pub const PWR_PDCRB_PB13_Msk: u32 = 8192;
pub const PWR_PDCRB_PB13: u32 = 8192;
pub const PWR_PDCRB_PB12_Pos: u32 = 12;
pub const PWR_PDCRB_PB12_Msk: u32 = 4096;
pub const PWR_PDCRB_PB12: u32 = 4096;
pub const PWR_PDCRB_PB11_Pos: u32 = 11;
pub const PWR_PDCRB_PB11_Msk: u32 = 2048;
pub const PWR_PDCRB_PB11: u32 = 2048;
pub const PWR_PDCRB_PB10_Pos: u32 = 10;
pub const PWR_PDCRB_PB10_Msk: u32 = 1024;
pub const PWR_PDCRB_PB10: u32 = 1024;
pub const PWR_PDCRB_PB9_Pos: u32 = 9;
pub const PWR_PDCRB_PB9_Msk: u32 = 512;
pub const PWR_PDCRB_PB9: u32 = 512;
pub const PWR_PDCRB_PB8_Pos: u32 = 8;
pub const PWR_PDCRB_PB8_Msk: u32 = 256;
pub const PWR_PDCRB_PB8: u32 = 256;
pub const PWR_PDCRB_PB7_Pos: u32 = 7;
pub const PWR_PDCRB_PB7_Msk: u32 = 128;
pub const PWR_PDCRB_PB7: u32 = 128;
pub const PWR_PDCRB_PB6_Pos: u32 = 6;
pub const PWR_PDCRB_PB6_Msk: u32 = 64;
pub const PWR_PDCRB_PB6: u32 = 64;
pub const PWR_PDCRB_PB5_Pos: u32 = 5;
pub const PWR_PDCRB_PB5_Msk: u32 = 32;
pub const PWR_PDCRB_PB5: u32 = 32;
pub const PWR_PDCRB_PB3_Pos: u32 = 3;
pub const PWR_PDCRB_PB3_Msk: u32 = 8;
pub const PWR_PDCRB_PB3: u32 = 8;
pub const PWR_PDCRB_PB2_Pos: u32 = 2;
pub const PWR_PDCRB_PB2_Msk: u32 = 4;
pub const PWR_PDCRB_PB2: u32 = 4;
pub const PWR_PDCRB_PB1_Pos: u32 = 1;
pub const PWR_PDCRB_PB1_Msk: u32 = 2;
pub const PWR_PDCRB_PB1: u32 = 2;
pub const PWR_PDCRB_PB0_Pos: u32 = 0;
pub const PWR_PDCRB_PB0_Msk: u32 = 1;
pub const PWR_PDCRB_PB0: u32 = 1;
pub const PWR_PUCRC_PC15_Pos: u32 = 15;
pub const PWR_PUCRC_PC15_Msk: u32 = 32768;
pub const PWR_PUCRC_PC15: u32 = 32768;
pub const PWR_PUCRC_PC14_Pos: u32 = 14;
pub const PWR_PUCRC_PC14_Msk: u32 = 16384;
pub const PWR_PUCRC_PC14: u32 = 16384;
pub const PWR_PUCRC_PC13_Pos: u32 = 13;
pub const PWR_PUCRC_PC13_Msk: u32 = 8192;
pub const PWR_PUCRC_PC13: u32 = 8192;
pub const PWR_PUCRC_PC12_Pos: u32 = 12;
pub const PWR_PUCRC_PC12_Msk: u32 = 4096;
pub const PWR_PUCRC_PC12: u32 = 4096;
pub const PWR_PUCRC_PC11_Pos: u32 = 11;
pub const PWR_PUCRC_PC11_Msk: u32 = 2048;
pub const PWR_PUCRC_PC11: u32 = 2048;
pub const PWR_PUCRC_PC10_Pos: u32 = 10;
pub const PWR_PUCRC_PC10_Msk: u32 = 1024;
pub const PWR_PUCRC_PC10: u32 = 1024;
pub const PWR_PUCRC_PC9_Pos: u32 = 9;
pub const PWR_PUCRC_PC9_Msk: u32 = 512;
pub const PWR_PUCRC_PC9: u32 = 512;
pub const PWR_PUCRC_PC8_Pos: u32 = 8;
pub const PWR_PUCRC_PC8_Msk: u32 = 256;
pub const PWR_PUCRC_PC8: u32 = 256;
pub const PWR_PUCRC_PC7_Pos: u32 = 7;
pub const PWR_PUCRC_PC7_Msk: u32 = 128;
pub const PWR_PUCRC_PC7: u32 = 128;
pub const PWR_PUCRC_PC6_Pos: u32 = 6;
pub const PWR_PUCRC_PC6_Msk: u32 = 64;
pub const PWR_PUCRC_PC6: u32 = 64;
pub const PWR_PUCRC_PC5_Pos: u32 = 5;
pub const PWR_PUCRC_PC5_Msk: u32 = 32;
pub const PWR_PUCRC_PC5: u32 = 32;
pub const PWR_PUCRC_PC4_Pos: u32 = 4;
pub const PWR_PUCRC_PC4_Msk: u32 = 16;
pub const PWR_PUCRC_PC4: u32 = 16;
pub const PWR_PUCRC_PC3_Pos: u32 = 3;
pub const PWR_PUCRC_PC3_Msk: u32 = 8;
pub const PWR_PUCRC_PC3: u32 = 8;
pub const PWR_PUCRC_PC2_Pos: u32 = 2;
pub const PWR_PUCRC_PC2_Msk: u32 = 4;
pub const PWR_PUCRC_PC2: u32 = 4;
pub const PWR_PUCRC_PC1_Pos: u32 = 1;
pub const PWR_PUCRC_PC1_Msk: u32 = 2;
pub const PWR_PUCRC_PC1: u32 = 2;
pub const PWR_PUCRC_PC0_Pos: u32 = 0;
pub const PWR_PUCRC_PC0_Msk: u32 = 1;
pub const PWR_PUCRC_PC0: u32 = 1;
pub const PWR_PDCRC_PC15_Pos: u32 = 15;
pub const PWR_PDCRC_PC15_Msk: u32 = 32768;
pub const PWR_PDCRC_PC15: u32 = 32768;
pub const PWR_PDCRC_PC14_Pos: u32 = 14;
pub const PWR_PDCRC_PC14_Msk: u32 = 16384;
pub const PWR_PDCRC_PC14: u32 = 16384;
pub const PWR_PDCRC_PC13_Pos: u32 = 13;
pub const PWR_PDCRC_PC13_Msk: u32 = 8192;
pub const PWR_PDCRC_PC13: u32 = 8192;
pub const PWR_PDCRC_PC12_Pos: u32 = 12;
pub const PWR_PDCRC_PC12_Msk: u32 = 4096;
pub const PWR_PDCRC_PC12: u32 = 4096;
pub const PWR_PDCRC_PC11_Pos: u32 = 11;
pub const PWR_PDCRC_PC11_Msk: u32 = 2048;
pub const PWR_PDCRC_PC11: u32 = 2048;
pub const PWR_PDCRC_PC10_Pos: u32 = 10;
pub const PWR_PDCRC_PC10_Msk: u32 = 1024;
pub const PWR_PDCRC_PC10: u32 = 1024;
pub const PWR_PDCRC_PC9_Pos: u32 = 9;
pub const PWR_PDCRC_PC9_Msk: u32 = 512;
pub const PWR_PDCRC_PC9: u32 = 512;
pub const PWR_PDCRC_PC8_Pos: u32 = 8;
pub const PWR_PDCRC_PC8_Msk: u32 = 256;
pub const PWR_PDCRC_PC8: u32 = 256;
pub const PWR_PDCRC_PC7_Pos: u32 = 7;
pub const PWR_PDCRC_PC7_Msk: u32 = 128;
pub const PWR_PDCRC_PC7: u32 = 128;
pub const PWR_PDCRC_PC6_Pos: u32 = 6;
pub const PWR_PDCRC_PC6_Msk: u32 = 64;
pub const PWR_PDCRC_PC6: u32 = 64;
pub const PWR_PDCRC_PC5_Pos: u32 = 5;
pub const PWR_PDCRC_PC5_Msk: u32 = 32;
pub const PWR_PDCRC_PC5: u32 = 32;
pub const PWR_PDCRC_PC4_Pos: u32 = 4;
pub const PWR_PDCRC_PC4_Msk: u32 = 16;
pub const PWR_PDCRC_PC4: u32 = 16;
pub const PWR_PDCRC_PC3_Pos: u32 = 3;
pub const PWR_PDCRC_PC3_Msk: u32 = 8;
pub const PWR_PDCRC_PC3: u32 = 8;
pub const PWR_PDCRC_PC2_Pos: u32 = 2;
pub const PWR_PDCRC_PC2_Msk: u32 = 4;
pub const PWR_PDCRC_PC2: u32 = 4;
pub const PWR_PDCRC_PC1_Pos: u32 = 1;
pub const PWR_PDCRC_PC1_Msk: u32 = 2;
pub const PWR_PDCRC_PC1: u32 = 2;
pub const PWR_PDCRC_PC0_Pos: u32 = 0;
pub const PWR_PDCRC_PC0_Msk: u32 = 1;
pub const PWR_PDCRC_PC0: u32 = 1;
pub const PWR_PUCRD_PD15_Pos: u32 = 15;
pub const PWR_PUCRD_PD15_Msk: u32 = 32768;
pub const PWR_PUCRD_PD15: u32 = 32768;
pub const PWR_PUCRD_PD14_Pos: u32 = 14;
pub const PWR_PUCRD_PD14_Msk: u32 = 16384;
pub const PWR_PUCRD_PD14: u32 = 16384;
pub const PWR_PUCRD_PD13_Pos: u32 = 13;
pub const PWR_PUCRD_PD13_Msk: u32 = 8192;
pub const PWR_PUCRD_PD13: u32 = 8192;
pub const PWR_PUCRD_PD12_Pos: u32 = 12;
pub const PWR_PUCRD_PD12_Msk: u32 = 4096;
pub const PWR_PUCRD_PD12: u32 = 4096;
pub const PWR_PUCRD_PD11_Pos: u32 = 11;
pub const PWR_PUCRD_PD11_Msk: u32 = 2048;
pub const PWR_PUCRD_PD11: u32 = 2048;
pub const PWR_PUCRD_PD10_Pos: u32 = 10;
pub const PWR_PUCRD_PD10_Msk: u32 = 1024;
pub const PWR_PUCRD_PD10: u32 = 1024;
pub const PWR_PUCRD_PD9_Pos: u32 = 9;
pub const PWR_PUCRD_PD9_Msk: u32 = 512;
pub const PWR_PUCRD_PD9: u32 = 512;
pub const PWR_PUCRD_PD8_Pos: u32 = 8;
pub const PWR_PUCRD_PD8_Msk: u32 = 256;
pub const PWR_PUCRD_PD8: u32 = 256;
pub const PWR_PUCRD_PD7_Pos: u32 = 7;
pub const PWR_PUCRD_PD7_Msk: u32 = 128;
pub const PWR_PUCRD_PD7: u32 = 128;
pub const PWR_PUCRD_PD6_Pos: u32 = 6;
pub const PWR_PUCRD_PD6_Msk: u32 = 64;
pub const PWR_PUCRD_PD6: u32 = 64;
pub const PWR_PUCRD_PD5_Pos: u32 = 5;
pub const PWR_PUCRD_PD5_Msk: u32 = 32;
pub const PWR_PUCRD_PD5: u32 = 32;
pub const PWR_PUCRD_PD4_Pos: u32 = 4;
pub const PWR_PUCRD_PD4_Msk: u32 = 16;
pub const PWR_PUCRD_PD4: u32 = 16;
pub const PWR_PUCRD_PD3_Pos: u32 = 3;
pub const PWR_PUCRD_PD3_Msk: u32 = 8;
pub const PWR_PUCRD_PD3: u32 = 8;
pub const PWR_PUCRD_PD2_Pos: u32 = 2;
pub const PWR_PUCRD_PD2_Msk: u32 = 4;
pub const PWR_PUCRD_PD2: u32 = 4;
pub const PWR_PUCRD_PD1_Pos: u32 = 1;
pub const PWR_PUCRD_PD1_Msk: u32 = 2;
pub const PWR_PUCRD_PD1: u32 = 2;
pub const PWR_PUCRD_PD0_Pos: u32 = 0;
pub const PWR_PUCRD_PD0_Msk: u32 = 1;
pub const PWR_PUCRD_PD0: u32 = 1;
pub const PWR_PDCRD_PD15_Pos: u32 = 15;
pub const PWR_PDCRD_PD15_Msk: u32 = 32768;
pub const PWR_PDCRD_PD15: u32 = 32768;
pub const PWR_PDCRD_PD14_Pos: u32 = 14;
pub const PWR_PDCRD_PD14_Msk: u32 = 16384;
pub const PWR_PDCRD_PD14: u32 = 16384;
pub const PWR_PDCRD_PD13_Pos: u32 = 13;
pub const PWR_PDCRD_PD13_Msk: u32 = 8192;
pub const PWR_PDCRD_PD13: u32 = 8192;
pub const PWR_PDCRD_PD12_Pos: u32 = 12;
pub const PWR_PDCRD_PD12_Msk: u32 = 4096;
pub const PWR_PDCRD_PD12: u32 = 4096;
pub const PWR_PDCRD_PD11_Pos: u32 = 11;
pub const PWR_PDCRD_PD11_Msk: u32 = 2048;
pub const PWR_PDCRD_PD11: u32 = 2048;
pub const PWR_PDCRD_PD10_Pos: u32 = 10;
pub const PWR_PDCRD_PD10_Msk: u32 = 1024;
pub const PWR_PDCRD_PD10: u32 = 1024;
pub const PWR_PDCRD_PD9_Pos: u32 = 9;
pub const PWR_PDCRD_PD9_Msk: u32 = 512;
pub const PWR_PDCRD_PD9: u32 = 512;
pub const PWR_PDCRD_PD8_Pos: u32 = 8;
pub const PWR_PDCRD_PD8_Msk: u32 = 256;
pub const PWR_PDCRD_PD8: u32 = 256;
pub const PWR_PDCRD_PD7_Pos: u32 = 7;
pub const PWR_PDCRD_PD7_Msk: u32 = 128;
pub const PWR_PDCRD_PD7: u32 = 128;
pub const PWR_PDCRD_PD6_Pos: u32 = 6;
pub const PWR_PDCRD_PD6_Msk: u32 = 64;
pub const PWR_PDCRD_PD6: u32 = 64;
pub const PWR_PDCRD_PD5_Pos: u32 = 5;
pub const PWR_PDCRD_PD5_Msk: u32 = 32;
pub const PWR_PDCRD_PD5: u32 = 32;
pub const PWR_PDCRD_PD4_Pos: u32 = 4;
pub const PWR_PDCRD_PD4_Msk: u32 = 16;
pub const PWR_PDCRD_PD4: u32 = 16;
pub const PWR_PDCRD_PD3_Pos: u32 = 3;
pub const PWR_PDCRD_PD3_Msk: u32 = 8;
pub const PWR_PDCRD_PD3: u32 = 8;
pub const PWR_PDCRD_PD2_Pos: u32 = 2;
pub const PWR_PDCRD_PD2_Msk: u32 = 4;
pub const PWR_PDCRD_PD2: u32 = 4;
pub const PWR_PDCRD_PD1_Pos: u32 = 1;
pub const PWR_PDCRD_PD1_Msk: u32 = 2;
pub const PWR_PDCRD_PD1: u32 = 2;
pub const PWR_PDCRD_PD0_Pos: u32 = 0;
pub const PWR_PDCRD_PD0_Msk: u32 = 1;
pub const PWR_PDCRD_PD0: u32 = 1;
pub const PWR_PUCRE_PE15_Pos: u32 = 15;
pub const PWR_PUCRE_PE15_Msk: u32 = 32768;
pub const PWR_PUCRE_PE15: u32 = 32768;
pub const PWR_PUCRE_PE14_Pos: u32 = 14;
pub const PWR_PUCRE_PE14_Msk: u32 = 16384;
pub const PWR_PUCRE_PE14: u32 = 16384;
pub const PWR_PUCRE_PE13_Pos: u32 = 13;
pub const PWR_PUCRE_PE13_Msk: u32 = 8192;
pub const PWR_PUCRE_PE13: u32 = 8192;
pub const PWR_PUCRE_PE12_Pos: u32 = 12;
pub const PWR_PUCRE_PE12_Msk: u32 = 4096;
pub const PWR_PUCRE_PE12: u32 = 4096;
pub const PWR_PUCRE_PE11_Pos: u32 = 11;
pub const PWR_PUCRE_PE11_Msk: u32 = 2048;
pub const PWR_PUCRE_PE11: u32 = 2048;
pub const PWR_PUCRE_PE10_Pos: u32 = 10;
pub const PWR_PUCRE_PE10_Msk: u32 = 1024;
pub const PWR_PUCRE_PE10: u32 = 1024;
pub const PWR_PUCRE_PE9_Pos: u32 = 9;
pub const PWR_PUCRE_PE9_Msk: u32 = 512;
pub const PWR_PUCRE_PE9: u32 = 512;
pub const PWR_PUCRE_PE8_Pos: u32 = 8;
pub const PWR_PUCRE_PE8_Msk: u32 = 256;
pub const PWR_PUCRE_PE8: u32 = 256;
pub const PWR_PUCRE_PE7_Pos: u32 = 7;
pub const PWR_PUCRE_PE7_Msk: u32 = 128;
pub const PWR_PUCRE_PE7: u32 = 128;
pub const PWR_PUCRE_PE6_Pos: u32 = 6;
pub const PWR_PUCRE_PE6_Msk: u32 = 64;
pub const PWR_PUCRE_PE6: u32 = 64;
pub const PWR_PUCRE_PE5_Pos: u32 = 5;
pub const PWR_PUCRE_PE5_Msk: u32 = 32;
pub const PWR_PUCRE_PE5: u32 = 32;
pub const PWR_PUCRE_PE4_Pos: u32 = 4;
pub const PWR_PUCRE_PE4_Msk: u32 = 16;
pub const PWR_PUCRE_PE4: u32 = 16;
pub const PWR_PUCRE_PE3_Pos: u32 = 3;
pub const PWR_PUCRE_PE3_Msk: u32 = 8;
pub const PWR_PUCRE_PE3: u32 = 8;
pub const PWR_PUCRE_PE2_Pos: u32 = 2;
pub const PWR_PUCRE_PE2_Msk: u32 = 4;
pub const PWR_PUCRE_PE2: u32 = 4;
pub const PWR_PUCRE_PE1_Pos: u32 = 1;
pub const PWR_PUCRE_PE1_Msk: u32 = 2;
pub const PWR_PUCRE_PE1: u32 = 2;
pub const PWR_PUCRE_PE0_Pos: u32 = 0;
pub const PWR_PUCRE_PE0_Msk: u32 = 1;
pub const PWR_PUCRE_PE0: u32 = 1;
pub const PWR_PDCRE_PE15_Pos: u32 = 15;
pub const PWR_PDCRE_PE15_Msk: u32 = 32768;
pub const PWR_PDCRE_PE15: u32 = 32768;
pub const PWR_PDCRE_PE14_Pos: u32 = 14;
pub const PWR_PDCRE_PE14_Msk: u32 = 16384;
pub const PWR_PDCRE_PE14: u32 = 16384;
pub const PWR_PDCRE_PE13_Pos: u32 = 13;
pub const PWR_PDCRE_PE13_Msk: u32 = 8192;
pub const PWR_PDCRE_PE13: u32 = 8192;
pub const PWR_PDCRE_PE12_Pos: u32 = 12;
pub const PWR_PDCRE_PE12_Msk: u32 = 4096;
pub const PWR_PDCRE_PE12: u32 = 4096;
pub const PWR_PDCRE_PE11_Pos: u32 = 11;
pub const PWR_PDCRE_PE11_Msk: u32 = 2048;
pub const PWR_PDCRE_PE11: u32 = 2048;
pub const PWR_PDCRE_PE10_Pos: u32 = 10;
pub const PWR_PDCRE_PE10_Msk: u32 = 1024;
pub const PWR_PDCRE_PE10: u32 = 1024;
pub const PWR_PDCRE_PE9_Pos: u32 = 9;
pub const PWR_PDCRE_PE9_Msk: u32 = 512;
pub const PWR_PDCRE_PE9: u32 = 512;
pub const PWR_PDCRE_PE8_Pos: u32 = 8;
pub const PWR_PDCRE_PE8_Msk: u32 = 256;
pub const PWR_PDCRE_PE8: u32 = 256;
pub const PWR_PDCRE_PE7_Pos: u32 = 7;
pub const PWR_PDCRE_PE7_Msk: u32 = 128;
pub const PWR_PDCRE_PE7: u32 = 128;
pub const PWR_PDCRE_PE6_Pos: u32 = 6;
pub const PWR_PDCRE_PE6_Msk: u32 = 64;
pub const PWR_PDCRE_PE6: u32 = 64;
pub const PWR_PDCRE_PE5_Pos: u32 = 5;
pub const PWR_PDCRE_PE5_Msk: u32 = 32;
pub const PWR_PDCRE_PE5: u32 = 32;
pub const PWR_PDCRE_PE4_Pos: u32 = 4;
pub const PWR_PDCRE_PE4_Msk: u32 = 16;
pub const PWR_PDCRE_PE4: u32 = 16;
pub const PWR_PDCRE_PE3_Pos: u32 = 3;
pub const PWR_PDCRE_PE3_Msk: u32 = 8;
pub const PWR_PDCRE_PE3: u32 = 8;
pub const PWR_PDCRE_PE2_Pos: u32 = 2;
pub const PWR_PDCRE_PE2_Msk: u32 = 4;
pub const PWR_PDCRE_PE2: u32 = 4;
pub const PWR_PDCRE_PE1_Pos: u32 = 1;
pub const PWR_PDCRE_PE1_Msk: u32 = 2;
pub const PWR_PDCRE_PE1: u32 = 2;
pub const PWR_PDCRE_PE0_Pos: u32 = 0;
pub const PWR_PDCRE_PE0_Msk: u32 = 1;
pub const PWR_PDCRE_PE0: u32 = 1;
pub const PWR_PUCRF_PF15_Pos: u32 = 15;
pub const PWR_PUCRF_PF15_Msk: u32 = 32768;
pub const PWR_PUCRF_PF15: u32 = 32768;
pub const PWR_PUCRF_PF14_Pos: u32 = 14;
pub const PWR_PUCRF_PF14_Msk: u32 = 16384;
pub const PWR_PUCRF_PF14: u32 = 16384;
pub const PWR_PUCRF_PF13_Pos: u32 = 13;
pub const PWR_PUCRF_PF13_Msk: u32 = 8192;
pub const PWR_PUCRF_PF13: u32 = 8192;
pub const PWR_PUCRF_PF12_Pos: u32 = 12;
pub const PWR_PUCRF_PF12_Msk: u32 = 4096;
pub const PWR_PUCRF_PF12: u32 = 4096;
pub const PWR_PUCRF_PF11_Pos: u32 = 11;
pub const PWR_PUCRF_PF11_Msk: u32 = 2048;
pub const PWR_PUCRF_PF11: u32 = 2048;
pub const PWR_PUCRF_PF10_Pos: u32 = 10;
pub const PWR_PUCRF_PF10_Msk: u32 = 1024;
pub const PWR_PUCRF_PF10: u32 = 1024;
pub const PWR_PUCRF_PF9_Pos: u32 = 9;
pub const PWR_PUCRF_PF9_Msk: u32 = 512;
pub const PWR_PUCRF_PF9: u32 = 512;
pub const PWR_PUCRF_PF8_Pos: u32 = 8;
pub const PWR_PUCRF_PF8_Msk: u32 = 256;
pub const PWR_PUCRF_PF8: u32 = 256;
pub const PWR_PUCRF_PF7_Pos: u32 = 7;
pub const PWR_PUCRF_PF7_Msk: u32 = 128;
pub const PWR_PUCRF_PF7: u32 = 128;
pub const PWR_PUCRF_PF6_Pos: u32 = 6;
pub const PWR_PUCRF_PF6_Msk: u32 = 64;
pub const PWR_PUCRF_PF6: u32 = 64;
pub const PWR_PUCRF_PF5_Pos: u32 = 5;
pub const PWR_PUCRF_PF5_Msk: u32 = 32;
pub const PWR_PUCRF_PF5: u32 = 32;
pub const PWR_PUCRF_PF4_Pos: u32 = 4;
pub const PWR_PUCRF_PF4_Msk: u32 = 16;
pub const PWR_PUCRF_PF4: u32 = 16;
pub const PWR_PUCRF_PF3_Pos: u32 = 3;
pub const PWR_PUCRF_PF3_Msk: u32 = 8;
pub const PWR_PUCRF_PF3: u32 = 8;
pub const PWR_PUCRF_PF2_Pos: u32 = 2;
pub const PWR_PUCRF_PF2_Msk: u32 = 4;
pub const PWR_PUCRF_PF2: u32 = 4;
pub const PWR_PUCRF_PF1_Pos: u32 = 1;
pub const PWR_PUCRF_PF1_Msk: u32 = 2;
pub const PWR_PUCRF_PF1: u32 = 2;
pub const PWR_PUCRF_PF0_Pos: u32 = 0;
pub const PWR_PUCRF_PF0_Msk: u32 = 1;
pub const PWR_PUCRF_PF0: u32 = 1;
pub const PWR_PDCRF_PF10_Pos: u32 = 10;
pub const PWR_PDCRF_PF10_Msk: u32 = 1024;
pub const PWR_PDCRF_PF10: u32 = 1024;
pub const PWR_PDCRF_PF9_Pos: u32 = 9;
pub const PWR_PDCRF_PF9_Msk: u32 = 512;
pub const PWR_PDCRF_PF9: u32 = 512;
pub const PWR_PDCRF_PF2_Pos: u32 = 2;
pub const PWR_PDCRF_PF2_Msk: u32 = 4;
pub const PWR_PDCRF_PF2: u32 = 4;
pub const PWR_PDCRF_PF1_Pos: u32 = 1;
pub const PWR_PDCRF_PF1_Msk: u32 = 2;
pub const PWR_PDCRF_PF1: u32 = 2;
pub const PWR_PDCRF_PF0_Pos: u32 = 0;
pub const PWR_PDCRF_PF0_Msk: u32 = 1;
pub const PWR_PDCRF_PF0: u32 = 1;
pub const PWR_PUCRG_PG10_Pos: u32 = 10;
pub const PWR_PUCRG_PG10_Msk: u32 = 1024;
pub const PWR_PUCRG_PG10: u32 = 1024;
pub const PWR_PDCRG_PG10_Pos: u32 = 10;
pub const PWR_PDCRG_PG10_Msk: u32 = 1024;
pub const PWR_PDCRG_PG10: u32 = 1024;
pub const PWR_PDCRG_PG9_Pos: u32 = 9;
pub const PWR_PDCRG_PG9_Msk: u32 = 512;
pub const PWR_PDCRG_PG9: u32 = 512;
pub const PWR_PDCRG_PG8_Pos: u32 = 8;
pub const PWR_PDCRG_PG8_Msk: u32 = 256;
pub const PWR_PDCRG_PG8: u32 = 256;
pub const PWR_PDCRG_PG7_Pos: u32 = 7;
pub const PWR_PDCRG_PG7_Msk: u32 = 128;
pub const PWR_PDCRG_PG7: u32 = 128;
pub const PWR_PDCRG_PG6_Pos: u32 = 6;
pub const PWR_PDCRG_PG6_Msk: u32 = 64;
pub const PWR_PDCRG_PG6: u32 = 64;
pub const PWR_PDCRG_PG5_Pos: u32 = 5;
pub const PWR_PDCRG_PG5_Msk: u32 = 32;
pub const PWR_PDCRG_PG5: u32 = 32;
pub const PWR_PDCRG_PG4_Pos: u32 = 4;
pub const PWR_PDCRG_PG4_Msk: u32 = 16;
pub const PWR_PDCRG_PG4: u32 = 16;
pub const PWR_PDCRG_PG3_Pos: u32 = 3;
pub const PWR_PDCRG_PG3_Msk: u32 = 8;
pub const PWR_PDCRG_PG3: u32 = 8;
pub const PWR_PDCRG_PG2_Pos: u32 = 2;
pub const PWR_PDCRG_PG2_Msk: u32 = 4;
pub const PWR_PDCRG_PG2: u32 = 4;
pub const PWR_PDCRG_PG1_Pos: u32 = 1;
pub const PWR_PDCRG_PG1_Msk: u32 = 2;
pub const PWR_PDCRG_PG1: u32 = 2;
pub const PWR_PDCRG_PG0_Pos: u32 = 0;
pub const PWR_PDCRG_PG0_Msk: u32 = 1;
pub const PWR_PDCRG_PG0: u32 = 1;
pub const PWR_CR5_R1MODE_Pos: u32 = 8;
pub const PWR_CR5_R1MODE_Msk: u32 = 256;
pub const PWR_CR5_R1MODE: u32 = 256;
pub const RCC_CR_HSION_Pos: u32 = 8;
pub const RCC_CR_HSION_Msk: u32 = 256;
pub const RCC_CR_HSION: u32 = 256;
pub const RCC_CR_HSIKERON_Pos: u32 = 9;
pub const RCC_CR_HSIKERON_Msk: u32 = 512;
pub const RCC_CR_HSIKERON: u32 = 512;
pub const RCC_CR_HSIRDY_Pos: u32 = 10;
pub const RCC_CR_HSIRDY_Msk: u32 = 1024;
pub const RCC_CR_HSIRDY: u32 = 1024;
pub const RCC_CR_HSEON_Pos: u32 = 16;
pub const RCC_CR_HSEON_Msk: u32 = 65536;
pub const RCC_CR_HSEON: u32 = 65536;
pub const RCC_CR_HSERDY_Pos: u32 = 17;
pub const RCC_CR_HSERDY_Msk: u32 = 131072;
pub const RCC_CR_HSERDY: u32 = 131072;
pub const RCC_CR_HSEBYP_Pos: u32 = 18;
pub const RCC_CR_HSEBYP_Msk: u32 = 262144;
pub const RCC_CR_HSEBYP: u32 = 262144;
pub const RCC_CR_CSSON_Pos: u32 = 19;
pub const RCC_CR_CSSON_Msk: u32 = 524288;
pub const RCC_CR_CSSON: u32 = 524288;
pub const RCC_CR_PLLON_Pos: u32 = 24;
pub const RCC_CR_PLLON_Msk: u32 = 16777216;
pub const RCC_CR_PLLON: u32 = 16777216;
pub const RCC_CR_PLLRDY_Pos: u32 = 25;
pub const RCC_CR_PLLRDY_Msk: u32 = 33554432;
pub const RCC_CR_PLLRDY: u32 = 33554432;
pub const RCC_ICSCR_HSICAL_Pos: u32 = 16;
pub const RCC_ICSCR_HSICAL_Msk: u32 = 16711680;
pub const RCC_ICSCR_HSICAL: u32 = 16711680;
pub const RCC_ICSCR_HSICAL_0: u32 = 65536;
pub const RCC_ICSCR_HSICAL_1: u32 = 131072;
pub const RCC_ICSCR_HSICAL_2: u32 = 262144;
pub const RCC_ICSCR_HSICAL_3: u32 = 524288;
pub const RCC_ICSCR_HSICAL_4: u32 = 1048576;
pub const RCC_ICSCR_HSICAL_5: u32 = 2097152;
pub const RCC_ICSCR_HSICAL_6: u32 = 4194304;
pub const RCC_ICSCR_HSICAL_7: u32 = 8388608;
pub const RCC_ICSCR_HSITRIM_Pos: u32 = 24;
pub const RCC_ICSCR_HSITRIM_Msk: u32 = 2130706432;
pub const RCC_ICSCR_HSITRIM: u32 = 2130706432;
pub const RCC_ICSCR_HSITRIM_0: u32 = 16777216;
pub const RCC_ICSCR_HSITRIM_1: u32 = 33554432;
pub const RCC_ICSCR_HSITRIM_2: u32 = 67108864;
pub const RCC_ICSCR_HSITRIM_3: u32 = 134217728;
pub const RCC_ICSCR_HSITRIM_4: u32 = 268435456;
pub const RCC_ICSCR_HSITRIM_5: u32 = 536870912;
pub const RCC_ICSCR_HSITRIM_6: u32 = 1073741824;
pub const RCC_CFGR_SW_Pos: u32 = 0;
pub const RCC_CFGR_SW_Msk: u32 = 3;
pub const RCC_CFGR_SW: u32 = 3;
pub const RCC_CFGR_SW_0: u32 = 1;
pub const RCC_CFGR_SW_1: u32 = 2;
pub const RCC_CFGR_SW_HSI: u32 = 1;
pub const RCC_CFGR_SW_HSE: u32 = 2;
pub const RCC_CFGR_SW_PLL: u32 = 3;
pub const RCC_CFGR_SWS_Pos: u32 = 2;
pub const RCC_CFGR_SWS_Msk: u32 = 12;
pub const RCC_CFGR_SWS: u32 = 12;
pub const RCC_CFGR_SWS_0: u32 = 4;
pub const RCC_CFGR_SWS_1: u32 = 8;
pub const RCC_CFGR_SWS_HSI: u32 = 4;
pub const RCC_CFGR_SWS_HSE: u32 = 8;
pub const RCC_CFGR_SWS_PLL: u32 = 12;
pub const RCC_CFGR_HPRE_Pos: u32 = 4;
pub const RCC_CFGR_HPRE_Msk: u32 = 240;
pub const RCC_CFGR_HPRE: u32 = 240;
pub const RCC_CFGR_HPRE_0: u32 = 16;
pub const RCC_CFGR_HPRE_1: u32 = 32;
pub const RCC_CFGR_HPRE_2: u32 = 64;
pub const RCC_CFGR_HPRE_3: u32 = 128;
pub const RCC_CFGR_HPRE_DIV1: u32 = 0;
pub const RCC_CFGR_HPRE_DIV2: u32 = 128;
pub const RCC_CFGR_HPRE_DIV4: u32 = 144;
pub const RCC_CFGR_HPRE_DIV8: u32 = 160;
pub const RCC_CFGR_HPRE_DIV16: u32 = 176;
pub const RCC_CFGR_HPRE_DIV64: u32 = 192;
pub const RCC_CFGR_HPRE_DIV128: u32 = 208;
pub const RCC_CFGR_HPRE_DIV256: u32 = 224;
pub const RCC_CFGR_HPRE_DIV512: u32 = 240;
pub const RCC_CFGR_PPRE1_Pos: u32 = 8;
pub const RCC_CFGR_PPRE1_Msk: u32 = 1792;
pub const RCC_CFGR_PPRE1: u32 = 1792;
pub const RCC_CFGR_PPRE1_0: u32 = 256;
pub const RCC_CFGR_PPRE1_1: u32 = 512;
pub const RCC_CFGR_PPRE1_2: u32 = 1024;
pub const RCC_CFGR_PPRE1_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE1_DIV2: u32 = 1024;
pub const RCC_CFGR_PPRE1_DIV4: u32 = 1280;
pub const RCC_CFGR_PPRE1_DIV8: u32 = 1536;
pub const RCC_CFGR_PPRE1_DIV16: u32 = 1792;
pub const RCC_CFGR_PPRE2_Pos: u32 = 11;
pub const RCC_CFGR_PPRE2_Msk: u32 = 14336;
pub const RCC_CFGR_PPRE2: u32 = 14336;
pub const RCC_CFGR_PPRE2_0: u32 = 2048;
pub const RCC_CFGR_PPRE2_1: u32 = 4096;
pub const RCC_CFGR_PPRE2_2: u32 = 8192;
pub const RCC_CFGR_PPRE2_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE2_DIV2: u32 = 8192;
pub const RCC_CFGR_PPRE2_DIV4: u32 = 10240;
pub const RCC_CFGR_PPRE2_DIV8: u32 = 12288;
pub const RCC_CFGR_PPRE2_DIV16: u32 = 14336;
pub const RCC_CFGR_MCOSEL_Pos: u32 = 24;
pub const RCC_CFGR_MCOSEL_Msk: u32 = 251658240;
pub const RCC_CFGR_MCOSEL: u32 = 251658240;
pub const RCC_CFGR_MCOSEL_0: u32 = 16777216;
pub const RCC_CFGR_MCOSEL_1: u32 = 33554432;
pub const RCC_CFGR_MCOSEL_2: u32 = 67108864;
pub const RCC_CFGR_MCOSEL_3: u32 = 134217728;
pub const RCC_CFGR_MCOPRE_Pos: u32 = 28;
pub const RCC_CFGR_MCOPRE_Msk: u32 = 1879048192;
pub const RCC_CFGR_MCOPRE: u32 = 1879048192;
pub const RCC_CFGR_MCOPRE_0: u32 = 268435456;
pub const RCC_CFGR_MCOPRE_1: u32 = 536870912;
pub const RCC_CFGR_MCOPRE_2: u32 = 1073741824;
pub const RCC_CFGR_MCOPRE_DIV1: u32 = 0;
pub const RCC_CFGR_MCOPRE_DIV2: u32 = 268435456;
pub const RCC_CFGR_MCOPRE_DIV4: u32 = 536870912;
pub const RCC_CFGR_MCOPRE_DIV8: u32 = 805306368;
pub const RCC_CFGR_MCOPRE_DIV16: u32 = 1073741824;
pub const RCC_CFGR_MCO_PRE: u32 = 1879048192;
pub const RCC_CFGR_MCO_PRE_1: u32 = 0;
pub const RCC_CFGR_MCO_PRE_2: u32 = 268435456;
pub const RCC_CFGR_MCO_PRE_4: u32 = 536870912;
pub const RCC_CFGR_MCO_PRE_8: u32 = 805306368;
pub const RCC_CFGR_MCO_PRE_16: u32 = 1073741824;
pub const RCC_PLLCFGR_PLLSRC_Pos: u32 = 0;
pub const RCC_PLLCFGR_PLLSRC_Msk: u32 = 3;
pub const RCC_PLLCFGR_PLLSRC: u32 = 3;
pub const RCC_PLLCFGR_PLLSRC_0: u32 = 1;
pub const RCC_PLLCFGR_PLLSRC_1: u32 = 2;
pub const RCC_PLLCFGR_PLLSRC_HSI_Pos: u32 = 1;
pub const RCC_PLLCFGR_PLLSRC_HSI_Msk: u32 = 2;
pub const RCC_PLLCFGR_PLLSRC_HSI: u32 = 2;
pub const RCC_PLLCFGR_PLLSRC_HSE_Pos: u32 = 0;
pub const RCC_PLLCFGR_PLLSRC_HSE_Msk: u32 = 3;
pub const RCC_PLLCFGR_PLLSRC_HSE: u32 = 3;
pub const RCC_PLLCFGR_PLLM_Pos: u32 = 4;
pub const RCC_PLLCFGR_PLLM_Msk: u32 = 240;
pub const RCC_PLLCFGR_PLLM: u32 = 240;
pub const RCC_PLLCFGR_PLLM_0: u32 = 16;
pub const RCC_PLLCFGR_PLLM_1: u32 = 32;
pub const RCC_PLLCFGR_PLLM_2: u32 = 64;
pub const RCC_PLLCFGR_PLLM_3: u32 = 128;
pub const RCC_PLLCFGR_PLLN_Pos: u32 = 8;
pub const RCC_PLLCFGR_PLLN_Msk: u32 = 32512;
pub const RCC_PLLCFGR_PLLN: u32 = 32512;
pub const RCC_PLLCFGR_PLLN_0: u32 = 256;
pub const RCC_PLLCFGR_PLLN_1: u32 = 512;
pub const RCC_PLLCFGR_PLLN_2: u32 = 1024;
pub const RCC_PLLCFGR_PLLN_3: u32 = 2048;
pub const RCC_PLLCFGR_PLLN_4: u32 = 4096;
pub const RCC_PLLCFGR_PLLN_5: u32 = 8192;
pub const RCC_PLLCFGR_PLLN_6: u32 = 16384;
pub const RCC_PLLCFGR_PLLPEN_Pos: u32 = 16;
pub const RCC_PLLCFGR_PLLPEN_Msk: u32 = 65536;
pub const RCC_PLLCFGR_PLLPEN: u32 = 65536;
pub const RCC_PLLCFGR_PLLP_Pos: u32 = 17;
pub const RCC_PLLCFGR_PLLP_Msk: u32 = 131072;
pub const RCC_PLLCFGR_PLLP: u32 = 131072;
pub const RCC_PLLCFGR_PLLQEN_Pos: u32 = 20;
pub const RCC_PLLCFGR_PLLQEN_Msk: u32 = 1048576;
pub const RCC_PLLCFGR_PLLQEN: u32 = 1048576;
pub const RCC_PLLCFGR_PLLQ_Pos: u32 = 21;
pub const RCC_PLLCFGR_PLLQ_Msk: u32 = 6291456;
pub const RCC_PLLCFGR_PLLQ: u32 = 6291456;
pub const RCC_PLLCFGR_PLLQ_0: u32 = 2097152;
pub const RCC_PLLCFGR_PLLQ_1: u32 = 4194304;
pub const RCC_PLLCFGR_PLLREN_Pos: u32 = 24;
pub const RCC_PLLCFGR_PLLREN_Msk: u32 = 16777216;
pub const RCC_PLLCFGR_PLLREN: u32 = 16777216;
pub const RCC_PLLCFGR_PLLR_Pos: u32 = 25;
pub const RCC_PLLCFGR_PLLR_Msk: u32 = 100663296;
pub const RCC_PLLCFGR_PLLR: u32 = 100663296;
pub const RCC_PLLCFGR_PLLR_0: u32 = 33554432;
pub const RCC_PLLCFGR_PLLR_1: u32 = 67108864;
pub const RCC_PLLCFGR_PLLPDIV_Pos: u32 = 27;
pub const RCC_PLLCFGR_PLLPDIV_Msk: u32 = 4160749568;
pub const RCC_PLLCFGR_PLLPDIV: u32 = 4160749568;
pub const RCC_PLLCFGR_PLLPDIV_0: u32 = 134217728;
pub const RCC_PLLCFGR_PLLPDIV_1: u32 = 268435456;
pub const RCC_PLLCFGR_PLLPDIV_2: u32 = 536870912;
pub const RCC_PLLCFGR_PLLPDIV_3: u32 = 1073741824;
pub const RCC_PLLCFGR_PLLPDIV_4: u32 = 2147483648;
pub const RCC_CIER_LSIRDYIE_Pos: u32 = 0;
pub const RCC_CIER_LSIRDYIE_Msk: u32 = 1;
pub const RCC_CIER_LSIRDYIE: u32 = 1;
pub const RCC_CIER_LSERDYIE_Pos: u32 = 1;
pub const RCC_CIER_LSERDYIE_Msk: u32 = 2;
pub const RCC_CIER_LSERDYIE: u32 = 2;
pub const RCC_CIER_HSIRDYIE_Pos: u32 = 3;
pub const RCC_CIER_HSIRDYIE_Msk: u32 = 8;
pub const RCC_CIER_HSIRDYIE: u32 = 8;
pub const RCC_CIER_HSERDYIE_Pos: u32 = 4;
pub const RCC_CIER_HSERDYIE_Msk: u32 = 16;
pub const RCC_CIER_HSERDYIE: u32 = 16;
pub const RCC_CIER_PLLRDYIE_Pos: u32 = 5;
pub const RCC_CIER_PLLRDYIE_Msk: u32 = 32;
pub const RCC_CIER_PLLRDYIE: u32 = 32;
pub const RCC_CIER_LSECSSIE_Pos: u32 = 9;
pub const RCC_CIER_LSECSSIE_Msk: u32 = 512;
pub const RCC_CIER_LSECSSIE: u32 = 512;
pub const RCC_CIER_HSI48RDYIE_Pos: u32 = 10;
pub const RCC_CIER_HSI48RDYIE_Msk: u32 = 1024;
pub const RCC_CIER_HSI48RDYIE: u32 = 1024;
pub const RCC_CIFR_LSIRDYF_Pos: u32 = 0;
pub const RCC_CIFR_LSIRDYF_Msk: u32 = 1;
pub const RCC_CIFR_LSIRDYF: u32 = 1;
pub const RCC_CIFR_LSERDYF_Pos: u32 = 1;
pub const RCC_CIFR_LSERDYF_Msk: u32 = 2;
pub const RCC_CIFR_LSERDYF: u32 = 2;
pub const RCC_CIFR_HSIRDYF_Pos: u32 = 3;
pub const RCC_CIFR_HSIRDYF_Msk: u32 = 8;
pub const RCC_CIFR_HSIRDYF: u32 = 8;
pub const RCC_CIFR_HSERDYF_Pos: u32 = 4;
pub const RCC_CIFR_HSERDYF_Msk: u32 = 16;
pub const RCC_CIFR_HSERDYF: u32 = 16;
pub const RCC_CIFR_PLLRDYF_Pos: u32 = 5;
pub const RCC_CIFR_PLLRDYF_Msk: u32 = 32;
pub const RCC_CIFR_PLLRDYF: u32 = 32;
pub const RCC_CIFR_CSSF_Pos: u32 = 8;
pub const RCC_CIFR_CSSF_Msk: u32 = 256;
pub const RCC_CIFR_CSSF: u32 = 256;
pub const RCC_CIFR_LSECSSF_Pos: u32 = 9;
pub const RCC_CIFR_LSECSSF_Msk: u32 = 512;
pub const RCC_CIFR_LSECSSF: u32 = 512;
pub const RCC_CIFR_HSI48RDYF_Pos: u32 = 10;
pub const RCC_CIFR_HSI48RDYF_Msk: u32 = 1024;
pub const RCC_CIFR_HSI48RDYF: u32 = 1024;
pub const RCC_CICR_LSIRDYC_Pos: u32 = 0;
pub const RCC_CICR_LSIRDYC_Msk: u32 = 1;
pub const RCC_CICR_LSIRDYC: u32 = 1;
pub const RCC_CICR_LSERDYC_Pos: u32 = 1;
pub const RCC_CICR_LSERDYC_Msk: u32 = 2;
pub const RCC_CICR_LSERDYC: u32 = 2;
pub const RCC_CICR_HSIRDYC_Pos: u32 = 3;
pub const RCC_CICR_HSIRDYC_Msk: u32 = 8;
pub const RCC_CICR_HSIRDYC: u32 = 8;
pub const RCC_CICR_HSERDYC_Pos: u32 = 4;
pub const RCC_CICR_HSERDYC_Msk: u32 = 16;
pub const RCC_CICR_HSERDYC: u32 = 16;
pub const RCC_CICR_PLLRDYC_Pos: u32 = 5;
pub const RCC_CICR_PLLRDYC_Msk: u32 = 32;
pub const RCC_CICR_PLLRDYC: u32 = 32;
pub const RCC_CICR_CSSC_Pos: u32 = 8;
pub const RCC_CICR_CSSC_Msk: u32 = 256;
pub const RCC_CICR_CSSC: u32 = 256;
pub const RCC_CICR_LSECSSC_Pos: u32 = 9;
pub const RCC_CICR_LSECSSC_Msk: u32 = 512;
pub const RCC_CICR_LSECSSC: u32 = 512;
pub const RCC_CICR_HSI48RDYC_Pos: u32 = 10;
pub const RCC_CICR_HSI48RDYC_Msk: u32 = 1024;
pub const RCC_CICR_HSI48RDYC: u32 = 1024;
pub const RCC_AHB1RSTR_DMA1RST_Pos: u32 = 0;
pub const RCC_AHB1RSTR_DMA1RST_Msk: u32 = 1;
pub const RCC_AHB1RSTR_DMA1RST: u32 = 1;
pub const RCC_AHB1RSTR_DMA2RST_Pos: u32 = 1;
pub const RCC_AHB1RSTR_DMA2RST_Msk: u32 = 2;
pub const RCC_AHB1RSTR_DMA2RST: u32 = 2;
pub const RCC_AHB1RSTR_DMAMUX1RST_Pos: u32 = 2;
pub const RCC_AHB1RSTR_DMAMUX1RST_Msk: u32 = 4;
pub const RCC_AHB1RSTR_DMAMUX1RST: u32 = 4;
pub const RCC_AHB1RSTR_CORDICRST_Pos: u32 = 3;
pub const RCC_AHB1RSTR_CORDICRST_Msk: u32 = 8;
pub const RCC_AHB1RSTR_CORDICRST: u32 = 8;
pub const RCC_AHB1RSTR_FMACRST_Pos: u32 = 4;
pub const RCC_AHB1RSTR_FMACRST_Msk: u32 = 16;
pub const RCC_AHB1RSTR_FMACRST: u32 = 16;
pub const RCC_AHB1RSTR_FLASHRST_Pos: u32 = 8;
pub const RCC_AHB1RSTR_FLASHRST_Msk: u32 = 256;
pub const RCC_AHB1RSTR_FLASHRST: u32 = 256;
pub const RCC_AHB1RSTR_CRCRST_Pos: u32 = 12;
pub const RCC_AHB1RSTR_CRCRST_Msk: u32 = 4096;
pub const RCC_AHB1RSTR_CRCRST: u32 = 4096;
pub const RCC_AHB2RSTR_GPIOARST_Pos: u32 = 0;
pub const RCC_AHB2RSTR_GPIOARST_Msk: u32 = 1;
pub const RCC_AHB2RSTR_GPIOARST: u32 = 1;
pub const RCC_AHB2RSTR_GPIOBRST_Pos: u32 = 1;
pub const RCC_AHB2RSTR_GPIOBRST_Msk: u32 = 2;
pub const RCC_AHB2RSTR_GPIOBRST: u32 = 2;
pub const RCC_AHB2RSTR_GPIOCRST_Pos: u32 = 2;
pub const RCC_AHB2RSTR_GPIOCRST_Msk: u32 = 4;
pub const RCC_AHB2RSTR_GPIOCRST: u32 = 4;
pub const RCC_AHB2RSTR_GPIODRST_Pos: u32 = 3;
pub const RCC_AHB2RSTR_GPIODRST_Msk: u32 = 8;
pub const RCC_AHB2RSTR_GPIODRST: u32 = 8;
pub const RCC_AHB2RSTR_GPIOERST_Pos: u32 = 4;
pub const RCC_AHB2RSTR_GPIOERST_Msk: u32 = 16;
pub const RCC_AHB2RSTR_GPIOERST: u32 = 16;
pub const RCC_AHB2RSTR_GPIOFRST_Pos: u32 = 5;
pub const RCC_AHB2RSTR_GPIOFRST_Msk: u32 = 32;
pub const RCC_AHB2RSTR_GPIOFRST: u32 = 32;
pub const RCC_AHB2RSTR_GPIOGRST_Pos: u32 = 6;
pub const RCC_AHB2RSTR_GPIOGRST_Msk: u32 = 64;
pub const RCC_AHB2RSTR_GPIOGRST: u32 = 64;
pub const RCC_AHB2RSTR_ADC12RST_Pos: u32 = 13;
pub const RCC_AHB2RSTR_ADC12RST_Msk: u32 = 8192;
pub const RCC_AHB2RSTR_ADC12RST: u32 = 8192;
pub const RCC_AHB2RSTR_DAC1RST_Pos: u32 = 16;
pub const RCC_AHB2RSTR_DAC1RST_Msk: u32 = 65536;
pub const RCC_AHB2RSTR_DAC1RST: u32 = 65536;
pub const RCC_AHB2RSTR_DAC3RST_Pos: u32 = 18;
pub const RCC_AHB2RSTR_DAC3RST_Msk: u32 = 262144;
pub const RCC_AHB2RSTR_DAC3RST: u32 = 262144;
pub const RCC_AHB2RSTR_RNGRST_Pos: u32 = 26;
pub const RCC_AHB2RSTR_RNGRST_Msk: u32 = 67108864;
pub const RCC_AHB2RSTR_RNGRST: u32 = 67108864;
pub const RCC_APB1RSTR1_TIM2RST_Pos: u32 = 0;
pub const RCC_APB1RSTR1_TIM2RST_Msk: u32 = 1;
pub const RCC_APB1RSTR1_TIM2RST: u32 = 1;
pub const RCC_APB1RSTR1_TIM3RST_Pos: u32 = 1;
pub const RCC_APB1RSTR1_TIM3RST_Msk: u32 = 2;
pub const RCC_APB1RSTR1_TIM3RST: u32 = 2;
pub const RCC_APB1RSTR1_TIM4RST_Pos: u32 = 2;
pub const RCC_APB1RSTR1_TIM4RST_Msk: u32 = 4;
pub const RCC_APB1RSTR1_TIM4RST: u32 = 4;
pub const RCC_APB1RSTR1_TIM6RST_Pos: u32 = 4;
pub const RCC_APB1RSTR1_TIM6RST_Msk: u32 = 16;
pub const RCC_APB1RSTR1_TIM6RST: u32 = 16;
pub const RCC_APB1RSTR1_TIM7RST_Pos: u32 = 5;
pub const RCC_APB1RSTR1_TIM7RST_Msk: u32 = 32;
pub const RCC_APB1RSTR1_TIM7RST: u32 = 32;
pub const RCC_APB1RSTR1_CRSRST_Pos: u32 = 8;
pub const RCC_APB1RSTR1_CRSRST_Msk: u32 = 256;
pub const RCC_APB1RSTR1_CRSRST: u32 = 256;
pub const RCC_APB1RSTR1_SPI2RST_Pos: u32 = 14;
pub const RCC_APB1RSTR1_SPI2RST_Msk: u32 = 16384;
pub const RCC_APB1RSTR1_SPI2RST: u32 = 16384;
pub const RCC_APB1RSTR1_SPI3RST_Pos: u32 = 15;
pub const RCC_APB1RSTR1_SPI3RST_Msk: u32 = 32768;
pub const RCC_APB1RSTR1_SPI3RST: u32 = 32768;
pub const RCC_APB1RSTR1_USART2RST_Pos: u32 = 17;
pub const RCC_APB1RSTR1_USART2RST_Msk: u32 = 131072;
pub const RCC_APB1RSTR1_USART2RST: u32 = 131072;
pub const RCC_APB1RSTR1_USART3RST_Pos: u32 = 18;
pub const RCC_APB1RSTR1_USART3RST_Msk: u32 = 262144;
pub const RCC_APB1RSTR1_USART3RST: u32 = 262144;
pub const RCC_APB1RSTR1_UART4RST_Pos: u32 = 19;
pub const RCC_APB1RSTR1_UART4RST_Msk: u32 = 524288;
pub const RCC_APB1RSTR1_UART4RST: u32 = 524288;
pub const RCC_APB1RSTR1_I2C1RST_Pos: u32 = 21;
pub const RCC_APB1RSTR1_I2C1RST_Msk: u32 = 2097152;
pub const RCC_APB1RSTR1_I2C1RST: u32 = 2097152;
pub const RCC_APB1RSTR1_I2C2RST_Pos: u32 = 22;
pub const RCC_APB1RSTR1_I2C2RST_Msk: u32 = 4194304;
pub const RCC_APB1RSTR1_I2C2RST: u32 = 4194304;
pub const RCC_APB1RSTR1_USBRST_Pos: u32 = 23;
pub const RCC_APB1RSTR1_USBRST_Msk: u32 = 8388608;
pub const RCC_APB1RSTR1_USBRST: u32 = 8388608;
pub const RCC_APB1RSTR1_FDCANRST_Pos: u32 = 25;
pub const RCC_APB1RSTR1_FDCANRST_Msk: u32 = 33554432;
pub const RCC_APB1RSTR1_FDCANRST: u32 = 33554432;
pub const RCC_APB1RSTR1_PWRRST_Pos: u32 = 28;
pub const RCC_APB1RSTR1_PWRRST_Msk: u32 = 268435456;
pub const RCC_APB1RSTR1_PWRRST: u32 = 268435456;
pub const RCC_APB1RSTR1_I2C3RST_Pos: u32 = 30;
pub const RCC_APB1RSTR1_I2C3RST_Msk: u32 = 1073741824;
pub const RCC_APB1RSTR1_I2C3RST: u32 = 1073741824;
pub const RCC_APB1RSTR1_LPTIM1RST_Pos: u32 = 31;
pub const RCC_APB1RSTR1_LPTIM1RST_Msk: u32 = 2147483648;
pub const RCC_APB1RSTR1_LPTIM1RST: u32 = 2147483648;
pub const RCC_APB1RSTR2_LPUART1RST_Pos: u32 = 0;
pub const RCC_APB1RSTR2_LPUART1RST_Msk: u32 = 1;
pub const RCC_APB1RSTR2_LPUART1RST: u32 = 1;
pub const RCC_APB1RSTR2_UCPD1RST_Pos: u32 = 8;
pub const RCC_APB1RSTR2_UCPD1RST_Msk: u32 = 256;
pub const RCC_APB1RSTR2_UCPD1RST: u32 = 256;
pub const RCC_APB2RSTR_SYSCFGRST_Pos: u32 = 0;
pub const RCC_APB2RSTR_SYSCFGRST_Msk: u32 = 1;
pub const RCC_APB2RSTR_SYSCFGRST: u32 = 1;
pub const RCC_APB2RSTR_TIM1RST_Pos: u32 = 11;
pub const RCC_APB2RSTR_TIM1RST_Msk: u32 = 2048;
pub const RCC_APB2RSTR_TIM1RST: u32 = 2048;
pub const RCC_APB2RSTR_SPI1RST_Pos: u32 = 12;
pub const RCC_APB2RSTR_SPI1RST_Msk: u32 = 4096;
pub const RCC_APB2RSTR_SPI1RST: u32 = 4096;
pub const RCC_APB2RSTR_TIM8RST_Pos: u32 = 13;
pub const RCC_APB2RSTR_TIM8RST_Msk: u32 = 8192;
pub const RCC_APB2RSTR_TIM8RST: u32 = 8192;
pub const RCC_APB2RSTR_USART1RST_Pos: u32 = 14;
pub const RCC_APB2RSTR_USART1RST_Msk: u32 = 16384;
pub const RCC_APB2RSTR_USART1RST: u32 = 16384;
pub const RCC_APB2RSTR_TIM15RST_Pos: u32 = 16;
pub const RCC_APB2RSTR_TIM15RST_Msk: u32 = 65536;
pub const RCC_APB2RSTR_TIM15RST: u32 = 65536;
pub const RCC_APB2RSTR_TIM16RST_Pos: u32 = 17;
pub const RCC_APB2RSTR_TIM16RST_Msk: u32 = 131072;
pub const RCC_APB2RSTR_TIM16RST: u32 = 131072;
pub const RCC_APB2RSTR_TIM17RST_Pos: u32 = 18;
pub const RCC_APB2RSTR_TIM17RST_Msk: u32 = 262144;
pub const RCC_APB2RSTR_TIM17RST: u32 = 262144;
pub const RCC_APB2RSTR_SAI1RST_Pos: u32 = 21;
pub const RCC_APB2RSTR_SAI1RST_Msk: u32 = 2097152;
pub const RCC_APB2RSTR_SAI1RST: u32 = 2097152;
pub const RCC_AHB1ENR_DMA1EN_Pos: u32 = 0;
pub const RCC_AHB1ENR_DMA1EN_Msk: u32 = 1;
pub const RCC_AHB1ENR_DMA1EN: u32 = 1;
pub const RCC_AHB1ENR_DMA2EN_Pos: u32 = 1;
pub const RCC_AHB1ENR_DMA2EN_Msk: u32 = 2;
pub const RCC_AHB1ENR_DMA2EN: u32 = 2;
pub const RCC_AHB1ENR_DMAMUX1EN_Pos: u32 = 2;
pub const RCC_AHB1ENR_DMAMUX1EN_Msk: u32 = 4;
pub const RCC_AHB1ENR_DMAMUX1EN: u32 = 4;
pub const RCC_AHB1ENR_CORDICEN_Pos: u32 = 3;
pub const RCC_AHB1ENR_CORDICEN_Msk: u32 = 8;
pub const RCC_AHB1ENR_CORDICEN: u32 = 8;
pub const RCC_AHB1ENR_FMACEN_Pos: u32 = 4;
pub const RCC_AHB1ENR_FMACEN_Msk: u32 = 16;
pub const RCC_AHB1ENR_FMACEN: u32 = 16;
pub const RCC_AHB1ENR_FLASHEN_Pos: u32 = 8;
pub const RCC_AHB1ENR_FLASHEN_Msk: u32 = 256;
pub const RCC_AHB1ENR_FLASHEN: u32 = 256;
pub const RCC_AHB1ENR_CRCEN_Pos: u32 = 12;
pub const RCC_AHB1ENR_CRCEN_Msk: u32 = 4096;
pub const RCC_AHB1ENR_CRCEN: u32 = 4096;
pub const RCC_AHB2ENR_GPIOAEN_Pos: u32 = 0;
pub const RCC_AHB2ENR_GPIOAEN_Msk: u32 = 1;
pub const RCC_AHB2ENR_GPIOAEN: u32 = 1;
pub const RCC_AHB2ENR_GPIOBEN_Pos: u32 = 1;
pub const RCC_AHB2ENR_GPIOBEN_Msk: u32 = 2;
pub const RCC_AHB2ENR_GPIOBEN: u32 = 2;
pub const RCC_AHB2ENR_GPIOCEN_Pos: u32 = 2;
pub const RCC_AHB2ENR_GPIOCEN_Msk: u32 = 4;
pub const RCC_AHB2ENR_GPIOCEN: u32 = 4;
pub const RCC_AHB2ENR_GPIODEN_Pos: u32 = 3;
pub const RCC_AHB2ENR_GPIODEN_Msk: u32 = 8;
pub const RCC_AHB2ENR_GPIODEN: u32 = 8;
pub const RCC_AHB2ENR_GPIOEEN_Pos: u32 = 4;
pub const RCC_AHB2ENR_GPIOEEN_Msk: u32 = 16;
pub const RCC_AHB2ENR_GPIOEEN: u32 = 16;
pub const RCC_AHB2ENR_GPIOFEN_Pos: u32 = 5;
pub const RCC_AHB2ENR_GPIOFEN_Msk: u32 = 32;
pub const RCC_AHB2ENR_GPIOFEN: u32 = 32;
pub const RCC_AHB2ENR_GPIOGEN_Pos: u32 = 6;
pub const RCC_AHB2ENR_GPIOGEN_Msk: u32 = 64;
pub const RCC_AHB2ENR_GPIOGEN: u32 = 64;
pub const RCC_AHB2ENR_ADC12EN_Pos: u32 = 13;
pub const RCC_AHB2ENR_ADC12EN_Msk: u32 = 8192;
pub const RCC_AHB2ENR_ADC12EN: u32 = 8192;
pub const RCC_AHB2ENR_DAC1EN_Pos: u32 = 16;
pub const RCC_AHB2ENR_DAC1EN_Msk: u32 = 65536;
pub const RCC_AHB2ENR_DAC1EN: u32 = 65536;
pub const RCC_AHB2ENR_DAC3EN_Pos: u32 = 18;
pub const RCC_AHB2ENR_DAC3EN_Msk: u32 = 262144;
pub const RCC_AHB2ENR_DAC3EN: u32 = 262144;
pub const RCC_AHB2ENR_RNGEN_Pos: u32 = 26;
pub const RCC_AHB2ENR_RNGEN_Msk: u32 = 67108864;
pub const RCC_AHB2ENR_RNGEN: u32 = 67108864;
pub const RCC_APB1ENR1_TIM2EN_Pos: u32 = 0;
pub const RCC_APB1ENR1_TIM2EN_Msk: u32 = 1;
pub const RCC_APB1ENR1_TIM2EN: u32 = 1;
pub const RCC_APB1ENR1_TIM3EN_Pos: u32 = 1;
pub const RCC_APB1ENR1_TIM3EN_Msk: u32 = 2;
pub const RCC_APB1ENR1_TIM3EN: u32 = 2;
pub const RCC_APB1ENR1_TIM4EN_Pos: u32 = 2;
pub const RCC_APB1ENR1_TIM4EN_Msk: u32 = 4;
pub const RCC_APB1ENR1_TIM4EN: u32 = 4;
pub const RCC_APB1ENR1_TIM6EN_Pos: u32 = 4;
pub const RCC_APB1ENR1_TIM6EN_Msk: u32 = 16;
pub const RCC_APB1ENR1_TIM6EN: u32 = 16;
pub const RCC_APB1ENR1_TIM7EN_Pos: u32 = 5;
pub const RCC_APB1ENR1_TIM7EN_Msk: u32 = 32;
pub const RCC_APB1ENR1_TIM7EN: u32 = 32;
pub const RCC_APB1ENR1_CRSEN_Pos: u32 = 8;
pub const RCC_APB1ENR1_CRSEN_Msk: u32 = 256;
pub const RCC_APB1ENR1_CRSEN: u32 = 256;
pub const RCC_APB1ENR1_RTCAPBEN_Pos: u32 = 10;
pub const RCC_APB1ENR1_RTCAPBEN_Msk: u32 = 1024;
pub const RCC_APB1ENR1_RTCAPBEN: u32 = 1024;
pub const RCC_APB1ENR1_WWDGEN_Pos: u32 = 11;
pub const RCC_APB1ENR1_WWDGEN_Msk: u32 = 2048;
pub const RCC_APB1ENR1_WWDGEN: u32 = 2048;
pub const RCC_APB1ENR1_SPI2EN_Pos: u32 = 14;
pub const RCC_APB1ENR1_SPI2EN_Msk: u32 = 16384;
pub const RCC_APB1ENR1_SPI2EN: u32 = 16384;
pub const RCC_APB1ENR1_SPI3EN_Pos: u32 = 15;
pub const RCC_APB1ENR1_SPI3EN_Msk: u32 = 32768;
pub const RCC_APB1ENR1_SPI3EN: u32 = 32768;
pub const RCC_APB1ENR1_USART2EN_Pos: u32 = 17;
pub const RCC_APB1ENR1_USART2EN_Msk: u32 = 131072;
pub const RCC_APB1ENR1_USART2EN: u32 = 131072;
pub const RCC_APB1ENR1_USART3EN_Pos: u32 = 18;
pub const RCC_APB1ENR1_USART3EN_Msk: u32 = 262144;
pub const RCC_APB1ENR1_USART3EN: u32 = 262144;
pub const RCC_APB1ENR1_UART4EN_Pos: u32 = 19;
pub const RCC_APB1ENR1_UART4EN_Msk: u32 = 524288;
pub const RCC_APB1ENR1_UART4EN: u32 = 524288;
pub const RCC_APB1ENR1_I2C1EN_Pos: u32 = 21;
pub const RCC_APB1ENR1_I2C1EN_Msk: u32 = 2097152;
pub const RCC_APB1ENR1_I2C1EN: u32 = 2097152;
pub const RCC_APB1ENR1_I2C2EN_Pos: u32 = 22;
pub const RCC_APB1ENR1_I2C2EN_Msk: u32 = 4194304;
pub const RCC_APB1ENR1_I2C2EN: u32 = 4194304;
pub const RCC_APB1ENR1_USBEN_Pos: u32 = 23;
pub const RCC_APB1ENR1_USBEN_Msk: u32 = 8388608;
pub const RCC_APB1ENR1_USBEN: u32 = 8388608;
pub const RCC_APB1ENR1_FDCANEN_Pos: u32 = 25;
pub const RCC_APB1ENR1_FDCANEN_Msk: u32 = 33554432;
pub const RCC_APB1ENR1_FDCANEN: u32 = 33554432;
pub const RCC_APB1ENR1_PWREN_Pos: u32 = 28;
pub const RCC_APB1ENR1_PWREN_Msk: u32 = 268435456;
pub const RCC_APB1ENR1_PWREN: u32 = 268435456;
pub const RCC_APB1ENR1_I2C3EN_Pos: u32 = 30;
pub const RCC_APB1ENR1_I2C3EN_Msk: u32 = 1073741824;
pub const RCC_APB1ENR1_I2C3EN: u32 = 1073741824;
pub const RCC_APB1ENR1_LPTIM1EN_Pos: u32 = 31;
pub const RCC_APB1ENR1_LPTIM1EN_Msk: u32 = 2147483648;
pub const RCC_APB1ENR1_LPTIM1EN: u32 = 2147483648;
pub const RCC_APB1ENR2_LPUART1EN_Pos: u32 = 0;
pub const RCC_APB1ENR2_LPUART1EN_Msk: u32 = 1;
pub const RCC_APB1ENR2_LPUART1EN: u32 = 1;
pub const RCC_APB1ENR2_UCPD1EN_Pos: u32 = 8;
pub const RCC_APB1ENR2_UCPD1EN_Msk: u32 = 256;
pub const RCC_APB1ENR2_UCPD1EN: u32 = 256;
pub const RCC_APB2ENR_SYSCFGEN_Pos: u32 = 0;
pub const RCC_APB2ENR_SYSCFGEN_Msk: u32 = 1;
pub const RCC_APB2ENR_SYSCFGEN: u32 = 1;
pub const RCC_APB2ENR_TIM1EN_Pos: u32 = 11;
pub const RCC_APB2ENR_TIM1EN_Msk: u32 = 2048;
pub const RCC_APB2ENR_TIM1EN: u32 = 2048;
pub const RCC_APB2ENR_SPI1EN_Pos: u32 = 12;
pub const RCC_APB2ENR_SPI1EN_Msk: u32 = 4096;
pub const RCC_APB2ENR_SPI1EN: u32 = 4096;
pub const RCC_APB2ENR_TIM8EN_Pos: u32 = 13;
pub const RCC_APB2ENR_TIM8EN_Msk: u32 = 8192;
pub const RCC_APB2ENR_TIM8EN: u32 = 8192;
pub const RCC_APB2ENR_USART1EN_Pos: u32 = 14;
pub const RCC_APB2ENR_USART1EN_Msk: u32 = 16384;
pub const RCC_APB2ENR_USART1EN: u32 = 16384;
pub const RCC_APB2ENR_TIM15EN_Pos: u32 = 16;
pub const RCC_APB2ENR_TIM15EN_Msk: u32 = 65536;
pub const RCC_APB2ENR_TIM15EN: u32 = 65536;
pub const RCC_APB2ENR_TIM16EN_Pos: u32 = 17;
pub const RCC_APB2ENR_TIM16EN_Msk: u32 = 131072;
pub const RCC_APB2ENR_TIM16EN: u32 = 131072;
pub const RCC_APB2ENR_TIM17EN_Pos: u32 = 18;
pub const RCC_APB2ENR_TIM17EN_Msk: u32 = 262144;
pub const RCC_APB2ENR_TIM17EN: u32 = 262144;
pub const RCC_APB2ENR_SAI1EN_Pos: u32 = 21;
pub const RCC_APB2ENR_SAI1EN_Msk: u32 = 2097152;
pub const RCC_APB2ENR_SAI1EN: u32 = 2097152;
pub const RCC_AHB1SMENR_DMA1SMEN_Pos: u32 = 0;
pub const RCC_AHB1SMENR_DMA1SMEN_Msk: u32 = 1;
pub const RCC_AHB1SMENR_DMA1SMEN: u32 = 1;
pub const RCC_AHB1SMENR_DMA2SMEN_Pos: u32 = 1;
pub const RCC_AHB1SMENR_DMA2SMEN_Msk: u32 = 2;
pub const RCC_AHB1SMENR_DMA2SMEN: u32 = 2;
pub const RCC_AHB1SMENR_DMAMUX1SMEN_Pos: u32 = 2;
pub const RCC_AHB1SMENR_DMAMUX1SMEN_Msk: u32 = 4;
pub const RCC_AHB1SMENR_DMAMUX1SMEN: u32 = 4;
pub const RCC_AHB1SMENR_CORDICSMEN_Pos: u32 = 3;
pub const RCC_AHB1SMENR_CORDICSMEN_Msk: u32 = 8;
pub const RCC_AHB1SMENR_CORDICSMEN: u32 = 8;
pub const RCC_AHB1SMENR_FMACSMEN_Pos: u32 = 4;
pub const RCC_AHB1SMENR_FMACSMEN_Msk: u32 = 16;
pub const RCC_AHB1SMENR_FMACSMEN: u32 = 16;
pub const RCC_AHB1SMENR_FLASHSMEN_Pos: u32 = 8;
pub const RCC_AHB1SMENR_FLASHSMEN_Msk: u32 = 256;
pub const RCC_AHB1SMENR_FLASHSMEN: u32 = 256;
pub const RCC_AHB1SMENR_SRAM1SMEN_Pos: u32 = 9;
pub const RCC_AHB1SMENR_SRAM1SMEN_Msk: u32 = 512;
pub const RCC_AHB1SMENR_SRAM1SMEN: u32 = 512;
pub const RCC_AHB1SMENR_CRCSMEN_Pos: u32 = 12;
pub const RCC_AHB1SMENR_CRCSMEN_Msk: u32 = 4096;
pub const RCC_AHB1SMENR_CRCSMEN: u32 = 4096;
pub const RCC_AHB2SMENR_GPIOASMEN_Pos: u32 = 0;
pub const RCC_AHB2SMENR_GPIOASMEN_Msk: u32 = 1;
pub const RCC_AHB2SMENR_GPIOASMEN: u32 = 1;
pub const RCC_AHB2SMENR_GPIOBSMEN_Pos: u32 = 1;
pub const RCC_AHB2SMENR_GPIOBSMEN_Msk: u32 = 2;
pub const RCC_AHB2SMENR_GPIOBSMEN: u32 = 2;
pub const RCC_AHB2SMENR_GPIOCSMEN_Pos: u32 = 2;
pub const RCC_AHB2SMENR_GPIOCSMEN_Msk: u32 = 4;
pub const RCC_AHB2SMENR_GPIOCSMEN: u32 = 4;
pub const RCC_AHB2SMENR_GPIODSMEN_Pos: u32 = 3;
pub const RCC_AHB2SMENR_GPIODSMEN_Msk: u32 = 8;
pub const RCC_AHB2SMENR_GPIODSMEN: u32 = 8;
pub const RCC_AHB2SMENR_GPIOESMEN_Pos: u32 = 4;
pub const RCC_AHB2SMENR_GPIOESMEN_Msk: u32 = 16;
pub const RCC_AHB2SMENR_GPIOESMEN: u32 = 16;
pub const RCC_AHB2SMENR_GPIOFSMEN_Pos: u32 = 5;
pub const RCC_AHB2SMENR_GPIOFSMEN_Msk: u32 = 32;
pub const RCC_AHB2SMENR_GPIOFSMEN: u32 = 32;
pub const RCC_AHB2SMENR_GPIOGSMEN_Pos: u32 = 6;
pub const RCC_AHB2SMENR_GPIOGSMEN_Msk: u32 = 64;
pub const RCC_AHB2SMENR_GPIOGSMEN: u32 = 64;
pub const RCC_AHB2SMENR_CCMSRAMSMEN_Pos: u32 = 9;
pub const RCC_AHB2SMENR_CCMSRAMSMEN_Msk: u32 = 512;
pub const RCC_AHB2SMENR_CCMSRAMSMEN: u32 = 512;
pub const RCC_AHB2SMENR_SRAM2SMEN_Pos: u32 = 10;
pub const RCC_AHB2SMENR_SRAM2SMEN_Msk: u32 = 1024;
pub const RCC_AHB2SMENR_SRAM2SMEN: u32 = 1024;
pub const RCC_AHB2SMENR_ADC12SMEN_Pos: u32 = 13;
pub const RCC_AHB2SMENR_ADC12SMEN_Msk: u32 = 8192;
pub const RCC_AHB2SMENR_ADC12SMEN: u32 = 8192;
pub const RCC_AHB2SMENR_DAC1SMEN_Pos: u32 = 16;
pub const RCC_AHB2SMENR_DAC1SMEN_Msk: u32 = 65536;
pub const RCC_AHB2SMENR_DAC1SMEN: u32 = 65536;
pub const RCC_AHB2SMENR_DAC3SMEN_Pos: u32 = 18;
pub const RCC_AHB2SMENR_DAC3SMEN_Msk: u32 = 262144;
pub const RCC_AHB2SMENR_DAC3SMEN: u32 = 262144;
pub const RCC_AHB2SMENR_RNGSMEN_Pos: u32 = 26;
pub const RCC_AHB2SMENR_RNGSMEN_Msk: u32 = 67108864;
pub const RCC_AHB2SMENR_RNGSMEN: u32 = 67108864;
pub const RCC_APB1SMENR1_TIM2SMEN_Pos: u32 = 0;
pub const RCC_APB1SMENR1_TIM2SMEN_Msk: u32 = 1;
pub const RCC_APB1SMENR1_TIM2SMEN: u32 = 1;
pub const RCC_APB1SMENR1_TIM3SMEN_Pos: u32 = 1;
pub const RCC_APB1SMENR1_TIM3SMEN_Msk: u32 = 2;
pub const RCC_APB1SMENR1_TIM3SMEN: u32 = 2;
pub const RCC_APB1SMENR1_TIM4SMEN_Pos: u32 = 2;
pub const RCC_APB1SMENR1_TIM4SMEN_Msk: u32 = 4;
pub const RCC_APB1SMENR1_TIM4SMEN: u32 = 4;
pub const RCC_APB1SMENR1_TIM6SMEN_Pos: u32 = 4;
pub const RCC_APB1SMENR1_TIM6SMEN_Msk: u32 = 16;
pub const RCC_APB1SMENR1_TIM6SMEN: u32 = 16;
pub const RCC_APB1SMENR1_TIM7SMEN_Pos: u32 = 5;
pub const RCC_APB1SMENR1_TIM7SMEN_Msk: u32 = 32;
pub const RCC_APB1SMENR1_TIM7SMEN: u32 = 32;
pub const RCC_APB1SMENR1_CRSSMEN_Pos: u32 = 8;
pub const RCC_APB1SMENR1_CRSSMEN_Msk: u32 = 256;
pub const RCC_APB1SMENR1_CRSSMEN: u32 = 256;
pub const RCC_APB1SMENR1_RTCAPBSMEN_Pos: u32 = 10;
pub const RCC_APB1SMENR1_RTCAPBSMEN_Msk: u32 = 1024;
pub const RCC_APB1SMENR1_RTCAPBSMEN: u32 = 1024;
pub const RCC_APB1SMENR1_WWDGSMEN_Pos: u32 = 11;
pub const RCC_APB1SMENR1_WWDGSMEN_Msk: u32 = 2048;
pub const RCC_APB1SMENR1_WWDGSMEN: u32 = 2048;
pub const RCC_APB1SMENR1_SPI2SMEN_Pos: u32 = 14;
pub const RCC_APB1SMENR1_SPI2SMEN_Msk: u32 = 16384;
pub const RCC_APB1SMENR1_SPI2SMEN: u32 = 16384;
pub const RCC_APB1SMENR1_SPI3SMEN_Pos: u32 = 15;
pub const RCC_APB1SMENR1_SPI3SMEN_Msk: u32 = 32768;
pub const RCC_APB1SMENR1_SPI3SMEN: u32 = 32768;
pub const RCC_APB1SMENR1_USART2SMEN_Pos: u32 = 17;
pub const RCC_APB1SMENR1_USART2SMEN_Msk: u32 = 131072;
pub const RCC_APB1SMENR1_USART2SMEN: u32 = 131072;
pub const RCC_APB1SMENR1_USART3SMEN_Pos: u32 = 18;
pub const RCC_APB1SMENR1_USART3SMEN_Msk: u32 = 262144;
pub const RCC_APB1SMENR1_USART3SMEN: u32 = 262144;
pub const RCC_APB1SMENR1_UART4SMEN_Pos: u32 = 19;
pub const RCC_APB1SMENR1_UART4SMEN_Msk: u32 = 524288;
pub const RCC_APB1SMENR1_UART4SMEN: u32 = 524288;
pub const RCC_APB1SMENR1_I2C1SMEN_Pos: u32 = 21;
pub const RCC_APB1SMENR1_I2C1SMEN_Msk: u32 = 2097152;
pub const RCC_APB1SMENR1_I2C1SMEN: u32 = 2097152;
pub const RCC_APB1SMENR1_I2C2SMEN_Pos: u32 = 22;
pub const RCC_APB1SMENR1_I2C2SMEN_Msk: u32 = 4194304;
pub const RCC_APB1SMENR1_I2C2SMEN: u32 = 4194304;
pub const RCC_APB1SMENR1_USBSMEN_Pos: u32 = 23;
pub const RCC_APB1SMENR1_USBSMEN_Msk: u32 = 8388608;
pub const RCC_APB1SMENR1_USBSMEN: u32 = 8388608;
pub const RCC_APB1SMENR1_FDCANSMEN_Pos: u32 = 25;
pub const RCC_APB1SMENR1_FDCANSMEN_Msk: u32 = 33554432;
pub const RCC_APB1SMENR1_FDCANSMEN: u32 = 33554432;
pub const RCC_APB1SMENR1_PWRSMEN_Pos: u32 = 28;
pub const RCC_APB1SMENR1_PWRSMEN_Msk: u32 = 268435456;
pub const RCC_APB1SMENR1_PWRSMEN: u32 = 268435456;
pub const RCC_APB1SMENR1_I2C3SMEN_Pos: u32 = 30;
pub const RCC_APB1SMENR1_I2C3SMEN_Msk: u32 = 1073741824;
pub const RCC_APB1SMENR1_I2C3SMEN: u32 = 1073741824;
pub const RCC_APB1SMENR1_LPTIM1SMEN_Pos: u32 = 31;
pub const RCC_APB1SMENR1_LPTIM1SMEN_Msk: u32 = 2147483648;
pub const RCC_APB1SMENR1_LPTIM1SMEN: u32 = 2147483648;
pub const RCC_APB1SMENR2_LPUART1SMEN_Pos: u32 = 0;
pub const RCC_APB1SMENR2_LPUART1SMEN_Msk: u32 = 1;
pub const RCC_APB1SMENR2_LPUART1SMEN: u32 = 1;
pub const RCC_APB1SMENR2_UCPD1SMEN_Pos: u32 = 8;
pub const RCC_APB1SMENR2_UCPD1SMEN_Msk: u32 = 256;
pub const RCC_APB1SMENR2_UCPD1SMEN: u32 = 256;
pub const RCC_APB2SMENR_SYSCFGSMEN_Pos: u32 = 0;
pub const RCC_APB2SMENR_SYSCFGSMEN_Msk: u32 = 1;
pub const RCC_APB2SMENR_SYSCFGSMEN: u32 = 1;
pub const RCC_APB2SMENR_TIM1SMEN_Pos: u32 = 11;
pub const RCC_APB2SMENR_TIM1SMEN_Msk: u32 = 2048;
pub const RCC_APB2SMENR_TIM1SMEN: u32 = 2048;
pub const RCC_APB2SMENR_SPI1SMEN_Pos: u32 = 12;
pub const RCC_APB2SMENR_SPI1SMEN_Msk: u32 = 4096;
pub const RCC_APB2SMENR_SPI1SMEN: u32 = 4096;
pub const RCC_APB2SMENR_TIM8SMEN_Pos: u32 = 13;
pub const RCC_APB2SMENR_TIM8SMEN_Msk: u32 = 8192;
pub const RCC_APB2SMENR_TIM8SMEN: u32 = 8192;
pub const RCC_APB2SMENR_USART1SMEN_Pos: u32 = 14;
pub const RCC_APB2SMENR_USART1SMEN_Msk: u32 = 16384;
pub const RCC_APB2SMENR_USART1SMEN: u32 = 16384;
pub const RCC_APB2SMENR_TIM15SMEN_Pos: u32 = 16;
pub const RCC_APB2SMENR_TIM15SMEN_Msk: u32 = 65536;
pub const RCC_APB2SMENR_TIM15SMEN: u32 = 65536;
pub const RCC_APB2SMENR_TIM16SMEN_Pos: u32 = 17;
pub const RCC_APB2SMENR_TIM16SMEN_Msk: u32 = 131072;
pub const RCC_APB2SMENR_TIM16SMEN: u32 = 131072;
pub const RCC_APB2SMENR_TIM17SMEN_Pos: u32 = 18;
pub const RCC_APB2SMENR_TIM17SMEN_Msk: u32 = 262144;
pub const RCC_APB2SMENR_TIM17SMEN: u32 = 262144;
pub const RCC_APB2SMENR_SAI1SMEN_Pos: u32 = 21;
pub const RCC_APB2SMENR_SAI1SMEN_Msk: u32 = 2097152;
pub const RCC_APB2SMENR_SAI1SMEN: u32 = 2097152;
pub const RCC_CCIPR_USART1SEL_Pos: u32 = 0;
pub const RCC_CCIPR_USART1SEL_Msk: u32 = 3;
pub const RCC_CCIPR_USART1SEL: u32 = 3;
pub const RCC_CCIPR_USART1SEL_0: u32 = 1;
pub const RCC_CCIPR_USART1SEL_1: u32 = 2;
pub const RCC_CCIPR_USART2SEL_Pos: u32 = 2;
pub const RCC_CCIPR_USART2SEL_Msk: u32 = 12;
pub const RCC_CCIPR_USART2SEL: u32 = 12;
pub const RCC_CCIPR_USART2SEL_0: u32 = 4;
pub const RCC_CCIPR_USART2SEL_1: u32 = 8;
pub const RCC_CCIPR_USART3SEL_Pos: u32 = 4;
pub const RCC_CCIPR_USART3SEL_Msk: u32 = 48;
pub const RCC_CCIPR_USART3SEL: u32 = 48;
pub const RCC_CCIPR_USART3SEL_0: u32 = 16;
pub const RCC_CCIPR_USART3SEL_1: u32 = 32;
pub const RCC_CCIPR_UART4SEL_Pos: u32 = 6;
pub const RCC_CCIPR_UART4SEL_Msk: u32 = 192;
pub const RCC_CCIPR_UART4SEL: u32 = 192;
pub const RCC_CCIPR_UART4SEL_0: u32 = 64;
pub const RCC_CCIPR_UART4SEL_1: u32 = 128;
pub const RCC_CCIPR_LPUART1SEL_Pos: u32 = 10;
pub const RCC_CCIPR_LPUART1SEL_Msk: u32 = 3072;
pub const RCC_CCIPR_LPUART1SEL: u32 = 3072;
pub const RCC_CCIPR_LPUART1SEL_0: u32 = 1024;
pub const RCC_CCIPR_LPUART1SEL_1: u32 = 2048;
pub const RCC_CCIPR_I2C1SEL_Pos: u32 = 12;
pub const RCC_CCIPR_I2C1SEL_Msk: u32 = 12288;
pub const RCC_CCIPR_I2C1SEL: u32 = 12288;
pub const RCC_CCIPR_I2C1SEL_0: u32 = 4096;
pub const RCC_CCIPR_I2C1SEL_1: u32 = 8192;
pub const RCC_CCIPR_I2C2SEL_Pos: u32 = 14;
pub const RCC_CCIPR_I2C2SEL_Msk: u32 = 49152;
pub const RCC_CCIPR_I2C2SEL: u32 = 49152;
pub const RCC_CCIPR_I2C2SEL_0: u32 = 16384;
pub const RCC_CCIPR_I2C2SEL_1: u32 = 32768;
pub const RCC_CCIPR_I2C3SEL_Pos: u32 = 16;
pub const RCC_CCIPR_I2C3SEL_Msk: u32 = 196608;
pub const RCC_CCIPR_I2C3SEL: u32 = 196608;
pub const RCC_CCIPR_I2C3SEL_0: u32 = 65536;
pub const RCC_CCIPR_I2C3SEL_1: u32 = 131072;
pub const RCC_CCIPR_LPTIM1SEL_Pos: u32 = 18;
pub const RCC_CCIPR_LPTIM1SEL_Msk: u32 = 786432;
pub const RCC_CCIPR_LPTIM1SEL: u32 = 786432;
pub const RCC_CCIPR_LPTIM1SEL_0: u32 = 262144;
pub const RCC_CCIPR_LPTIM1SEL_1: u32 = 524288;
pub const RCC_CCIPR_SAI1SEL_Pos: u32 = 20;
pub const RCC_CCIPR_SAI1SEL_Msk: u32 = 3145728;
pub const RCC_CCIPR_SAI1SEL: u32 = 3145728;
pub const RCC_CCIPR_SAI1SEL_0: u32 = 1048576;
pub const RCC_CCIPR_SAI1SEL_1: u32 = 2097152;
pub const RCC_CCIPR_I2S23SEL_Pos: u32 = 22;
pub const RCC_CCIPR_I2S23SEL_Msk: u32 = 12582912;
pub const RCC_CCIPR_I2S23SEL: u32 = 12582912;
pub const RCC_CCIPR_I2S23SEL_0: u32 = 4194304;
pub const RCC_CCIPR_I2S23SEL_1: u32 = 8388608;
pub const RCC_CCIPR_FDCANSEL_Pos: u32 = 24;
pub const RCC_CCIPR_FDCANSEL_Msk: u32 = 50331648;
pub const RCC_CCIPR_FDCANSEL: u32 = 50331648;
pub const RCC_CCIPR_FDCANSEL_0: u32 = 16777216;
pub const RCC_CCIPR_FDCANSEL_1: u32 = 33554432;
pub const RCC_CCIPR_CLK48SEL_Pos: u32 = 26;
pub const RCC_CCIPR_CLK48SEL_Msk: u32 = 201326592;
pub const RCC_CCIPR_CLK48SEL: u32 = 201326592;
pub const RCC_CCIPR_CLK48SEL_0: u32 = 67108864;
pub const RCC_CCIPR_CLK48SEL_1: u32 = 134217728;
pub const RCC_CCIPR_ADC12SEL_Pos: u32 = 28;
pub const RCC_CCIPR_ADC12SEL_Msk: u32 = 805306368;
pub const RCC_CCIPR_ADC12SEL: u32 = 805306368;
pub const RCC_CCIPR_ADC12SEL_0: u32 = 268435456;
pub const RCC_CCIPR_ADC12SEL_1: u32 = 536870912;
pub const RCC_BDCR_LSEON_Pos: u32 = 0;
pub const RCC_BDCR_LSEON_Msk: u32 = 1;
pub const RCC_BDCR_LSEON: u32 = 1;
pub const RCC_BDCR_LSERDY_Pos: u32 = 1;
pub const RCC_BDCR_LSERDY_Msk: u32 = 2;
pub const RCC_BDCR_LSERDY: u32 = 2;
pub const RCC_BDCR_LSEBYP_Pos: u32 = 2;
pub const RCC_BDCR_LSEBYP_Msk: u32 = 4;
pub const RCC_BDCR_LSEBYP: u32 = 4;
pub const RCC_BDCR_LSEDRV_Pos: u32 = 3;
pub const RCC_BDCR_LSEDRV_Msk: u32 = 24;
pub const RCC_BDCR_LSEDRV: u32 = 24;
pub const RCC_BDCR_LSEDRV_0: u32 = 8;
pub const RCC_BDCR_LSEDRV_1: u32 = 16;
pub const RCC_BDCR_LSECSSON_Pos: u32 = 5;
pub const RCC_BDCR_LSECSSON_Msk: u32 = 32;
pub const RCC_BDCR_LSECSSON: u32 = 32;
pub const RCC_BDCR_LSECSSD_Pos: u32 = 6;
pub const RCC_BDCR_LSECSSD_Msk: u32 = 64;
pub const RCC_BDCR_LSECSSD: u32 = 64;
pub const RCC_BDCR_RTCSEL_Pos: u32 = 8;
pub const RCC_BDCR_RTCSEL_Msk: u32 = 768;
pub const RCC_BDCR_RTCSEL: u32 = 768;
pub const RCC_BDCR_RTCSEL_0: u32 = 256;
pub const RCC_BDCR_RTCSEL_1: u32 = 512;
pub const RCC_BDCR_RTCEN_Pos: u32 = 15;
pub const RCC_BDCR_RTCEN_Msk: u32 = 32768;
pub const RCC_BDCR_RTCEN: u32 = 32768;
pub const RCC_BDCR_BDRST_Pos: u32 = 16;
pub const RCC_BDCR_BDRST_Msk: u32 = 65536;
pub const RCC_BDCR_BDRST: u32 = 65536;
pub const RCC_BDCR_LSCOEN_Pos: u32 = 24;
pub const RCC_BDCR_LSCOEN_Msk: u32 = 16777216;
pub const RCC_BDCR_LSCOEN: u32 = 16777216;
pub const RCC_BDCR_LSCOSEL_Pos: u32 = 25;
pub const RCC_BDCR_LSCOSEL_Msk: u32 = 33554432;
pub const RCC_BDCR_LSCOSEL: u32 = 33554432;
pub const RCC_CSR_LSION_Pos: u32 = 0;
pub const RCC_CSR_LSION_Msk: u32 = 1;
pub const RCC_CSR_LSION: u32 = 1;
pub const RCC_CSR_LSIRDY_Pos: u32 = 1;
pub const RCC_CSR_LSIRDY_Msk: u32 = 2;
pub const RCC_CSR_LSIRDY: u32 = 2;
pub const RCC_CSR_RMVF_Pos: u32 = 23;
pub const RCC_CSR_RMVF_Msk: u32 = 8388608;
pub const RCC_CSR_RMVF: u32 = 8388608;
pub const RCC_CSR_OBLRSTF_Pos: u32 = 25;
pub const RCC_CSR_OBLRSTF_Msk: u32 = 33554432;
pub const RCC_CSR_OBLRSTF: u32 = 33554432;
pub const RCC_CSR_PINRSTF_Pos: u32 = 26;
pub const RCC_CSR_PINRSTF_Msk: u32 = 67108864;
pub const RCC_CSR_PINRSTF: u32 = 67108864;
pub const RCC_CSR_BORRSTF_Pos: u32 = 27;
pub const RCC_CSR_BORRSTF_Msk: u32 = 134217728;
pub const RCC_CSR_BORRSTF: u32 = 134217728;
pub const RCC_CSR_SFTRSTF_Pos: u32 = 28;
pub const RCC_CSR_SFTRSTF_Msk: u32 = 268435456;
pub const RCC_CSR_SFTRSTF: u32 = 268435456;
pub const RCC_CSR_IWDGRSTF_Pos: u32 = 29;
pub const RCC_CSR_IWDGRSTF_Msk: u32 = 536870912;
pub const RCC_CSR_IWDGRSTF: u32 = 536870912;
pub const RCC_CSR_WWDGRSTF_Pos: u32 = 30;
pub const RCC_CSR_WWDGRSTF_Msk: u32 = 1073741824;
pub const RCC_CSR_WWDGRSTF: u32 = 1073741824;
pub const RCC_CSR_LPWRRSTF_Pos: u32 = 31;
pub const RCC_CSR_LPWRRSTF_Msk: u32 = 2147483648;
pub const RCC_CSR_LPWRRSTF: u32 = 2147483648;
pub const RCC_CRRCR_HSI48ON_Pos: u32 = 0;
pub const RCC_CRRCR_HSI48ON_Msk: u32 = 1;
pub const RCC_CRRCR_HSI48ON: u32 = 1;
pub const RCC_CRRCR_HSI48RDY_Pos: u32 = 1;
pub const RCC_CRRCR_HSI48RDY_Msk: u32 = 2;
pub const RCC_CRRCR_HSI48RDY: u32 = 2;
pub const RCC_CRRCR_HSI48CAL_Pos: u32 = 7;
pub const RCC_CRRCR_HSI48CAL_Msk: u32 = 65408;
pub const RCC_CRRCR_HSI48CAL: u32 = 65408;
pub const RCC_CRRCR_HSI48CAL_0: u32 = 128;
pub const RCC_CRRCR_HSI48CAL_1: u32 = 256;
pub const RCC_CRRCR_HSI48CAL_2: u32 = 512;
pub const RCC_CRRCR_HSI48CAL_3: u32 = 1024;
pub const RCC_CRRCR_HSI48CAL_4: u32 = 2048;
pub const RCC_CRRCR_HSI48CAL_5: u32 = 4096;
pub const RCC_CRRCR_HSI48CAL_6: u32 = 8192;
pub const RCC_CRRCR_HSI48CAL_7: u32 = 16384;
pub const RCC_CRRCR_HSI48CAL_8: u32 = 32768;
pub const RNG_CR_RNGEN_Pos: u32 = 2;
pub const RNG_CR_RNGEN_Msk: u32 = 4;
pub const RNG_CR_RNGEN: u32 = 4;
pub const RNG_CR_IE_Pos: u32 = 3;
pub const RNG_CR_IE_Msk: u32 = 8;
pub const RNG_CR_IE: u32 = 8;
pub const RNG_CR_CED_Pos: u32 = 5;
pub const RNG_CR_CED_Msk: u32 = 8;
pub const RNG_CR_CED: u32 = 8;
pub const RNG_SR_DRDY_Pos: u32 = 0;
pub const RNG_SR_DRDY_Msk: u32 = 1;
pub const RNG_SR_DRDY: u32 = 1;
pub const RNG_SR_CECS_Pos: u32 = 1;
pub const RNG_SR_CECS_Msk: u32 = 2;
pub const RNG_SR_CECS: u32 = 2;
pub const RNG_SR_SECS_Pos: u32 = 2;
pub const RNG_SR_SECS_Msk: u32 = 4;
pub const RNG_SR_SECS: u32 = 4;
pub const RNG_SR_CEIS_Pos: u32 = 5;
pub const RNG_SR_CEIS_Msk: u32 = 32;
pub const RNG_SR_CEIS: u32 = 32;
pub const RNG_SR_SEIS_Pos: u32 = 6;
pub const RNG_SR_SEIS_Msk: u32 = 64;
pub const RNG_SR_SEIS: u32 = 64;
pub const RTC_TR_PM_Pos: u32 = 22;
pub const RTC_TR_PM_Msk: u32 = 4194304;
pub const RTC_TR_PM: u32 = 4194304;
pub const RTC_TR_HT_Pos: u32 = 20;
pub const RTC_TR_HT_Msk: u32 = 3145728;
pub const RTC_TR_HT: u32 = 3145728;
pub const RTC_TR_HT_0: u32 = 1048576;
pub const RTC_TR_HT_1: u32 = 2097152;
pub const RTC_TR_HU_Pos: u32 = 16;
pub const RTC_TR_HU_Msk: u32 = 983040;
pub const RTC_TR_HU: u32 = 983040;
pub const RTC_TR_HU_0: u32 = 65536;
pub const RTC_TR_HU_1: u32 = 131072;
pub const RTC_TR_HU_2: u32 = 262144;
pub const RTC_TR_HU_3: u32 = 524288;
pub const RTC_TR_MNT_Pos: u32 = 12;
pub const RTC_TR_MNT_Msk: u32 = 28672;
pub const RTC_TR_MNT: u32 = 28672;
pub const RTC_TR_MNT_0: u32 = 4096;
pub const RTC_TR_MNT_1: u32 = 8192;
pub const RTC_TR_MNT_2: u32 = 16384;
pub const RTC_TR_MNU_Pos: u32 = 8;
pub const RTC_TR_MNU_Msk: u32 = 3840;
pub const RTC_TR_MNU: u32 = 3840;
pub const RTC_TR_MNU_0: u32 = 256;
pub const RTC_TR_MNU_1: u32 = 512;
pub const RTC_TR_MNU_2: u32 = 1024;
pub const RTC_TR_MNU_3: u32 = 2048;
pub const RTC_TR_ST_Pos: u32 = 4;
pub const RTC_TR_ST_Msk: u32 = 112;
pub const RTC_TR_ST: u32 = 112;
pub const RTC_TR_ST_0: u32 = 16;
pub const RTC_TR_ST_1: u32 = 32;
pub const RTC_TR_ST_2: u32 = 64;
pub const RTC_TR_SU_Pos: u32 = 0;
pub const RTC_TR_SU_Msk: u32 = 15;
pub const RTC_TR_SU: u32 = 15;
pub const RTC_TR_SU_0: u32 = 1;
pub const RTC_TR_SU_1: u32 = 2;
pub const RTC_TR_SU_2: u32 = 4;
pub const RTC_TR_SU_3: u32 = 8;
pub const RTC_DR_YT_Pos: u32 = 20;
pub const RTC_DR_YT_Msk: u32 = 15728640;
pub const RTC_DR_YT: u32 = 15728640;
pub const RTC_DR_YT_0: u32 = 1048576;
pub const RTC_DR_YT_1: u32 = 2097152;
pub const RTC_DR_YT_2: u32 = 4194304;
pub const RTC_DR_YT_3: u32 = 8388608;
pub const RTC_DR_YU_Pos: u32 = 16;
pub const RTC_DR_YU_Msk: u32 = 983040;
pub const RTC_DR_YU: u32 = 983040;
pub const RTC_DR_YU_0: u32 = 65536;
pub const RTC_DR_YU_1: u32 = 131072;
pub const RTC_DR_YU_2: u32 = 262144;
pub const RTC_DR_YU_3: u32 = 524288;
pub const RTC_DR_WDU_Pos: u32 = 13;
pub const RTC_DR_WDU_Msk: u32 = 57344;
pub const RTC_DR_WDU: u32 = 57344;
pub const RTC_DR_WDU_0: u32 = 8192;
pub const RTC_DR_WDU_1: u32 = 16384;
pub const RTC_DR_WDU_2: u32 = 32768;
pub const RTC_DR_MT_Pos: u32 = 12;
pub const RTC_DR_MT_Msk: u32 = 4096;
pub const RTC_DR_MT: u32 = 4096;
pub const RTC_DR_MU_Pos: u32 = 8;
pub const RTC_DR_MU_Msk: u32 = 3840;
pub const RTC_DR_MU: u32 = 3840;
pub const RTC_DR_MU_0: u32 = 256;
pub const RTC_DR_MU_1: u32 = 512;
pub const RTC_DR_MU_2: u32 = 1024;
pub const RTC_DR_MU_3: u32 = 2048;
pub const RTC_DR_DT_Pos: u32 = 4;
pub const RTC_DR_DT_Msk: u32 = 48;
pub const RTC_DR_DT: u32 = 48;
pub const RTC_DR_DT_0: u32 = 16;
pub const RTC_DR_DT_1: u32 = 32;
pub const RTC_DR_DU_Pos: u32 = 0;
pub const RTC_DR_DU_Msk: u32 = 15;
pub const RTC_DR_DU: u32 = 15;
pub const RTC_DR_DU_0: u32 = 1;
pub const RTC_DR_DU_1: u32 = 2;
pub const RTC_DR_DU_2: u32 = 4;
pub const RTC_DR_DU_3: u32 = 8;
pub const RTC_SSR_SS_Pos: u32 = 0;
pub const RTC_SSR_SS_Msk: u32 = 65535;
pub const RTC_SSR_SS: u32 = 65535;
pub const RTC_ICSR_RECALPF_Pos: u32 = 16;
pub const RTC_ICSR_RECALPF_Msk: u32 = 65536;
pub const RTC_ICSR_RECALPF: u32 = 65536;
pub const RTC_ICSR_INIT_Pos: u32 = 7;
pub const RTC_ICSR_INIT_Msk: u32 = 128;
pub const RTC_ICSR_INIT: u32 = 128;
pub const RTC_ICSR_INITF_Pos: u32 = 6;
pub const RTC_ICSR_INITF_Msk: u32 = 64;
pub const RTC_ICSR_INITF: u32 = 64;
pub const RTC_ICSR_RSF_Pos: u32 = 5;
pub const RTC_ICSR_RSF_Msk: u32 = 32;
pub const RTC_ICSR_RSF: u32 = 32;
pub const RTC_ICSR_INITS_Pos: u32 = 4;
pub const RTC_ICSR_INITS_Msk: u32 = 16;
pub const RTC_ICSR_INITS: u32 = 16;
pub const RTC_ICSR_SHPF_Pos: u32 = 3;
pub const RTC_ICSR_SHPF_Msk: u32 = 8;
pub const RTC_ICSR_SHPF: u32 = 8;
pub const RTC_ICSR_WUTWF_Pos: u32 = 2;
pub const RTC_ICSR_WUTWF_Msk: u32 = 4;
pub const RTC_ICSR_WUTWF: u32 = 4;
pub const RTC_ICSR_ALRBWF_Pos: u32 = 1;
pub const RTC_ICSR_ALRBWF_Msk: u32 = 2;
pub const RTC_ICSR_ALRBWF: u32 = 2;
pub const RTC_ICSR_ALRAWF_Pos: u32 = 0;
pub const RTC_ICSR_ALRAWF_Msk: u32 = 1;
pub const RTC_ICSR_ALRAWF: u32 = 1;
pub const RTC_PRER_PREDIV_A_Pos: u32 = 16;
pub const RTC_PRER_PREDIV_A_Msk: u32 = 8323072;
pub const RTC_PRER_PREDIV_A: u32 = 8323072;
pub const RTC_PRER_PREDIV_S_Pos: u32 = 0;
pub const RTC_PRER_PREDIV_S_Msk: u32 = 32767;
pub const RTC_PRER_PREDIV_S: u32 = 32767;
pub const RTC_WUTR_WUT_Pos: u32 = 0;
pub const RTC_WUTR_WUT_Msk: u32 = 65535;
pub const RTC_WUTR_WUT: u32 = 65535;
pub const RTC_CR_OUT2EN_Pos: u32 = 31;
pub const RTC_CR_OUT2EN_Msk: u32 = 2147483648;
pub const RTC_CR_OUT2EN: u32 = 2147483648;
pub const RTC_CR_TAMPALRM_TYPE_Pos: u32 = 30;
pub const RTC_CR_TAMPALRM_TYPE_Msk: u32 = 1073741824;
pub const RTC_CR_TAMPALRM_TYPE: u32 = 1073741824;
pub const RTC_CR_TAMPALRM_PU_Pos: u32 = 29;
pub const RTC_CR_TAMPALRM_PU_Msk: u32 = 536870912;
pub const RTC_CR_TAMPALRM_PU: u32 = 536870912;
pub const RTC_CR_TAMPOE_Pos: u32 = 26;
pub const RTC_CR_TAMPOE_Msk: u32 = 67108864;
pub const RTC_CR_TAMPOE: u32 = 67108864;
pub const RTC_CR_TAMPTS_Pos: u32 = 25;
pub const RTC_CR_TAMPTS_Msk: u32 = 33554432;
pub const RTC_CR_TAMPTS: u32 = 33554432;
pub const RTC_CR_ITSE_Pos: u32 = 24;
pub const RTC_CR_ITSE_Msk: u32 = 16777216;
pub const RTC_CR_ITSE: u32 = 16777216;
pub const RTC_CR_COE_Pos: u32 = 23;
pub const RTC_CR_COE_Msk: u32 = 8388608;
pub const RTC_CR_COE: u32 = 8388608;
pub const RTC_CR_OSEL_Pos: u32 = 21;
pub const RTC_CR_OSEL_Msk: u32 = 6291456;
pub const RTC_CR_OSEL: u32 = 6291456;
pub const RTC_CR_OSEL_0: u32 = 2097152;
pub const RTC_CR_OSEL_1: u32 = 4194304;
pub const RTC_CR_POL_Pos: u32 = 20;
pub const RTC_CR_POL_Msk: u32 = 1048576;
pub const RTC_CR_POL: u32 = 1048576;
pub const RTC_CR_COSEL_Pos: u32 = 19;
pub const RTC_CR_COSEL_Msk: u32 = 524288;
pub const RTC_CR_COSEL: u32 = 524288;
pub const RTC_CR_BKP_Pos: u32 = 18;
pub const RTC_CR_BKP_Msk: u32 = 262144;
pub const RTC_CR_BKP: u32 = 262144;
pub const RTC_CR_SUB1H_Pos: u32 = 17;
pub const RTC_CR_SUB1H_Msk: u32 = 131072;
pub const RTC_CR_SUB1H: u32 = 131072;
pub const RTC_CR_ADD1H_Pos: u32 = 16;
pub const RTC_CR_ADD1H_Msk: u32 = 65536;
pub const RTC_CR_ADD1H: u32 = 65536;
pub const RTC_CR_TSIE_Pos: u32 = 15;
pub const RTC_CR_TSIE_Msk: u32 = 32768;
pub const RTC_CR_TSIE: u32 = 32768;
pub const RTC_CR_WUTIE_Pos: u32 = 14;
pub const RTC_CR_WUTIE_Msk: u32 = 16384;
pub const RTC_CR_WUTIE: u32 = 16384;
pub const RTC_CR_ALRBIE_Pos: u32 = 13;
pub const RTC_CR_ALRBIE_Msk: u32 = 8192;
pub const RTC_CR_ALRBIE: u32 = 8192;
pub const RTC_CR_ALRAIE_Pos: u32 = 12;
pub const RTC_CR_ALRAIE_Msk: u32 = 4096;
pub const RTC_CR_ALRAIE: u32 = 4096;
pub const RTC_CR_TSE_Pos: u32 = 11;
pub const RTC_CR_TSE_Msk: u32 = 2048;
pub const RTC_CR_TSE: u32 = 2048;
pub const RTC_CR_WUTE_Pos: u32 = 10;
pub const RTC_CR_WUTE_Msk: u32 = 1024;
pub const RTC_CR_WUTE: u32 = 1024;
pub const RTC_CR_ALRBE_Pos: u32 = 9;
pub const RTC_CR_ALRBE_Msk: u32 = 512;
pub const RTC_CR_ALRBE: u32 = 512;
pub const RTC_CR_ALRAE_Pos: u32 = 8;
pub const RTC_CR_ALRAE_Msk: u32 = 256;
pub const RTC_CR_ALRAE: u32 = 256;
pub const RTC_CR_FMT_Pos: u32 = 6;
pub const RTC_CR_FMT_Msk: u32 = 64;
pub const RTC_CR_FMT: u32 = 64;
pub const RTC_CR_BYPSHAD_Pos: u32 = 5;
pub const RTC_CR_BYPSHAD_Msk: u32 = 32;
pub const RTC_CR_BYPSHAD: u32 = 32;
pub const RTC_CR_REFCKON_Pos: u32 = 4;
pub const RTC_CR_REFCKON_Msk: u32 = 16;
pub const RTC_CR_REFCKON: u32 = 16;
pub const RTC_CR_TSEDGE_Pos: u32 = 3;
pub const RTC_CR_TSEDGE_Msk: u32 = 8;
pub const RTC_CR_TSEDGE: u32 = 8;
pub const RTC_CR_WUCKSEL_Pos: u32 = 0;
pub const RTC_CR_WUCKSEL_Msk: u32 = 7;
pub const RTC_CR_WUCKSEL: u32 = 7;
pub const RTC_CR_WUCKSEL_0: u32 = 1;
pub const RTC_CR_WUCKSEL_1: u32 = 2;
pub const RTC_CR_WUCKSEL_2: u32 = 4;
pub const RTC_WPR_KEY_Pos: u32 = 0;
pub const RTC_WPR_KEY_Msk: u32 = 255;
pub const RTC_WPR_KEY: u32 = 255;
pub const RTC_CALR_CALP_Pos: u32 = 15;
pub const RTC_CALR_CALP_Msk: u32 = 32768;
pub const RTC_CALR_CALP: u32 = 32768;
pub const RTC_CALR_CALW8_Pos: u32 = 14;
pub const RTC_CALR_CALW8_Msk: u32 = 16384;
pub const RTC_CALR_CALW8: u32 = 16384;
pub const RTC_CALR_CALW16_Pos: u32 = 13;
pub const RTC_CALR_CALW16_Msk: u32 = 8192;
pub const RTC_CALR_CALW16: u32 = 8192;
pub const RTC_CALR_CALM_Pos: u32 = 0;
pub const RTC_CALR_CALM_Msk: u32 = 511;
pub const RTC_CALR_CALM: u32 = 511;
pub const RTC_CALR_CALM_0: u32 = 1;
pub const RTC_CALR_CALM_1: u32 = 2;
pub const RTC_CALR_CALM_2: u32 = 4;
pub const RTC_CALR_CALM_3: u32 = 8;
pub const RTC_CALR_CALM_4: u32 = 16;
pub const RTC_CALR_CALM_5: u32 = 32;
pub const RTC_CALR_CALM_6: u32 = 64;
pub const RTC_CALR_CALM_7: u32 = 128;
pub const RTC_CALR_CALM_8: u32 = 256;
pub const RTC_SHIFTR_SUBFS_Pos: u32 = 0;
pub const RTC_SHIFTR_SUBFS_Msk: u32 = 32767;
pub const RTC_SHIFTR_SUBFS: u32 = 32767;
pub const RTC_SHIFTR_ADD1S_Pos: u32 = 31;
pub const RTC_SHIFTR_ADD1S_Msk: u32 = 2147483648;
pub const RTC_SHIFTR_ADD1S: u32 = 2147483648;
pub const RTC_TSTR_PM_Pos: u32 = 22;
pub const RTC_TSTR_PM_Msk: u32 = 4194304;
pub const RTC_TSTR_PM: u32 = 4194304;
pub const RTC_TSTR_HT_Pos: u32 = 20;
pub const RTC_TSTR_HT_Msk: u32 = 3145728;
pub const RTC_TSTR_HT: u32 = 3145728;
pub const RTC_TSTR_HT_0: u32 = 1048576;
pub const RTC_TSTR_HT_1: u32 = 2097152;
pub const RTC_TSTR_HU_Pos: u32 = 16;
pub const RTC_TSTR_HU_Msk: u32 = 983040;
pub const RTC_TSTR_HU: u32 = 983040;
pub const RTC_TSTR_HU_0: u32 = 65536;
pub const RTC_TSTR_HU_1: u32 = 131072;
pub const RTC_TSTR_HU_2: u32 = 262144;
pub const RTC_TSTR_HU_3: u32 = 524288;
pub const RTC_TSTR_MNT_Pos: u32 = 12;
pub const RTC_TSTR_MNT_Msk: u32 = 28672;
pub const RTC_TSTR_MNT: u32 = 28672;
pub const RTC_TSTR_MNT_0: u32 = 4096;
pub const RTC_TSTR_MNT_1: u32 = 8192;
pub const RTC_TSTR_MNT_2: u32 = 16384;
pub const RTC_TSTR_MNU_Pos: u32 = 8;
pub const RTC_TSTR_MNU_Msk: u32 = 3840;
pub const RTC_TSTR_MNU: u32 = 3840;
pub const RTC_TSTR_MNU_0: u32 = 256;
pub const RTC_TSTR_MNU_1: u32 = 512;
pub const RTC_TSTR_MNU_2: u32 = 1024;
pub const RTC_TSTR_MNU_3: u32 = 2048;
pub const RTC_TSTR_ST_Pos: u32 = 4;
pub const RTC_TSTR_ST_Msk: u32 = 112;
pub const RTC_TSTR_ST: u32 = 112;
pub const RTC_TSTR_ST_0: u32 = 16;
pub const RTC_TSTR_ST_1: u32 = 32;
pub const RTC_TSTR_ST_2: u32 = 64;
pub const RTC_TSTR_SU_Pos: u32 = 0;
pub const RTC_TSTR_SU_Msk: u32 = 15;
pub const RTC_TSTR_SU: u32 = 15;
pub const RTC_TSTR_SU_0: u32 = 1;
pub const RTC_TSTR_SU_1: u32 = 2;
pub const RTC_TSTR_SU_2: u32 = 4;
pub const RTC_TSTR_SU_3: u32 = 8;
pub const RTC_TSDR_WDU_Pos: u32 = 13;
pub const RTC_TSDR_WDU_Msk: u32 = 57344;
pub const RTC_TSDR_WDU: u32 = 57344;
pub const RTC_TSDR_WDU_0: u32 = 8192;
pub const RTC_TSDR_WDU_1: u32 = 16384;
pub const RTC_TSDR_WDU_2: u32 = 32768;
pub const RTC_TSDR_MT_Pos: u32 = 12;
pub const RTC_TSDR_MT_Msk: u32 = 4096;
pub const RTC_TSDR_MT: u32 = 4096;
pub const RTC_TSDR_MU_Pos: u32 = 8;
pub const RTC_TSDR_MU_Msk: u32 = 3840;
pub const RTC_TSDR_MU: u32 = 3840;
pub const RTC_TSDR_MU_0: u32 = 256;
pub const RTC_TSDR_MU_1: u32 = 512;
pub const RTC_TSDR_MU_2: u32 = 1024;
pub const RTC_TSDR_MU_3: u32 = 2048;
pub const RTC_TSDR_DT_Pos: u32 = 4;
pub const RTC_TSDR_DT_Msk: u32 = 48;
pub const RTC_TSDR_DT: u32 = 48;
pub const RTC_TSDR_DT_0: u32 = 16;
pub const RTC_TSDR_DT_1: u32 = 32;
pub const RTC_TSDR_DU_Pos: u32 = 0;
pub const RTC_TSDR_DU_Msk: u32 = 15;
pub const RTC_TSDR_DU: u32 = 15;
pub const RTC_TSDR_DU_0: u32 = 1;
pub const RTC_TSDR_DU_1: u32 = 2;
pub const RTC_TSDR_DU_2: u32 = 4;
pub const RTC_TSDR_DU_3: u32 = 8;
pub const RTC_TSSSR_SS_Pos: u32 = 0;
pub const RTC_TSSSR_SS_Msk: u32 = 65535;
pub const RTC_TSSSR_SS: u32 = 65535;
pub const RTC_ALRMAR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMAR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMAR_MSK4: u32 = 2147483648;
pub const RTC_ALRMAR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMAR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMAR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMAR_DT_Pos: u32 = 28;
pub const RTC_ALRMAR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMAR_DT: u32 = 805306368;
pub const RTC_ALRMAR_DT_0: u32 = 268435456;
pub const RTC_ALRMAR_DT_1: u32 = 536870912;
pub const RTC_ALRMAR_DU_Pos: u32 = 24;
pub const RTC_ALRMAR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMAR_DU: u32 = 251658240;
pub const RTC_ALRMAR_DU_0: u32 = 16777216;
pub const RTC_ALRMAR_DU_1: u32 = 33554432;
pub const RTC_ALRMAR_DU_2: u32 = 67108864;
pub const RTC_ALRMAR_DU_3: u32 = 134217728;
pub const RTC_ALRMAR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMAR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMAR_MSK3: u32 = 8388608;
pub const RTC_ALRMAR_PM_Pos: u32 = 22;
pub const RTC_ALRMAR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMAR_PM: u32 = 4194304;
pub const RTC_ALRMAR_HT_Pos: u32 = 20;
pub const RTC_ALRMAR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMAR_HT: u32 = 3145728;
pub const RTC_ALRMAR_HT_0: u32 = 1048576;
pub const RTC_ALRMAR_HT_1: u32 = 2097152;
pub const RTC_ALRMAR_HU_Pos: u32 = 16;
pub const RTC_ALRMAR_HU_Msk: u32 = 983040;
pub const RTC_ALRMAR_HU: u32 = 983040;
pub const RTC_ALRMAR_HU_0: u32 = 65536;
pub const RTC_ALRMAR_HU_1: u32 = 131072;
pub const RTC_ALRMAR_HU_2: u32 = 262144;
pub const RTC_ALRMAR_HU_3: u32 = 524288;
pub const RTC_ALRMAR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMAR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMAR_MSK2: u32 = 32768;
pub const RTC_ALRMAR_MNT_Pos: u32 = 12;
pub const RTC_ALRMAR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMAR_MNT: u32 = 28672;
pub const RTC_ALRMAR_MNT_0: u32 = 4096;
pub const RTC_ALRMAR_MNT_1: u32 = 8192;
pub const RTC_ALRMAR_MNT_2: u32 = 16384;
pub const RTC_ALRMAR_MNU_Pos: u32 = 8;
pub const RTC_ALRMAR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMAR_MNU: u32 = 3840;
pub const RTC_ALRMAR_MNU_0: u32 = 256;
pub const RTC_ALRMAR_MNU_1: u32 = 512;
pub const RTC_ALRMAR_MNU_2: u32 = 1024;
pub const RTC_ALRMAR_MNU_3: u32 = 2048;
pub const RTC_ALRMAR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMAR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMAR_MSK1: u32 = 128;
pub const RTC_ALRMAR_ST_Pos: u32 = 4;
pub const RTC_ALRMAR_ST_Msk: u32 = 112;
pub const RTC_ALRMAR_ST: u32 = 112;
pub const RTC_ALRMAR_ST_0: u32 = 16;
pub const RTC_ALRMAR_ST_1: u32 = 32;
pub const RTC_ALRMAR_ST_2: u32 = 64;
pub const RTC_ALRMAR_SU_Pos: u32 = 0;
pub const RTC_ALRMAR_SU_Msk: u32 = 15;
pub const RTC_ALRMAR_SU: u32 = 15;
pub const RTC_ALRMAR_SU_0: u32 = 1;
pub const RTC_ALRMAR_SU_1: u32 = 2;
pub const RTC_ALRMAR_SU_2: u32 = 4;
pub const RTC_ALRMAR_SU_3: u32 = 8;
pub const RTC_ALRMASSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMASSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMASSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMASSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMASSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMASSR_SS_Pos: u32 = 0;
pub const RTC_ALRMASSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMASSR_SS: u32 = 32767;
pub const RTC_ALRMBR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMBR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMBR_MSK4: u32 = 2147483648;
pub const RTC_ALRMBR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMBR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMBR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMBR_DT_Pos: u32 = 28;
pub const RTC_ALRMBR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMBR_DT: u32 = 805306368;
pub const RTC_ALRMBR_DT_0: u32 = 268435456;
pub const RTC_ALRMBR_DT_1: u32 = 536870912;
pub const RTC_ALRMBR_DU_Pos: u32 = 24;
pub const RTC_ALRMBR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMBR_DU: u32 = 251658240;
pub const RTC_ALRMBR_DU_0: u32 = 16777216;
pub const RTC_ALRMBR_DU_1: u32 = 33554432;
pub const RTC_ALRMBR_DU_2: u32 = 67108864;
pub const RTC_ALRMBR_DU_3: u32 = 134217728;
pub const RTC_ALRMBR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMBR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMBR_MSK3: u32 = 8388608;
pub const RTC_ALRMBR_PM_Pos: u32 = 22;
pub const RTC_ALRMBR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMBR_PM: u32 = 4194304;
pub const RTC_ALRMBR_HT_Pos: u32 = 20;
pub const RTC_ALRMBR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMBR_HT: u32 = 3145728;
pub const RTC_ALRMBR_HT_0: u32 = 1048576;
pub const RTC_ALRMBR_HT_1: u32 = 2097152;
pub const RTC_ALRMBR_HU_Pos: u32 = 16;
pub const RTC_ALRMBR_HU_Msk: u32 = 983040;
pub const RTC_ALRMBR_HU: u32 = 983040;
pub const RTC_ALRMBR_HU_0: u32 = 65536;
pub const RTC_ALRMBR_HU_1: u32 = 131072;
pub const RTC_ALRMBR_HU_2: u32 = 262144;
pub const RTC_ALRMBR_HU_3: u32 = 524288;
pub const RTC_ALRMBR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMBR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMBR_MSK2: u32 = 32768;
pub const RTC_ALRMBR_MNT_Pos: u32 = 12;
pub const RTC_ALRMBR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMBR_MNT: u32 = 28672;
pub const RTC_ALRMBR_MNT_0: u32 = 4096;
pub const RTC_ALRMBR_MNT_1: u32 = 8192;
pub const RTC_ALRMBR_MNT_2: u32 = 16384;
pub const RTC_ALRMBR_MNU_Pos: u32 = 8;
pub const RTC_ALRMBR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMBR_MNU: u32 = 3840;
pub const RTC_ALRMBR_MNU_0: u32 = 256;
pub const RTC_ALRMBR_MNU_1: u32 = 512;
pub const RTC_ALRMBR_MNU_2: u32 = 1024;
pub const RTC_ALRMBR_MNU_3: u32 = 2048;
pub const RTC_ALRMBR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMBR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMBR_MSK1: u32 = 128;
pub const RTC_ALRMBR_ST_Pos: u32 = 4;
pub const RTC_ALRMBR_ST_Msk: u32 = 112;
pub const RTC_ALRMBR_ST: u32 = 112;
pub const RTC_ALRMBR_ST_0: u32 = 16;
pub const RTC_ALRMBR_ST_1: u32 = 32;
pub const RTC_ALRMBR_ST_2: u32 = 64;
pub const RTC_ALRMBR_SU_Pos: u32 = 0;
pub const RTC_ALRMBR_SU_Msk: u32 = 15;
pub const RTC_ALRMBR_SU: u32 = 15;
pub const RTC_ALRMBR_SU_0: u32 = 1;
pub const RTC_ALRMBR_SU_1: u32 = 2;
pub const RTC_ALRMBR_SU_2: u32 = 4;
pub const RTC_ALRMBR_SU_3: u32 = 8;
pub const RTC_ALRMBSSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMBSSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMBSSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMBSSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMBSSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMBSSR_SS_Pos: u32 = 0;
pub const RTC_ALRMBSSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMBSSR_SS: u32 = 32767;
pub const RTC_SR_ITSF_Pos: u32 = 5;
pub const RTC_SR_ITSF_Msk: u32 = 32;
pub const RTC_SR_ITSF: u32 = 32;
pub const RTC_SR_TSOVF_Pos: u32 = 4;
pub const RTC_SR_TSOVF_Msk: u32 = 16;
pub const RTC_SR_TSOVF: u32 = 16;
pub const RTC_SR_TSF_Pos: u32 = 3;
pub const RTC_SR_TSF_Msk: u32 = 8;
pub const RTC_SR_TSF: u32 = 8;
pub const RTC_SR_WUTF_Pos: u32 = 2;
pub const RTC_SR_WUTF_Msk: u32 = 4;
pub const RTC_SR_WUTF: u32 = 4;
pub const RTC_SR_ALRBF_Pos: u32 = 1;
pub const RTC_SR_ALRBF_Msk: u32 = 2;
pub const RTC_SR_ALRBF: u32 = 2;
pub const RTC_SR_ALRAF_Pos: u32 = 0;
pub const RTC_SR_ALRAF_Msk: u32 = 1;
pub const RTC_SR_ALRAF: u32 = 1;
pub const RTC_MISR_ITSMF_Pos: u32 = 5;
pub const RTC_MISR_ITSMF_Msk: u32 = 32;
pub const RTC_MISR_ITSMF: u32 = 32;
pub const RTC_MISR_TSOVMF_Pos: u32 = 4;
pub const RTC_MISR_TSOVMF_Msk: u32 = 16;
pub const RTC_MISR_TSOVMF: u32 = 16;
pub const RTC_MISR_TSMF_Pos: u32 = 3;
pub const RTC_MISR_TSMF_Msk: u32 = 8;
pub const RTC_MISR_TSMF: u32 = 8;
pub const RTC_MISR_WUTMF_Pos: u32 = 2;
pub const RTC_MISR_WUTMF_Msk: u32 = 4;
pub const RTC_MISR_WUTMF: u32 = 4;
pub const RTC_MISR_ALRBMF_Pos: u32 = 1;
pub const RTC_MISR_ALRBMF_Msk: u32 = 2;
pub const RTC_MISR_ALRBMF: u32 = 2;
pub const RTC_MISR_ALRAMF_Pos: u32 = 0;
pub const RTC_MISR_ALRAMF_Msk: u32 = 1;
pub const RTC_MISR_ALRAMF: u32 = 1;
pub const RTC_SCR_CITSF_Pos: u32 = 5;
pub const RTC_SCR_CITSF_Msk: u32 = 32;
pub const RTC_SCR_CITSF: u32 = 32;
pub const RTC_SCR_CTSOVF_Pos: u32 = 4;
pub const RTC_SCR_CTSOVF_Msk: u32 = 16;
pub const RTC_SCR_CTSOVF: u32 = 16;
pub const RTC_SCR_CTSF_Pos: u32 = 3;
pub const RTC_SCR_CTSF_Msk: u32 = 8;
pub const RTC_SCR_CTSF: u32 = 8;
pub const RTC_SCR_CWUTF_Pos: u32 = 2;
pub const RTC_SCR_CWUTF_Msk: u32 = 4;
pub const RTC_SCR_CWUTF: u32 = 4;
pub const RTC_SCR_CALRBF_Pos: u32 = 1;
pub const RTC_SCR_CALRBF_Msk: u32 = 2;
pub const RTC_SCR_CALRBF: u32 = 2;
pub const RTC_SCR_CALRAF_Pos: u32 = 0;
pub const RTC_SCR_CALRAF_Msk: u32 = 1;
pub const RTC_SCR_CALRAF: u32 = 1;
pub const TAMP_CR1_TAMP1E_Pos: u32 = 0;
pub const TAMP_CR1_TAMP1E_Msk: u32 = 1;
pub const TAMP_CR1_TAMP1E: u32 = 1;
pub const TAMP_CR1_TAMP2E_Pos: u32 = 1;
pub const TAMP_CR1_TAMP2E_Msk: u32 = 2;
pub const TAMP_CR1_TAMP2E: u32 = 2;
pub const TAMP_CR1_TAMP3E_Pos: u32 = 2;
pub const TAMP_CR1_TAMP3E_Msk: u32 = 4;
pub const TAMP_CR1_TAMP3E: u32 = 4;
pub const TAMP_CR1_ITAMP3E_Pos: u32 = 18;
pub const TAMP_CR1_ITAMP3E_Msk: u32 = 262144;
pub const TAMP_CR1_ITAMP3E: u32 = 262144;
pub const TAMP_CR1_ITAMP4E_Pos: u32 = 19;
pub const TAMP_CR1_ITAMP4E_Msk: u32 = 524288;
pub const TAMP_CR1_ITAMP4E: u32 = 524288;
pub const TAMP_CR1_ITAMP5E_Pos: u32 = 20;
pub const TAMP_CR1_ITAMP5E_Msk: u32 = 1048576;
pub const TAMP_CR1_ITAMP5E: u32 = 1048576;
pub const TAMP_CR1_ITAMP6E_Pos: u32 = 21;
pub const TAMP_CR1_ITAMP6E_Msk: u32 = 2097152;
pub const TAMP_CR1_ITAMP6E: u32 = 2097152;
pub const TAMP_CR2_TAMP1NOERASE_Pos: u32 = 0;
pub const TAMP_CR2_TAMP1NOERASE_Msk: u32 = 1;
pub const TAMP_CR2_TAMP1NOERASE: u32 = 1;
pub const TAMP_CR2_TAMP2NOERASE_Pos: u32 = 1;
pub const TAMP_CR2_TAMP2NOERASE_Msk: u32 = 2;
pub const TAMP_CR2_TAMP2NOERASE: u32 = 2;
pub const TAMP_CR2_TAMP3NOERASE_Pos: u32 = 2;
pub const TAMP_CR2_TAMP3NOERASE_Msk: u32 = 4;
pub const TAMP_CR2_TAMP3NOERASE: u32 = 4;
pub const TAMP_CR2_TAMP1MF_Pos: u32 = 16;
pub const TAMP_CR2_TAMP1MF_Msk: u32 = 65536;
pub const TAMP_CR2_TAMP1MF: u32 = 65536;
pub const TAMP_CR2_TAMP2MF_Pos: u32 = 17;
pub const TAMP_CR2_TAMP2MF_Msk: u32 = 131072;
pub const TAMP_CR2_TAMP2MF: u32 = 131072;
pub const TAMP_CR2_TAMP3MF_Pos: u32 = 18;
pub const TAMP_CR2_TAMP3MF_Msk: u32 = 262144;
pub const TAMP_CR2_TAMP3MF: u32 = 262144;
pub const TAMP_CR2_TAMP1TRG_Pos: u32 = 24;
pub const TAMP_CR2_TAMP1TRG_Msk: u32 = 16777216;
pub const TAMP_CR2_TAMP1TRG: u32 = 16777216;
pub const TAMP_CR2_TAMP2TRG_Pos: u32 = 25;
pub const TAMP_CR2_TAMP2TRG_Msk: u32 = 33554432;
pub const TAMP_CR2_TAMP2TRG: u32 = 33554432;
pub const TAMP_CR2_TAMP3TRG_Pos: u32 = 26;
pub const TAMP_CR2_TAMP3TRG_Msk: u32 = 67108864;
pub const TAMP_CR2_TAMP3TRG: u32 = 67108864;
pub const TAMP_FLTCR_TAMPFREQ_0: u32 = 1;
pub const TAMP_FLTCR_TAMPFREQ_1: u32 = 2;
pub const TAMP_FLTCR_TAMPFREQ_2: u32 = 4;
pub const TAMP_FLTCR_TAMPFREQ_Pos: u32 = 0;
pub const TAMP_FLTCR_TAMPFREQ_Msk: u32 = 7;
pub const TAMP_FLTCR_TAMPFREQ: u32 = 7;
pub const TAMP_FLTCR_TAMPFLT_0: u32 = 8;
pub const TAMP_FLTCR_TAMPFLT_1: u32 = 16;
pub const TAMP_FLTCR_TAMPFLT_Pos: u32 = 3;
pub const TAMP_FLTCR_TAMPFLT_Msk: u32 = 24;
pub const TAMP_FLTCR_TAMPFLT: u32 = 24;
pub const TAMP_FLTCR_TAMPPRCH_0: u32 = 32;
pub const TAMP_FLTCR_TAMPPRCH_1: u32 = 64;
pub const TAMP_FLTCR_TAMPPRCH_Pos: u32 = 5;
pub const TAMP_FLTCR_TAMPPRCH_Msk: u32 = 96;
pub const TAMP_FLTCR_TAMPPRCH: u32 = 96;
pub const TAMP_FLTCR_TAMPPUDIS_Pos: u32 = 7;
pub const TAMP_FLTCR_TAMPPUDIS_Msk: u32 = 128;
pub const TAMP_FLTCR_TAMPPUDIS: u32 = 128;
pub const TAMP_IER_TAMP1IE_Pos: u32 = 0;
pub const TAMP_IER_TAMP1IE_Msk: u32 = 1;
pub const TAMP_IER_TAMP1IE: u32 = 1;
pub const TAMP_IER_TAMP2IE_Pos: u32 = 1;
pub const TAMP_IER_TAMP2IE_Msk: u32 = 2;
pub const TAMP_IER_TAMP2IE: u32 = 2;
pub const TAMP_IER_TAMP3IE_Pos: u32 = 2;
pub const TAMP_IER_TAMP3IE_Msk: u32 = 4;
pub const TAMP_IER_TAMP3IE: u32 = 4;
pub const TAMP_IER_ITAMP3IE_Pos: u32 = 18;
pub const TAMP_IER_ITAMP3IE_Msk: u32 = 262144;
pub const TAMP_IER_ITAMP3IE: u32 = 262144;
pub const TAMP_IER_ITAMP4IE_Pos: u32 = 19;
pub const TAMP_IER_ITAMP4IE_Msk: u32 = 524288;
pub const TAMP_IER_ITAMP4IE: u32 = 524288;
pub const TAMP_IER_ITAMP5IE_Pos: u32 = 20;
pub const TAMP_IER_ITAMP5IE_Msk: u32 = 1048576;
pub const TAMP_IER_ITAMP5IE: u32 = 1048576;
pub const TAMP_IER_ITAMP6IE_Pos: u32 = 21;
pub const TAMP_IER_ITAMP6IE_Msk: u32 = 2097152;
pub const TAMP_IER_ITAMP6IE: u32 = 2097152;
pub const TAMP_SR_TAMP1F_Pos: u32 = 0;
pub const TAMP_SR_TAMP1F_Msk: u32 = 1;
pub const TAMP_SR_TAMP1F: u32 = 1;
pub const TAMP_SR_TAMP2F_Pos: u32 = 1;
pub const TAMP_SR_TAMP2F_Msk: u32 = 2;
pub const TAMP_SR_TAMP2F: u32 = 2;
pub const TAMP_SR_TAMP3F_Pos: u32 = 2;
pub const TAMP_SR_TAMP3F_Msk: u32 = 4;
pub const TAMP_SR_TAMP3F: u32 = 4;
pub const TAMP_SR_ITAMP3F_Pos: u32 = 18;
pub const TAMP_SR_ITAMP3F_Msk: u32 = 262144;
pub const TAMP_SR_ITAMP3F: u32 = 262144;
pub const TAMP_SR_ITAMP4F_Pos: u32 = 19;
pub const TAMP_SR_ITAMP4F_Msk: u32 = 524288;
pub const TAMP_SR_ITAMP4F: u32 = 524288;
pub const TAMP_SR_ITAMP5F_Pos: u32 = 20;
pub const TAMP_SR_ITAMP5F_Msk: u32 = 1048576;
pub const TAMP_SR_ITAMP5F: u32 = 1048576;
pub const TAMP_SR_ITAMP6F_Pos: u32 = 21;
pub const TAMP_SR_ITAMP6F_Msk: u32 = 2097152;
pub const TAMP_SR_ITAMP6F: u32 = 2097152;
pub const TAMP_MISR_TAMP1MF_Pos: u32 = 0;
pub const TAMP_MISR_TAMP1MF_Msk: u32 = 1;
pub const TAMP_MISR_TAMP1MF: u32 = 1;
pub const TAMP_MISR_TAMP2MF_Pos: u32 = 1;
pub const TAMP_MISR_TAMP2MF_Msk: u32 = 2;
pub const TAMP_MISR_TAMP2MF: u32 = 2;
pub const TAMP_MISR_TAMP3MF_Pos: u32 = 2;
pub const TAMP_MISR_TAMP3MF_Msk: u32 = 4;
pub const TAMP_MISR_TAMP3MF: u32 = 4;
pub const TAMP_MISR_ITAMP3MF_Pos: u32 = 18;
pub const TAMP_MISR_ITAMP3MF_Msk: u32 = 262144;
pub const TAMP_MISR_ITAMP3MF: u32 = 262144;
pub const TAMP_MISR_ITAMP4MF_Pos: u32 = 19;
pub const TAMP_MISR_ITAMP4MF_Msk: u32 = 524288;
pub const TAMP_MISR_ITAMP4MF: u32 = 524288;
pub const TAMP_MISR_ITAMP5MF_Pos: u32 = 20;
pub const TAMP_MISR_ITAMP5MF_Msk: u32 = 1048576;
pub const TAMP_MISR_ITAMP5MF: u32 = 1048576;
pub const TAMP_MISR_ITAMP6MF_Pos: u32 = 21;
pub const TAMP_MISR_ITAMP6MF_Msk: u32 = 2097152;
pub const TAMP_MISR_ITAMP6MF: u32 = 2097152;
pub const TAMP_SCR_CTAMP1F_Pos: u32 = 0;
pub const TAMP_SCR_CTAMP1F_Msk: u32 = 1;
pub const TAMP_SCR_CTAMP1F: u32 = 1;
pub const TAMP_SCR_CTAMP2F_Pos: u32 = 1;
pub const TAMP_SCR_CTAMP2F_Msk: u32 = 2;
pub const TAMP_SCR_CTAMP2F: u32 = 2;
pub const TAMP_SCR_CTAMP3F_Pos: u32 = 2;
pub const TAMP_SCR_CTAMP3F_Msk: u32 = 4;
pub const TAMP_SCR_CTAMP3F: u32 = 4;
pub const TAMP_SCR_CITAMP3F_Pos: u32 = 18;
pub const TAMP_SCR_CITAMP3F_Msk: u32 = 262144;
pub const TAMP_SCR_CITAMP3F: u32 = 262144;
pub const TAMP_SCR_CITAMP4F_Pos: u32 = 19;
pub const TAMP_SCR_CITAMP4F_Msk: u32 = 524288;
pub const TAMP_SCR_CITAMP4F: u32 = 524288;
pub const TAMP_SCR_CITAMP5F_Pos: u32 = 20;
pub const TAMP_SCR_CITAMP5F_Msk: u32 = 1048576;
pub const TAMP_SCR_CITAMP5F: u32 = 1048576;
pub const TAMP_SCR_CITAMP6F_Pos: u32 = 21;
pub const TAMP_SCR_CITAMP6F_Msk: u32 = 2097152;
pub const TAMP_SCR_CITAMP6F: u32 = 2097152;
pub const TAMP_BKP0R_Pos: u32 = 0;
pub const TAMP_BKP0R_Msk: u32 = 4294967295;
pub const TAMP_BKP0R: u32 = 4294967295;
pub const TAMP_BKP1R_Pos: u32 = 0;
pub const TAMP_BKP1R_Msk: u32 = 4294967295;
pub const TAMP_BKP1R: u32 = 4294967295;
pub const TAMP_BKP2R_Pos: u32 = 0;
pub const TAMP_BKP2R_Msk: u32 = 4294967295;
pub const TAMP_BKP2R: u32 = 4294967295;
pub const TAMP_BKP3R_Pos: u32 = 0;
pub const TAMP_BKP3R_Msk: u32 = 4294967295;
pub const TAMP_BKP3R: u32 = 4294967295;
pub const TAMP_BKP4R_Pos: u32 = 0;
pub const TAMP_BKP4R_Msk: u32 = 4294967295;
pub const TAMP_BKP4R: u32 = 4294967295;
pub const TAMP_BKP5R_Pos: u32 = 0;
pub const TAMP_BKP5R_Msk: u32 = 4294967295;
pub const TAMP_BKP5R: u32 = 4294967295;
pub const TAMP_BKP6R_Pos: u32 = 0;
pub const TAMP_BKP6R_Msk: u32 = 4294967295;
pub const TAMP_BKP6R: u32 = 4294967295;
pub const TAMP_BKP7R_Pos: u32 = 0;
pub const TAMP_BKP7R_Msk: u32 = 4294967295;
pub const TAMP_BKP7R: u32 = 4294967295;
pub const TAMP_BKP8R_Pos: u32 = 0;
pub const TAMP_BKP8R_Msk: u32 = 4294967295;
pub const TAMP_BKP8R: u32 = 4294967295;
pub const TAMP_BKP9R_Pos: u32 = 0;
pub const TAMP_BKP9R_Msk: u32 = 4294967295;
pub const TAMP_BKP9R: u32 = 4294967295;
pub const TAMP_BKP10R_Pos: u32 = 0;
pub const TAMP_BKP10R_Msk: u32 = 4294967295;
pub const TAMP_BKP10R: u32 = 4294967295;
pub const TAMP_BKP11R_Pos: u32 = 0;
pub const TAMP_BKP11R_Msk: u32 = 4294967295;
pub const TAMP_BKP11R: u32 = 4294967295;
pub const TAMP_BKP12R_Pos: u32 = 0;
pub const TAMP_BKP12R_Msk: u32 = 4294967295;
pub const TAMP_BKP12R: u32 = 4294967295;
pub const TAMP_BKP13R_Pos: u32 = 0;
pub const TAMP_BKP13R_Msk: u32 = 4294967295;
pub const TAMP_BKP13R: u32 = 4294967295;
pub const TAMP_BKP14R_Pos: u32 = 0;
pub const TAMP_BKP14R_Msk: u32 = 4294967295;
pub const TAMP_BKP14R: u32 = 4294967295;
pub const TAMP_BKP15R_Pos: u32 = 0;
pub const TAMP_BKP15R_Msk: u32 = 4294967295;
pub const TAMP_BKP15R: u32 = 4294967295;
pub const SAI_GCR_SYNCIN_Pos: u32 = 0;
pub const SAI_GCR_SYNCIN_Msk: u32 = 3;
pub const SAI_GCR_SYNCIN: u32 = 3;
pub const SAI_GCR_SYNCIN_0: u32 = 1;
pub const SAI_GCR_SYNCIN_1: u32 = 2;
pub const SAI_GCR_SYNCOUT_Pos: u32 = 4;
pub const SAI_GCR_SYNCOUT_Msk: u32 = 48;
pub const SAI_GCR_SYNCOUT: u32 = 48;
pub const SAI_GCR_SYNCOUT_0: u32 = 16;
pub const SAI_GCR_SYNCOUT_1: u32 = 32;
pub const SAI_xCR1_MODE_Pos: u32 = 0;
pub const SAI_xCR1_MODE_Msk: u32 = 3;
pub const SAI_xCR1_MODE: u32 = 3;
pub const SAI_xCR1_MODE_0: u32 = 1;
pub const SAI_xCR1_MODE_1: u32 = 2;
pub const SAI_xCR1_PRTCFG_Pos: u32 = 2;
pub const SAI_xCR1_PRTCFG_Msk: u32 = 12;
pub const SAI_xCR1_PRTCFG: u32 = 12;
pub const SAI_xCR1_PRTCFG_0: u32 = 4;
pub const SAI_xCR1_PRTCFG_1: u32 = 8;
pub const SAI_xCR1_DS_Pos: u32 = 5;
pub const SAI_xCR1_DS_Msk: u32 = 224;
pub const SAI_xCR1_DS: u32 = 224;
pub const SAI_xCR1_DS_0: u32 = 32;
pub const SAI_xCR1_DS_1: u32 = 64;
pub const SAI_xCR1_DS_2: u32 = 128;
pub const SAI_xCR1_LSBFIRST_Pos: u32 = 8;
pub const SAI_xCR1_LSBFIRST_Msk: u32 = 256;
pub const SAI_xCR1_LSBFIRST: u32 = 256;
pub const SAI_xCR1_CKSTR_Pos: u32 = 9;
pub const SAI_xCR1_CKSTR_Msk: u32 = 512;
pub const SAI_xCR1_CKSTR: u32 = 512;
pub const SAI_xCR1_SYNCEN_Pos: u32 = 10;
pub const SAI_xCR1_SYNCEN_Msk: u32 = 3072;
pub const SAI_xCR1_SYNCEN: u32 = 3072;
pub const SAI_xCR1_SYNCEN_0: u32 = 1024;
pub const SAI_xCR1_SYNCEN_1: u32 = 2048;
pub const SAI_xCR1_MONO_Pos: u32 = 12;
pub const SAI_xCR1_MONO_Msk: u32 = 4096;
pub const SAI_xCR1_MONO: u32 = 4096;
pub const SAI_xCR1_OUTDRIV_Pos: u32 = 13;
pub const SAI_xCR1_OUTDRIV_Msk: u32 = 8192;
pub const SAI_xCR1_OUTDRIV: u32 = 8192;
pub const SAI_xCR1_SAIEN_Pos: u32 = 16;
pub const SAI_xCR1_SAIEN_Msk: u32 = 65536;
pub const SAI_xCR1_SAIEN: u32 = 65536;
pub const SAI_xCR1_DMAEN_Pos: u32 = 17;
pub const SAI_xCR1_DMAEN_Msk: u32 = 131072;
pub const SAI_xCR1_DMAEN: u32 = 131072;
pub const SAI_xCR1_NODIV_Pos: u32 = 19;
pub const SAI_xCR1_NODIV_Msk: u32 = 524288;
pub const SAI_xCR1_NODIV: u32 = 524288;
pub const SAI_xCR1_MCKDIV_Pos: u32 = 20;
pub const SAI_xCR1_MCKDIV_Msk: u32 = 66060288;
pub const SAI_xCR1_MCKDIV: u32 = 66060288;
pub const SAI_xCR1_MCKDIV_0: u32 = 1048576;
pub const SAI_xCR1_MCKDIV_1: u32 = 2097152;
pub const SAI_xCR1_MCKDIV_2: u32 = 4194304;
pub const SAI_xCR1_MCKDIV_3: u32 = 8388608;
pub const SAI_xCR1_MCKDIV_4: u32 = 16777216;
pub const SAI_xCR1_MCKDIV_5: u32 = 33554432;
pub const SAI_xCR1_OSR_Pos: u32 = 26;
pub const SAI_xCR1_OSR_Msk: u32 = 67108864;
pub const SAI_xCR1_OSR: u32 = 67108864;
pub const SAI_xCR1_MCKEN_Pos: u32 = 27;
pub const SAI_xCR1_MCKEN_Msk: u32 = 134217728;
pub const SAI_xCR1_MCKEN: u32 = 134217728;
pub const SAI_xCR2_FTH_Pos: u32 = 0;
pub const SAI_xCR2_FTH_Msk: u32 = 7;
pub const SAI_xCR2_FTH: u32 = 7;
pub const SAI_xCR2_FTH_0: u32 = 1;
pub const SAI_xCR2_FTH_1: u32 = 2;
pub const SAI_xCR2_FTH_2: u32 = 4;
pub const SAI_xCR2_FFLUSH_Pos: u32 = 3;
pub const SAI_xCR2_FFLUSH_Msk: u32 = 8;
pub const SAI_xCR2_FFLUSH: u32 = 8;
pub const SAI_xCR2_TRIS_Pos: u32 = 4;
pub const SAI_xCR2_TRIS_Msk: u32 = 16;
pub const SAI_xCR2_TRIS: u32 = 16;
pub const SAI_xCR2_MUTE_Pos: u32 = 5;
pub const SAI_xCR2_MUTE_Msk: u32 = 32;
pub const SAI_xCR2_MUTE: u32 = 32;
pub const SAI_xCR2_MUTEVAL_Pos: u32 = 6;
pub const SAI_xCR2_MUTEVAL_Msk: u32 = 64;
pub const SAI_xCR2_MUTEVAL: u32 = 64;
pub const SAI_xCR2_MUTECNT_Pos: u32 = 7;
pub const SAI_xCR2_MUTECNT_Msk: u32 = 8064;
pub const SAI_xCR2_MUTECNT: u32 = 8064;
pub const SAI_xCR2_MUTECNT_0: u32 = 128;
pub const SAI_xCR2_MUTECNT_1: u32 = 256;
pub const SAI_xCR2_MUTECNT_2: u32 = 512;
pub const SAI_xCR2_MUTECNT_3: u32 = 1024;
pub const SAI_xCR2_MUTECNT_4: u32 = 2048;
pub const SAI_xCR2_MUTECNT_5: u32 = 4096;
pub const SAI_xCR2_CPL_Pos: u32 = 13;
pub const SAI_xCR2_CPL_Msk: u32 = 8192;
pub const SAI_xCR2_CPL: u32 = 8192;
pub const SAI_xCR2_COMP_Pos: u32 = 14;
pub const SAI_xCR2_COMP_Msk: u32 = 49152;
pub const SAI_xCR2_COMP: u32 = 49152;
pub const SAI_xCR2_COMP_0: u32 = 16384;
pub const SAI_xCR2_COMP_1: u32 = 32768;
pub const SAI_xFRCR_FRL_Pos: u32 = 0;
pub const SAI_xFRCR_FRL_Msk: u32 = 255;
pub const SAI_xFRCR_FRL: u32 = 255;
pub const SAI_xFRCR_FRL_0: u32 = 1;
pub const SAI_xFRCR_FRL_1: u32 = 2;
pub const SAI_xFRCR_FRL_2: u32 = 4;
pub const SAI_xFRCR_FRL_3: u32 = 8;
pub const SAI_xFRCR_FRL_4: u32 = 16;
pub const SAI_xFRCR_FRL_5: u32 = 32;
pub const SAI_xFRCR_FRL_6: u32 = 64;
pub const SAI_xFRCR_FRL_7: u32 = 128;
pub const SAI_xFRCR_FSALL_Pos: u32 = 8;
pub const SAI_xFRCR_FSALL_Msk: u32 = 32512;
pub const SAI_xFRCR_FSALL: u32 = 32512;
pub const SAI_xFRCR_FSALL_0: u32 = 256;
pub const SAI_xFRCR_FSALL_1: u32 = 512;
pub const SAI_xFRCR_FSALL_2: u32 = 1024;
pub const SAI_xFRCR_FSALL_3: u32 = 2048;
pub const SAI_xFRCR_FSALL_4: u32 = 4096;
pub const SAI_xFRCR_FSALL_5: u32 = 8192;
pub const SAI_xFRCR_FSALL_6: u32 = 16384;
pub const SAI_xFRCR_FSDEF_Pos: u32 = 16;
pub const SAI_xFRCR_FSDEF_Msk: u32 = 65536;
pub const SAI_xFRCR_FSDEF: u32 = 65536;
pub const SAI_xFRCR_FSPOL_Pos: u32 = 17;
pub const SAI_xFRCR_FSPOL_Msk: u32 = 131072;
pub const SAI_xFRCR_FSPOL: u32 = 131072;
pub const SAI_xFRCR_FSOFF_Pos: u32 = 18;
pub const SAI_xFRCR_FSOFF_Msk: u32 = 262144;
pub const SAI_xFRCR_FSOFF: u32 = 262144;
pub const SAI_xSLOTR_FBOFF_Pos: u32 = 0;
pub const SAI_xSLOTR_FBOFF_Msk: u32 = 31;
pub const SAI_xSLOTR_FBOFF: u32 = 31;
pub const SAI_xSLOTR_FBOFF_0: u32 = 1;
pub const SAI_xSLOTR_FBOFF_1: u32 = 2;
pub const SAI_xSLOTR_FBOFF_2: u32 = 4;
pub const SAI_xSLOTR_FBOFF_3: u32 = 8;
pub const SAI_xSLOTR_FBOFF_4: u32 = 16;
pub const SAI_xSLOTR_SLOTSZ_Pos: u32 = 6;
pub const SAI_xSLOTR_SLOTSZ_Msk: u32 = 192;
pub const SAI_xSLOTR_SLOTSZ: u32 = 192;
pub const SAI_xSLOTR_SLOTSZ_0: u32 = 64;
pub const SAI_xSLOTR_SLOTSZ_1: u32 = 128;
pub const SAI_xSLOTR_NBSLOT_Pos: u32 = 8;
pub const SAI_xSLOTR_NBSLOT_Msk: u32 = 3840;
pub const SAI_xSLOTR_NBSLOT: u32 = 3840;
pub const SAI_xSLOTR_NBSLOT_0: u32 = 256;
pub const SAI_xSLOTR_NBSLOT_1: u32 = 512;
pub const SAI_xSLOTR_NBSLOT_2: u32 = 1024;
pub const SAI_xSLOTR_NBSLOT_3: u32 = 2048;
pub const SAI_xSLOTR_SLOTEN_Pos: u32 = 16;
pub const SAI_xSLOTR_SLOTEN_Msk: u32 = 4294901760;
pub const SAI_xSLOTR_SLOTEN: u32 = 4294901760;
pub const SAI_xIMR_OVRUDRIE_Pos: u32 = 0;
pub const SAI_xIMR_OVRUDRIE_Msk: u32 = 1;
pub const SAI_xIMR_OVRUDRIE: u32 = 1;
pub const SAI_xIMR_MUTEDETIE_Pos: u32 = 1;
pub const SAI_xIMR_MUTEDETIE_Msk: u32 = 2;
pub const SAI_xIMR_MUTEDETIE: u32 = 2;
pub const SAI_xIMR_WCKCFGIE_Pos: u32 = 2;
pub const SAI_xIMR_WCKCFGIE_Msk: u32 = 4;
pub const SAI_xIMR_WCKCFGIE: u32 = 4;
pub const SAI_xIMR_FREQIE_Pos: u32 = 3;
pub const SAI_xIMR_FREQIE_Msk: u32 = 8;
pub const SAI_xIMR_FREQIE: u32 = 8;
pub const SAI_xIMR_CNRDYIE_Pos: u32 = 4;
pub const SAI_xIMR_CNRDYIE_Msk: u32 = 16;
pub const SAI_xIMR_CNRDYIE: u32 = 16;
pub const SAI_xIMR_AFSDETIE_Pos: u32 = 5;
pub const SAI_xIMR_AFSDETIE_Msk: u32 = 32;
pub const SAI_xIMR_AFSDETIE: u32 = 32;
pub const SAI_xIMR_LFSDETIE_Pos: u32 = 6;
pub const SAI_xIMR_LFSDETIE_Msk: u32 = 64;
pub const SAI_xIMR_LFSDETIE: u32 = 64;
pub const SAI_xSR_OVRUDR_Pos: u32 = 0;
pub const SAI_xSR_OVRUDR_Msk: u32 = 1;
pub const SAI_xSR_OVRUDR: u32 = 1;
pub const SAI_xSR_MUTEDET_Pos: u32 = 1;
pub const SAI_xSR_MUTEDET_Msk: u32 = 2;
pub const SAI_xSR_MUTEDET: u32 = 2;
pub const SAI_xSR_WCKCFG_Pos: u32 = 2;
pub const SAI_xSR_WCKCFG_Msk: u32 = 4;
pub const SAI_xSR_WCKCFG: u32 = 4;
pub const SAI_xSR_FREQ_Pos: u32 = 3;
pub const SAI_xSR_FREQ_Msk: u32 = 8;
pub const SAI_xSR_FREQ: u32 = 8;
pub const SAI_xSR_CNRDY_Pos: u32 = 4;
pub const SAI_xSR_CNRDY_Msk: u32 = 16;
pub const SAI_xSR_CNRDY: u32 = 16;
pub const SAI_xSR_AFSDET_Pos: u32 = 5;
pub const SAI_xSR_AFSDET_Msk: u32 = 32;
pub const SAI_xSR_AFSDET: u32 = 32;
pub const SAI_xSR_LFSDET_Pos: u32 = 6;
pub const SAI_xSR_LFSDET_Msk: u32 = 64;
pub const SAI_xSR_LFSDET: u32 = 64;
pub const SAI_xSR_FLVL_Pos: u32 = 16;
pub const SAI_xSR_FLVL_Msk: u32 = 458752;
pub const SAI_xSR_FLVL: u32 = 458752;
pub const SAI_xSR_FLVL_0: u32 = 65536;
pub const SAI_xSR_FLVL_1: u32 = 131072;
pub const SAI_xSR_FLVL_2: u32 = 262144;
pub const SAI_xCLRFR_COVRUDR_Pos: u32 = 0;
pub const SAI_xCLRFR_COVRUDR_Msk: u32 = 1;
pub const SAI_xCLRFR_COVRUDR: u32 = 1;
pub const SAI_xCLRFR_CMUTEDET_Pos: u32 = 1;
pub const SAI_xCLRFR_CMUTEDET_Msk: u32 = 2;
pub const SAI_xCLRFR_CMUTEDET: u32 = 2;
pub const SAI_xCLRFR_CWCKCFG_Pos: u32 = 2;
pub const SAI_xCLRFR_CWCKCFG_Msk: u32 = 4;
pub const SAI_xCLRFR_CWCKCFG: u32 = 4;
pub const SAI_xCLRFR_CFREQ_Pos: u32 = 3;
pub const SAI_xCLRFR_CFREQ_Msk: u32 = 8;
pub const SAI_xCLRFR_CFREQ: u32 = 8;
pub const SAI_xCLRFR_CCNRDY_Pos: u32 = 4;
pub const SAI_xCLRFR_CCNRDY_Msk: u32 = 16;
pub const SAI_xCLRFR_CCNRDY: u32 = 16;
pub const SAI_xCLRFR_CAFSDET_Pos: u32 = 5;
pub const SAI_xCLRFR_CAFSDET_Msk: u32 = 32;
pub const SAI_xCLRFR_CAFSDET: u32 = 32;
pub const SAI_xCLRFR_CLFSDET_Pos: u32 = 6;
pub const SAI_xCLRFR_CLFSDET_Msk: u32 = 64;
pub const SAI_xCLRFR_CLFSDET: u32 = 64;
pub const SAI_xDR_DATA_Pos: u32 = 0;
pub const SAI_xDR_DATA_Msk: u32 = 4294967295;
pub const SAI_xDR_DATA: u32 = 4294967295;
pub const SAI_PDMCR_PDMEN_Pos: u32 = 0;
pub const SAI_PDMCR_PDMEN_Msk: u32 = 1;
pub const SAI_PDMCR_PDMEN: u32 = 1;
pub const SAI_PDMCR_MICNBR_Pos: u32 = 4;
pub const SAI_PDMCR_MICNBR_Msk: u32 = 48;
pub const SAI_PDMCR_MICNBR: u32 = 48;
pub const SAI_PDMCR_MICNBR_0: u32 = 16;
pub const SAI_PDMCR_MICNBR_1: u32 = 32;
pub const SAI_PDMCR_CKEN1_Pos: u32 = 8;
pub const SAI_PDMCR_CKEN1_Msk: u32 = 256;
pub const SAI_PDMCR_CKEN1: u32 = 256;
pub const SAI_PDMCR_CKEN2_Pos: u32 = 9;
pub const SAI_PDMCR_CKEN2_Msk: u32 = 512;
pub const SAI_PDMCR_CKEN2: u32 = 512;
pub const SAI_PDMCR_CKEN3_Pos: u32 = 10;
pub const SAI_PDMCR_CKEN3_Msk: u32 = 1024;
pub const SAI_PDMCR_CKEN3: u32 = 1024;
pub const SAI_PDMCR_CKEN4_Pos: u32 = 11;
pub const SAI_PDMCR_CKEN4_Msk: u32 = 2048;
pub const SAI_PDMCR_CKEN4: u32 = 2048;
pub const SAI_PDMDLY_DLYM1L_Pos: u32 = 0;
pub const SAI_PDMDLY_DLYM1L_Msk: u32 = 7;
pub const SAI_PDMDLY_DLYM1L: u32 = 7;
pub const SAI_PDMDLY_DLYM1L_0: u32 = 1;
pub const SAI_PDMDLY_DLYM1L_1: u32 = 2;
pub const SAI_PDMDLY_DLYM1L_2: u32 = 4;
pub const SAI_PDMDLY_DLYM1R_Pos: u32 = 4;
pub const SAI_PDMDLY_DLYM1R_Msk: u32 = 112;
pub const SAI_PDMDLY_DLYM1R: u32 = 112;
pub const SAI_PDMDLY_DLYM1R_0: u32 = 16;
pub const SAI_PDMDLY_DLYM1R_1: u32 = 32;
pub const SAI_PDMDLY_DLYM1R_2: u32 = 64;
pub const SAI_PDMDLY_DLYM2L_Pos: u32 = 8;
pub const SAI_PDMDLY_DLYM2L_Msk: u32 = 1792;
pub const SAI_PDMDLY_DLYM2L: u32 = 1792;
pub const SAI_PDMDLY_DLYM2L_0: u32 = 256;
pub const SAI_PDMDLY_DLYM2L_1: u32 = 512;
pub const SAI_PDMDLY_DLYM2L_2: u32 = 1024;
pub const SAI_PDMDLY_DLYM2R_Pos: u32 = 12;
pub const SAI_PDMDLY_DLYM2R_Msk: u32 = 28672;
pub const SAI_PDMDLY_DLYM2R: u32 = 28672;
pub const SAI_PDMDLY_DLYM2R_0: u32 = 4096;
pub const SAI_PDMDLY_DLYM2R_1: u32 = 8192;
pub const SAI_PDMDLY_DLYM2R_2: u32 = 16384;
pub const SAI_PDMDLY_DLYM3L_Pos: u32 = 16;
pub const SAI_PDMDLY_DLYM3L_Msk: u32 = 458752;
pub const SAI_PDMDLY_DLYM3L: u32 = 458752;
pub const SAI_PDMDLY_DLYM3L_0: u32 = 65536;
pub const SAI_PDMDLY_DLYM3L_1: u32 = 131072;
pub const SAI_PDMDLY_DLYM3L_2: u32 = 262144;
pub const SAI_PDMDLY_DLYM3R_Pos: u32 = 20;
pub const SAI_PDMDLY_DLYM3R_Msk: u32 = 7340032;
pub const SAI_PDMDLY_DLYM3R: u32 = 7340032;
pub const SAI_PDMDLY_DLYM3R_0: u32 = 1048576;
pub const SAI_PDMDLY_DLYM3R_1: u32 = 2097152;
pub const SAI_PDMDLY_DLYM3R_2: u32 = 4194304;
pub const SAI_PDMDLY_DLYM4L_Pos: u32 = 24;
pub const SAI_PDMDLY_DLYM4L_Msk: u32 = 117440512;
pub const SAI_PDMDLY_DLYM4L: u32 = 117440512;
pub const SAI_PDMDLY_DLYM4L_0: u32 = 16777216;
pub const SAI_PDMDLY_DLYM4L_1: u32 = 33554432;
pub const SAI_PDMDLY_DLYM4L_2: u32 = 67108864;
pub const SAI_PDMDLY_DLYM4R_Pos: u32 = 28;
pub const SAI_PDMDLY_DLYM4R_Msk: u32 = 1879048192;
pub const SAI_PDMDLY_DLYM4R: u32 = 1879048192;
pub const SAI_PDMDLY_DLYM4R_0: u32 = 268435456;
pub const SAI_PDMDLY_DLYM4R_1: u32 = 536870912;
pub const SAI_PDMDLY_DLYM4R_2: u32 = 1073741824;
pub const SPI_CR1_CPHA_Pos: u32 = 0;
pub const SPI_CR1_CPHA_Msk: u32 = 1;
pub const SPI_CR1_CPHA: u32 = 1;
pub const SPI_CR1_CPOL_Pos: u32 = 1;
pub const SPI_CR1_CPOL_Msk: u32 = 2;
pub const SPI_CR1_CPOL: u32 = 2;
pub const SPI_CR1_MSTR_Pos: u32 = 2;
pub const SPI_CR1_MSTR_Msk: u32 = 4;
pub const SPI_CR1_MSTR: u32 = 4;
pub const SPI_CR1_BR_Pos: u32 = 3;
pub const SPI_CR1_BR_Msk: u32 = 56;
pub const SPI_CR1_BR: u32 = 56;
pub const SPI_CR1_BR_0: u32 = 8;
pub const SPI_CR1_BR_1: u32 = 16;
pub const SPI_CR1_BR_2: u32 = 32;
pub const SPI_CR1_SPE_Pos: u32 = 6;
pub const SPI_CR1_SPE_Msk: u32 = 64;
pub const SPI_CR1_SPE: u32 = 64;
pub const SPI_CR1_LSBFIRST_Pos: u32 = 7;
pub const SPI_CR1_LSBFIRST_Msk: u32 = 128;
pub const SPI_CR1_LSBFIRST: u32 = 128;
pub const SPI_CR1_SSI_Pos: u32 = 8;
pub const SPI_CR1_SSI_Msk: u32 = 256;
pub const SPI_CR1_SSI: u32 = 256;
pub const SPI_CR1_SSM_Pos: u32 = 9;
pub const SPI_CR1_SSM_Msk: u32 = 512;
pub const SPI_CR1_SSM: u32 = 512;
pub const SPI_CR1_RXONLY_Pos: u32 = 10;
pub const SPI_CR1_RXONLY_Msk: u32 = 1024;
pub const SPI_CR1_RXONLY: u32 = 1024;
pub const SPI_CR1_CRCL_Pos: u32 = 11;
pub const SPI_CR1_CRCL_Msk: u32 = 2048;
pub const SPI_CR1_CRCL: u32 = 2048;
pub const SPI_CR1_CRCNEXT_Pos: u32 = 12;
pub const SPI_CR1_CRCNEXT_Msk: u32 = 4096;
pub const SPI_CR1_CRCNEXT: u32 = 4096;
pub const SPI_CR1_CRCEN_Pos: u32 = 13;
pub const SPI_CR1_CRCEN_Msk: u32 = 8192;
pub const SPI_CR1_CRCEN: u32 = 8192;
pub const SPI_CR1_BIDIOE_Pos: u32 = 14;
pub const SPI_CR1_BIDIOE_Msk: u32 = 16384;
pub const SPI_CR1_BIDIOE: u32 = 16384;
pub const SPI_CR1_BIDIMODE_Pos: u32 = 15;
pub const SPI_CR1_BIDIMODE_Msk: u32 = 32768;
pub const SPI_CR1_BIDIMODE: u32 = 32768;
pub const SPI_CR2_RXDMAEN_Pos: u32 = 0;
pub const SPI_CR2_RXDMAEN_Msk: u32 = 1;
pub const SPI_CR2_RXDMAEN: u32 = 1;
pub const SPI_CR2_TXDMAEN_Pos: u32 = 1;
pub const SPI_CR2_TXDMAEN_Msk: u32 = 2;
pub const SPI_CR2_TXDMAEN: u32 = 2;
pub const SPI_CR2_SSOE_Pos: u32 = 2;
pub const SPI_CR2_SSOE_Msk: u32 = 4;
pub const SPI_CR2_SSOE: u32 = 4;
pub const SPI_CR2_NSSP_Pos: u32 = 3;
pub const SPI_CR2_NSSP_Msk: u32 = 8;
pub const SPI_CR2_NSSP: u32 = 8;
pub const SPI_CR2_FRF_Pos: u32 = 4;
pub const SPI_CR2_FRF_Msk: u32 = 16;
pub const SPI_CR2_FRF: u32 = 16;
pub const SPI_CR2_ERRIE_Pos: u32 = 5;
pub const SPI_CR2_ERRIE_Msk: u32 = 32;
pub const SPI_CR2_ERRIE: u32 = 32;
pub const SPI_CR2_RXNEIE_Pos: u32 = 6;
pub const SPI_CR2_RXNEIE_Msk: u32 = 64;
pub const SPI_CR2_RXNEIE: u32 = 64;
pub const SPI_CR2_TXEIE_Pos: u32 = 7;
pub const SPI_CR2_TXEIE_Msk: u32 = 128;
pub const SPI_CR2_TXEIE: u32 = 128;
pub const SPI_CR2_DS_Pos: u32 = 8;
pub const SPI_CR2_DS_Msk: u32 = 3840;
pub const SPI_CR2_DS: u32 = 3840;
pub const SPI_CR2_DS_0: u32 = 256;
pub const SPI_CR2_DS_1: u32 = 512;
pub const SPI_CR2_DS_2: u32 = 1024;
pub const SPI_CR2_DS_3: u32 = 2048;
pub const SPI_CR2_FRXTH_Pos: u32 = 12;
pub const SPI_CR2_FRXTH_Msk: u32 = 4096;
pub const SPI_CR2_FRXTH: u32 = 4096;
pub const SPI_CR2_LDMARX_Pos: u32 = 13;
pub const SPI_CR2_LDMARX_Msk: u32 = 8192;
pub const SPI_CR2_LDMARX: u32 = 8192;
pub const SPI_CR2_LDMATX_Pos: u32 = 14;
pub const SPI_CR2_LDMATX_Msk: u32 = 16384;
pub const SPI_CR2_LDMATX: u32 = 16384;
pub const SPI_SR_RXNE_Pos: u32 = 0;
pub const SPI_SR_RXNE_Msk: u32 = 1;
pub const SPI_SR_RXNE: u32 = 1;
pub const SPI_SR_TXE_Pos: u32 = 1;
pub const SPI_SR_TXE_Msk: u32 = 2;
pub const SPI_SR_TXE: u32 = 2;
pub const SPI_SR_CHSIDE_Pos: u32 = 2;
pub const SPI_SR_CHSIDE_Msk: u32 = 4;
pub const SPI_SR_CHSIDE: u32 = 4;
pub const SPI_SR_UDR_Pos: u32 = 3;
pub const SPI_SR_UDR_Msk: u32 = 8;
pub const SPI_SR_UDR: u32 = 8;
pub const SPI_SR_CRCERR_Pos: u32 = 4;
pub const SPI_SR_CRCERR_Msk: u32 = 16;
pub const SPI_SR_CRCERR: u32 = 16;
pub const SPI_SR_MODF_Pos: u32 = 5;
pub const SPI_SR_MODF_Msk: u32 = 32;
pub const SPI_SR_MODF: u32 = 32;
pub const SPI_SR_OVR_Pos: u32 = 6;
pub const SPI_SR_OVR_Msk: u32 = 64;
pub const SPI_SR_OVR: u32 = 64;
pub const SPI_SR_BSY_Pos: u32 = 7;
pub const SPI_SR_BSY_Msk: u32 = 128;
pub const SPI_SR_BSY: u32 = 128;
pub const SPI_SR_FRE_Pos: u32 = 8;
pub const SPI_SR_FRE_Msk: u32 = 256;
pub const SPI_SR_FRE: u32 = 256;
pub const SPI_SR_FRLVL_Pos: u32 = 9;
pub const SPI_SR_FRLVL_Msk: u32 = 1536;
pub const SPI_SR_FRLVL: u32 = 1536;
pub const SPI_SR_FRLVL_0: u32 = 512;
pub const SPI_SR_FRLVL_1: u32 = 1024;
pub const SPI_SR_FTLVL_Pos: u32 = 11;
pub const SPI_SR_FTLVL_Msk: u32 = 6144;
pub const SPI_SR_FTLVL: u32 = 6144;
pub const SPI_SR_FTLVL_0: u32 = 2048;
pub const SPI_SR_FTLVL_1: u32 = 4096;
pub const SPI_DR_DR_Pos: u32 = 0;
pub const SPI_DR_DR_Msk: u32 = 65535;
pub const SPI_DR_DR: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY_Pos: u32 = 0;
pub const SPI_CRCPR_CRCPOLY_Msk: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY: u32 = 65535;
pub const SPI_RXCRCR_RXCRC_Pos: u32 = 0;
pub const SPI_RXCRCR_RXCRC_Msk: u32 = 65535;
pub const SPI_RXCRCR_RXCRC: u32 = 65535;
pub const SPI_TXCRCR_TXCRC_Pos: u32 = 0;
pub const SPI_TXCRCR_TXCRC_Msk: u32 = 65535;
pub const SPI_TXCRCR_TXCRC: u32 = 65535;
pub const SPI_I2SCFGR_CHLEN_Pos: u32 = 0;
pub const SPI_I2SCFGR_CHLEN_Msk: u32 = 1;
pub const SPI_I2SCFGR_CHLEN: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Pos: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Msk: u32 = 6;
pub const SPI_I2SCFGR_DATLEN: u32 = 6;
pub const SPI_I2SCFGR_DATLEN_0: u32 = 2;
pub const SPI_I2SCFGR_DATLEN_1: u32 = 4;
pub const SPI_I2SCFGR_CKPOL_Pos: u32 = 3;
pub const SPI_I2SCFGR_CKPOL_Msk: u32 = 8;
pub const SPI_I2SCFGR_CKPOL: u32 = 8;
pub const SPI_I2SCFGR_I2SSTD_Pos: u32 = 4;
pub const SPI_I2SCFGR_I2SSTD_Msk: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD_0: u32 = 16;
pub const SPI_I2SCFGR_I2SSTD_1: u32 = 32;
pub const SPI_I2SCFGR_PCMSYNC_Pos: u32 = 7;
pub const SPI_I2SCFGR_PCMSYNC_Msk: u32 = 128;
pub const SPI_I2SCFGR_PCMSYNC: u32 = 128;
pub const SPI_I2SCFGR_I2SCFG_Pos: u32 = 8;
pub const SPI_I2SCFGR_I2SCFG_Msk: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG_0: u32 = 256;
pub const SPI_I2SCFGR_I2SCFG_1: u32 = 512;
pub const SPI_I2SCFGR_I2SE_Pos: u32 = 10;
pub const SPI_I2SCFGR_I2SE_Msk: u32 = 1024;
pub const SPI_I2SCFGR_I2SE: u32 = 1024;
pub const SPI_I2SCFGR_I2SMOD_Pos: u32 = 11;
pub const SPI_I2SCFGR_I2SMOD_Msk: u32 = 2048;
pub const SPI_I2SCFGR_I2SMOD: u32 = 2048;
pub const SPI_I2SCFGR_ASTRTEN_Pos: u32 = 12;
pub const SPI_I2SCFGR_ASTRTEN_Msk: u32 = 4096;
pub const SPI_I2SCFGR_ASTRTEN: u32 = 4096;
pub const SPI_I2SPR_I2SDIV_Pos: u32 = 0;
pub const SPI_I2SPR_I2SDIV_Msk: u32 = 255;
pub const SPI_I2SPR_I2SDIV: u32 = 255;
pub const SPI_I2SPR_ODD_Pos: u32 = 8;
pub const SPI_I2SPR_ODD_Msk: u32 = 256;
pub const SPI_I2SPR_ODD: u32 = 256;
pub const SPI_I2SPR_MCKOE_Pos: u32 = 9;
pub const SPI_I2SPR_MCKOE_Msk: u32 = 512;
pub const SPI_I2SPR_MCKOE: u32 = 512;
pub const SYSCFG_MEMRMP_MEM_MODE_Pos: u32 = 0;
pub const SYSCFG_MEMRMP_MEM_MODE_Msk: u32 = 7;
pub const SYSCFG_MEMRMP_MEM_MODE: u32 = 7;
pub const SYSCFG_MEMRMP_MEM_MODE_0: u32 = 1;
pub const SYSCFG_MEMRMP_MEM_MODE_1: u32 = 2;
pub const SYSCFG_MEMRMP_MEM_MODE_2: u32 = 4;
pub const SYSCFG_MEMRMP_FB_MODE_Pos: u32 = 8;
pub const SYSCFG_MEMRMP_FB_MODE_Msk: u32 = 256;
pub const SYSCFG_MEMRMP_FB_MODE: u32 = 256;
pub const SYSCFG_CFGR1_BOOSTEN_Pos: u32 = 8;
pub const SYSCFG_CFGR1_BOOSTEN_Msk: u32 = 256;
pub const SYSCFG_CFGR1_BOOSTEN: u32 = 256;
pub const SYSCFG_CFGR1_ANASWVDD_Pos: u32 = 9;
pub const SYSCFG_CFGR1_ANASWVDD_Msk: u32 = 512;
pub const SYSCFG_CFGR1_ANASWVDD: u32 = 512;
pub const SYSCFG_CFGR1_I2C_PB6_FMP_Pos: u32 = 16;
pub const SYSCFG_CFGR1_I2C_PB6_FMP_Msk: u32 = 65536;
pub const SYSCFG_CFGR1_I2C_PB6_FMP: u32 = 65536;
pub const SYSCFG_CFGR1_I2C_PB7_FMP_Pos: u32 = 17;
pub const SYSCFG_CFGR1_I2C_PB7_FMP_Msk: u32 = 131072;
pub const SYSCFG_CFGR1_I2C_PB7_FMP: u32 = 131072;
pub const SYSCFG_CFGR1_I2C_PB8_FMP_Pos: u32 = 18;
pub const SYSCFG_CFGR1_I2C_PB8_FMP_Msk: u32 = 262144;
pub const SYSCFG_CFGR1_I2C_PB8_FMP: u32 = 262144;
pub const SYSCFG_CFGR1_I2C_PB9_FMP_Pos: u32 = 19;
pub const SYSCFG_CFGR1_I2C_PB9_FMP_Msk: u32 = 524288;
pub const SYSCFG_CFGR1_I2C_PB9_FMP: u32 = 524288;
pub const SYSCFG_CFGR1_I2C1_FMP_Pos: u32 = 20;
pub const SYSCFG_CFGR1_I2C1_FMP_Msk: u32 = 1048576;
pub const SYSCFG_CFGR1_I2C1_FMP: u32 = 1048576;
pub const SYSCFG_CFGR1_I2C2_FMP_Pos: u32 = 21;
pub const SYSCFG_CFGR1_I2C2_FMP_Msk: u32 = 2097152;
pub const SYSCFG_CFGR1_I2C2_FMP: u32 = 2097152;
pub const SYSCFG_CFGR1_I2C3_FMP_Pos: u32 = 22;
pub const SYSCFG_CFGR1_I2C3_FMP_Msk: u32 = 4194304;
pub const SYSCFG_CFGR1_I2C3_FMP: u32 = 4194304;
pub const SYSCFG_CFGR1_FPU_IE_0: u32 = 67108864;
pub const SYSCFG_CFGR1_FPU_IE_1: u32 = 134217728;
pub const SYSCFG_CFGR1_FPU_IE_2: u32 = 268435456;
pub const SYSCFG_CFGR1_FPU_IE_3: u32 = 536870912;
pub const SYSCFG_CFGR1_FPU_IE_4: u32 = 1073741824;
pub const SYSCFG_CFGR1_FPU_IE_5: u32 = 2147483648;
pub const SYSCFG_EXTICR1_EXTI0_Pos: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_Msk: u32 = 7;
pub const SYSCFG_EXTICR1_EXTI0: u32 = 7;
pub const SYSCFG_EXTICR1_EXTI1_Pos: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI1_Msk: u32 = 112;
pub const SYSCFG_EXTICR1_EXTI1: u32 = 112;
pub const SYSCFG_EXTICR1_EXTI2_Pos: u32 = 8;
pub const SYSCFG_EXTICR1_EXTI2_Msk: u32 = 1792;
pub const SYSCFG_EXTICR1_EXTI2: u32 = 1792;
pub const SYSCFG_EXTICR1_EXTI3_Pos: u32 = 12;
pub const SYSCFG_EXTICR1_EXTI3_Msk: u32 = 28672;
pub const SYSCFG_EXTICR1_EXTI3: u32 = 28672;
pub const SYSCFG_EXTICR1_EXTI0_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_PB: u32 = 1;
pub const SYSCFG_EXTICR1_EXTI0_PC: u32 = 2;
pub const SYSCFG_EXTICR1_EXTI0_PD: u32 = 3;
pub const SYSCFG_EXTICR1_EXTI0_PE: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI0_PF: u32 = 5;
pub const SYSCFG_EXTICR1_EXTI0_PG: u32 = 6;
pub const SYSCFG_EXTICR1_EXTI1_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI1_PB: u32 = 16;
pub const SYSCFG_EXTICR1_EXTI1_PC: u32 = 32;
pub const SYSCFG_EXTICR1_EXTI1_PD: u32 = 48;
pub const SYSCFG_EXTICR1_EXTI1_PE: u32 = 64;
pub const SYSCFG_EXTICR1_EXTI1_PF: u32 = 80;
pub const SYSCFG_EXTICR1_EXTI1_PG: u32 = 96;
pub const SYSCFG_EXTICR1_EXTI2_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI2_PB: u32 = 256;
pub const SYSCFG_EXTICR1_EXTI2_PC: u32 = 512;
pub const SYSCFG_EXTICR1_EXTI2_PD: u32 = 768;
pub const SYSCFG_EXTICR1_EXTI2_PE: u32 = 1024;
pub const SYSCFG_EXTICR1_EXTI2_PF: u32 = 1280;
pub const SYSCFG_EXTICR1_EXTI2_PG: u32 = 1536;
pub const SYSCFG_EXTICR1_EXTI3_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI3_PB: u32 = 4096;
pub const SYSCFG_EXTICR1_EXTI3_PC: u32 = 8192;
pub const SYSCFG_EXTICR1_EXTI3_PD: u32 = 12288;
pub const SYSCFG_EXTICR1_EXTI3_PE: u32 = 16384;
pub const SYSCFG_EXTICR1_EXTI3_PF: u32 = 20480;
pub const SYSCFG_EXTICR1_EXTI3_PG: u32 = 24576;
pub const SYSCFG_EXTICR2_EXTI4_Pos: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_Msk: u32 = 7;
pub const SYSCFG_EXTICR2_EXTI4: u32 = 7;
pub const SYSCFG_EXTICR2_EXTI5_Pos: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI5_Msk: u32 = 112;
pub const SYSCFG_EXTICR2_EXTI5: u32 = 112;
pub const SYSCFG_EXTICR2_EXTI6_Pos: u32 = 8;
pub const SYSCFG_EXTICR2_EXTI6_Msk: u32 = 1792;
pub const SYSCFG_EXTICR2_EXTI6: u32 = 1792;
pub const SYSCFG_EXTICR2_EXTI7_Pos: u32 = 12;
pub const SYSCFG_EXTICR2_EXTI7_Msk: u32 = 28672;
pub const SYSCFG_EXTICR2_EXTI7: u32 = 28672;
pub const SYSCFG_EXTICR2_EXTI4_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_PB: u32 = 1;
pub const SYSCFG_EXTICR2_EXTI4_PC: u32 = 2;
pub const SYSCFG_EXTICR2_EXTI4_PD: u32 = 3;
pub const SYSCFG_EXTICR2_EXTI4_PE: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI4_PF: u32 = 5;
pub const SYSCFG_EXTICR2_EXTI4_PG: u32 = 6;
pub const SYSCFG_EXTICR2_EXTI5_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI5_PB: u32 = 16;
pub const SYSCFG_EXTICR2_EXTI5_PC: u32 = 32;
pub const SYSCFG_EXTICR2_EXTI5_PD: u32 = 48;
pub const SYSCFG_EXTICR2_EXTI5_PE: u32 = 64;
pub const SYSCFG_EXTICR2_EXTI5_PF: u32 = 80;
pub const SYSCFG_EXTICR2_EXTI5_PG: u32 = 96;
pub const SYSCFG_EXTICR2_EXTI6_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI6_PB: u32 = 256;
pub const SYSCFG_EXTICR2_EXTI6_PC: u32 = 512;
pub const SYSCFG_EXTICR2_EXTI6_PD: u32 = 768;
pub const SYSCFG_EXTICR2_EXTI6_PE: u32 = 1024;
pub const SYSCFG_EXTICR2_EXTI6_PF: u32 = 1280;
pub const SYSCFG_EXTICR2_EXTI6_PG: u32 = 1536;
pub const SYSCFG_EXTICR2_EXTI7_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI7_PB: u32 = 4096;
pub const SYSCFG_EXTICR2_EXTI7_PC: u32 = 8192;
pub const SYSCFG_EXTICR2_EXTI7_PD: u32 = 12288;
pub const SYSCFG_EXTICR2_EXTI7_PE: u32 = 16384;
pub const SYSCFG_EXTICR2_EXTI7_PF: u32 = 20480;
pub const SYSCFG_EXTICR2_EXTI7_PG: u32 = 24576;
pub const SYSCFG_EXTICR3_EXTI8_Pos: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_Msk: u32 = 7;
pub const SYSCFG_EXTICR3_EXTI8: u32 = 7;
pub const SYSCFG_EXTICR3_EXTI9_Pos: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI9_Msk: u32 = 112;
pub const SYSCFG_EXTICR3_EXTI9: u32 = 112;
pub const SYSCFG_EXTICR3_EXTI10_Pos: u32 = 8;
pub const SYSCFG_EXTICR3_EXTI10_Msk: u32 = 1792;
pub const SYSCFG_EXTICR3_EXTI10: u32 = 1792;
pub const SYSCFG_EXTICR3_EXTI11_Pos: u32 = 12;
pub const SYSCFG_EXTICR3_EXTI11_Msk: u32 = 28672;
pub const SYSCFG_EXTICR3_EXTI11: u32 = 28672;
pub const SYSCFG_EXTICR3_EXTI8_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_PB: u32 = 1;
pub const SYSCFG_EXTICR3_EXTI8_PC: u32 = 2;
pub const SYSCFG_EXTICR3_EXTI8_PD: u32 = 3;
pub const SYSCFG_EXTICR3_EXTI8_PE: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI8_PF: u32 = 5;
pub const SYSCFG_EXTICR3_EXTI8_PG: u32 = 6;
pub const SYSCFG_EXTICR3_EXTI9_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI9_PB: u32 = 16;
pub const SYSCFG_EXTICR3_EXTI9_PC: u32 = 32;
pub const SYSCFG_EXTICR3_EXTI9_PD: u32 = 48;
pub const SYSCFG_EXTICR3_EXTI9_PE: u32 = 64;
pub const SYSCFG_EXTICR3_EXTI9_PF: u32 = 80;
pub const SYSCFG_EXTICR3_EXTI9_PG: u32 = 96;
pub const SYSCFG_EXTICR3_EXTI10_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI10_PB: u32 = 256;
pub const SYSCFG_EXTICR3_EXTI10_PC: u32 = 512;
pub const SYSCFG_EXTICR3_EXTI10_PD: u32 = 768;
pub const SYSCFG_EXTICR3_EXTI10_PE: u32 = 1024;
pub const SYSCFG_EXTICR3_EXTI10_PF: u32 = 1280;
pub const SYSCFG_EXTICR3_EXTI11_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI11_PB: u32 = 4096;
pub const SYSCFG_EXTICR3_EXTI11_PC: u32 = 8192;
pub const SYSCFG_EXTICR3_EXTI11_PD: u32 = 12288;
pub const SYSCFG_EXTICR3_EXTI11_PE: u32 = 16384;
pub const SYSCFG_EXTICR3_EXTI11_PF: u32 = 20480;
pub const SYSCFG_EXTICR4_EXTI12_Pos: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_Msk: u32 = 7;
pub const SYSCFG_EXTICR4_EXTI12: u32 = 7;
pub const SYSCFG_EXTICR4_EXTI13_Pos: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI13_Msk: u32 = 112;
pub const SYSCFG_EXTICR4_EXTI13: u32 = 112;
pub const SYSCFG_EXTICR4_EXTI14_Pos: u32 = 8;
pub const SYSCFG_EXTICR4_EXTI14_Msk: u32 = 1792;
pub const SYSCFG_EXTICR4_EXTI14: u32 = 1792;
pub const SYSCFG_EXTICR4_EXTI15_Pos: u32 = 12;
pub const SYSCFG_EXTICR4_EXTI15_Msk: u32 = 28672;
pub const SYSCFG_EXTICR4_EXTI15: u32 = 28672;
pub const SYSCFG_EXTICR4_EXTI12_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_PB: u32 = 1;
pub const SYSCFG_EXTICR4_EXTI12_PC: u32 = 2;
pub const SYSCFG_EXTICR4_EXTI12_PD: u32 = 3;
pub const SYSCFG_EXTICR4_EXTI12_PE: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI12_PF: u32 = 5;
pub const SYSCFG_EXTICR4_EXTI13_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI13_PB: u32 = 16;
pub const SYSCFG_EXTICR4_EXTI13_PC: u32 = 32;
pub const SYSCFG_EXTICR4_EXTI13_PD: u32 = 48;
pub const SYSCFG_EXTICR4_EXTI13_PE: u32 = 64;
pub const SYSCFG_EXTICR4_EXTI13_PF: u32 = 80;
pub const SYSCFG_EXTICR4_EXTI14_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI14_PB: u32 = 256;
pub const SYSCFG_EXTICR4_EXTI14_PC: u32 = 512;
pub const SYSCFG_EXTICR4_EXTI14_PD: u32 = 768;
pub const SYSCFG_EXTICR4_EXTI14_PE: u32 = 1024;
pub const SYSCFG_EXTICR4_EXTI14_PF: u32 = 1280;
pub const SYSCFG_EXTICR4_EXTI15_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI15_PB: u32 = 4096;
pub const SYSCFG_EXTICR4_EXTI15_PC: u32 = 8192;
pub const SYSCFG_EXTICR4_EXTI15_PD: u32 = 12288;
pub const SYSCFG_EXTICR4_EXTI15_PE: u32 = 16384;
pub const SYSCFG_EXTICR4_EXTI15_PF: u32 = 20480;
pub const SYSCFG_SCSR_CCMER_Pos: u32 = 0;
pub const SYSCFG_SCSR_CCMER_Msk: u32 = 1;
pub const SYSCFG_SCSR_CCMER: u32 = 1;
pub const SYSCFG_SCSR_CCMBSY_Pos: u32 = 1;
pub const SYSCFG_SCSR_CCMBSY_Msk: u32 = 2;
pub const SYSCFG_SCSR_CCMBSY: u32 = 2;
pub const SYSCFG_CFGR2_CLL_Pos: u32 = 0;
pub const SYSCFG_CFGR2_CLL_Msk: u32 = 1;
pub const SYSCFG_CFGR2_CLL: u32 = 1;
pub const SYSCFG_CFGR2_SPL_Pos: u32 = 1;
pub const SYSCFG_CFGR2_SPL_Msk: u32 = 2;
pub const SYSCFG_CFGR2_SPL: u32 = 2;
pub const SYSCFG_CFGR2_PVDL_Pos: u32 = 2;
pub const SYSCFG_CFGR2_PVDL_Msk: u32 = 4;
pub const SYSCFG_CFGR2_PVDL: u32 = 4;
pub const SYSCFG_CFGR2_ECCL_Pos: u32 = 3;
pub const SYSCFG_CFGR2_ECCL_Msk: u32 = 8;
pub const SYSCFG_CFGR2_ECCL: u32 = 8;
pub const SYSCFG_CFGR2_SPF_Pos: u32 = 8;
pub const SYSCFG_CFGR2_SPF_Msk: u32 = 256;
pub const SYSCFG_CFGR2_SPF: u32 = 256;
pub const SYSCFG_SWPR_PAGE0_Pos: u32 = 0;
pub const SYSCFG_SWPR_PAGE0_Msk: u32 = 1;
pub const SYSCFG_SWPR_PAGE0: u32 = 1;
pub const SYSCFG_SWPR_PAGE1_Pos: u32 = 1;
pub const SYSCFG_SWPR_PAGE1_Msk: u32 = 2;
pub const SYSCFG_SWPR_PAGE1: u32 = 2;
pub const SYSCFG_SWPR_PAGE2_Pos: u32 = 2;
pub const SYSCFG_SWPR_PAGE2_Msk: u32 = 4;
pub const SYSCFG_SWPR_PAGE2: u32 = 4;
pub const SYSCFG_SWPR_PAGE3_Pos: u32 = 3;
pub const SYSCFG_SWPR_PAGE3_Msk: u32 = 8;
pub const SYSCFG_SWPR_PAGE3: u32 = 8;
pub const SYSCFG_SWPR_PAGE4_Pos: u32 = 4;
pub const SYSCFG_SWPR_PAGE4_Msk: u32 = 16;
pub const SYSCFG_SWPR_PAGE4: u32 = 16;
pub const SYSCFG_SWPR_PAGE5_Pos: u32 = 5;
pub const SYSCFG_SWPR_PAGE5_Msk: u32 = 32;
pub const SYSCFG_SWPR_PAGE5: u32 = 32;
pub const SYSCFG_SWPR_PAGE6_Pos: u32 = 6;
pub const SYSCFG_SWPR_PAGE6_Msk: u32 = 64;
pub const SYSCFG_SWPR_PAGE6: u32 = 64;
pub const SYSCFG_SWPR_PAGE7_Pos: u32 = 7;
pub const SYSCFG_SWPR_PAGE7_Msk: u32 = 128;
pub const SYSCFG_SWPR_PAGE7: u32 = 128;
pub const SYSCFG_SWPR_PAGE8_Pos: u32 = 8;
pub const SYSCFG_SWPR_PAGE8_Msk: u32 = 256;
pub const SYSCFG_SWPR_PAGE8: u32 = 256;
pub const SYSCFG_SWPR_PAGE9_Pos: u32 = 9;
pub const SYSCFG_SWPR_PAGE9_Msk: u32 = 512;
pub const SYSCFG_SWPR_PAGE9: u32 = 512;
pub const SYSCFG_SKR_KEY_Pos: u32 = 0;
pub const SYSCFG_SKR_KEY_Msk: u32 = 255;
pub const SYSCFG_SKR_KEY: u32 = 255;
pub const TIM_CR1_CEN_Pos: u32 = 0;
pub const TIM_CR1_CEN_Msk: u32 = 1;
pub const TIM_CR1_CEN: u32 = 1;
pub const TIM_CR1_UDIS_Pos: u32 = 1;
pub const TIM_CR1_UDIS_Msk: u32 = 2;
pub const TIM_CR1_UDIS: u32 = 2;
pub const TIM_CR1_URS_Pos: u32 = 2;
pub const TIM_CR1_URS_Msk: u32 = 4;
pub const TIM_CR1_URS: u32 = 4;
pub const TIM_CR1_OPM_Pos: u32 = 3;
pub const TIM_CR1_OPM_Msk: u32 = 8;
pub const TIM_CR1_OPM: u32 = 8;
pub const TIM_CR1_DIR_Pos: u32 = 4;
pub const TIM_CR1_DIR_Msk: u32 = 16;
pub const TIM_CR1_DIR: u32 = 16;
pub const TIM_CR1_CMS_Pos: u32 = 5;
pub const TIM_CR1_CMS_Msk: u32 = 96;
pub const TIM_CR1_CMS: u32 = 96;
pub const TIM_CR1_CMS_0: u32 = 32;
pub const TIM_CR1_CMS_1: u32 = 64;
pub const TIM_CR1_ARPE_Pos: u32 = 7;
pub const TIM_CR1_ARPE_Msk: u32 = 128;
pub const TIM_CR1_ARPE: u32 = 128;
pub const TIM_CR1_CKD_Pos: u32 = 8;
pub const TIM_CR1_CKD_Msk: u32 = 768;
pub const TIM_CR1_CKD: u32 = 768;
pub const TIM_CR1_CKD_0: u32 = 256;
pub const TIM_CR1_CKD_1: u32 = 512;
pub const TIM_CR1_UIFREMAP_Pos: u32 = 11;
pub const TIM_CR1_UIFREMAP_Msk: u32 = 2048;
pub const TIM_CR1_UIFREMAP: u32 = 2048;
pub const TIM_CR1_DITHEN_Pos: u32 = 12;
pub const TIM_CR1_DITHEN_Msk: u32 = 4096;
pub const TIM_CR1_DITHEN: u32 = 4096;
pub const TIM_CR2_CCPC_Pos: u32 = 0;
pub const TIM_CR2_CCPC_Msk: u32 = 1;
pub const TIM_CR2_CCPC: u32 = 1;
pub const TIM_CR2_CCUS_Pos: u32 = 2;
pub const TIM_CR2_CCUS_Msk: u32 = 4;
pub const TIM_CR2_CCUS: u32 = 4;
pub const TIM_CR2_CCDS_Pos: u32 = 3;
pub const TIM_CR2_CCDS_Msk: u32 = 8;
pub const TIM_CR2_CCDS: u32 = 8;
pub const TIM_CR2_MMS_Pos: u32 = 4;
pub const TIM_CR2_MMS_Msk: u32 = 33554544;
pub const TIM_CR2_MMS: u32 = 33554544;
pub const TIM_CR2_MMS_0: u32 = 16;
pub const TIM_CR2_MMS_1: u32 = 32;
pub const TIM_CR2_MMS_2: u32 = 64;
pub const TIM_CR2_MMS_3: u32 = 33554432;
pub const TIM_CR2_TI1S_Pos: u32 = 7;
pub const TIM_CR2_TI1S_Msk: u32 = 128;
pub const TIM_CR2_TI1S: u32 = 128;
pub const TIM_CR2_OIS1_Pos: u32 = 8;
pub const TIM_CR2_OIS1_Msk: u32 = 256;
pub const TIM_CR2_OIS1: u32 = 256;
pub const TIM_CR2_OIS1N_Pos: u32 = 9;
pub const TIM_CR2_OIS1N_Msk: u32 = 512;
pub const TIM_CR2_OIS1N: u32 = 512;
pub const TIM_CR2_OIS2_Pos: u32 = 10;
pub const TIM_CR2_OIS2_Msk: u32 = 1024;
pub const TIM_CR2_OIS2: u32 = 1024;
pub const TIM_CR2_OIS2N_Pos: u32 = 11;
pub const TIM_CR2_OIS2N_Msk: u32 = 2048;
pub const TIM_CR2_OIS2N: u32 = 2048;
pub const TIM_CR2_OIS3_Pos: u32 = 12;
pub const TIM_CR2_OIS3_Msk: u32 = 4096;
pub const TIM_CR2_OIS3: u32 = 4096;
pub const TIM_CR2_OIS3N_Pos: u32 = 13;
pub const TIM_CR2_OIS3N_Msk: u32 = 8192;
pub const TIM_CR2_OIS3N: u32 = 8192;
pub const TIM_CR2_OIS4_Pos: u32 = 14;
pub const TIM_CR2_OIS4_Msk: u32 = 16384;
pub const TIM_CR2_OIS4: u32 = 16384;
pub const TIM_CR2_OIS4N_Pos: u32 = 15;
pub const TIM_CR2_OIS4N_Msk: u32 = 32768;
pub const TIM_CR2_OIS4N: u32 = 32768;
pub const TIM_CR2_OIS5_Pos: u32 = 16;
pub const TIM_CR2_OIS5_Msk: u32 = 65536;
pub const TIM_CR2_OIS5: u32 = 65536;
pub const TIM_CR2_OIS6_Pos: u32 = 18;
pub const TIM_CR2_OIS6_Msk: u32 = 262144;
pub const TIM_CR2_OIS6: u32 = 262144;
pub const TIM_CR2_MMS2_Pos: u32 = 20;
pub const TIM_CR2_MMS2_Msk: u32 = 15728640;
pub const TIM_CR2_MMS2: u32 = 15728640;
pub const TIM_CR2_MMS2_0: u32 = 1048576;
pub const TIM_CR2_MMS2_1: u32 = 2097152;
pub const TIM_CR2_MMS2_2: u32 = 4194304;
pub const TIM_CR2_MMS2_3: u32 = 8388608;
pub const TIM_SMCR_SMS_Pos: u32 = 0;
pub const TIM_SMCR_SMS_Msk: u32 = 65543;
pub const TIM_SMCR_SMS: u32 = 65543;
pub const TIM_SMCR_SMS_0: u32 = 1;
pub const TIM_SMCR_SMS_1: u32 = 2;
pub const TIM_SMCR_SMS_2: u32 = 4;
pub const TIM_SMCR_SMS_3: u32 = 65536;
pub const TIM_SMCR_OCCS_Pos: u32 = 3;
pub const TIM_SMCR_OCCS_Msk: u32 = 8;
pub const TIM_SMCR_OCCS: u32 = 8;
pub const TIM_SMCR_TS_Pos: u32 = 4;
pub const TIM_SMCR_TS_Msk: u32 = 3145840;
pub const TIM_SMCR_TS: u32 = 3145840;
pub const TIM_SMCR_TS_0: u32 = 16;
pub const TIM_SMCR_TS_1: u32 = 32;
pub const TIM_SMCR_TS_2: u32 = 64;
pub const TIM_SMCR_TS_3: u32 = 1048576;
pub const TIM_SMCR_TS_4: u32 = 2097152;
pub const TIM_SMCR_MSM_Pos: u32 = 7;
pub const TIM_SMCR_MSM_Msk: u32 = 128;
pub const TIM_SMCR_MSM: u32 = 128;
pub const TIM_SMCR_ETF_Pos: u32 = 8;
pub const TIM_SMCR_ETF_Msk: u32 = 3840;
pub const TIM_SMCR_ETF: u32 = 3840;
pub const TIM_SMCR_ETF_0: u32 = 256;
pub const TIM_SMCR_ETF_1: u32 = 512;
pub const TIM_SMCR_ETF_2: u32 = 1024;
pub const TIM_SMCR_ETF_3: u32 = 2048;
pub const TIM_SMCR_ETPS_Pos: u32 = 12;
pub const TIM_SMCR_ETPS_Msk: u32 = 12288;
pub const TIM_SMCR_ETPS: u32 = 12288;
pub const TIM_SMCR_ETPS_0: u32 = 4096;
pub const TIM_SMCR_ETPS_1: u32 = 8192;
pub const TIM_SMCR_ECE_Pos: u32 = 14;
pub const TIM_SMCR_ECE_Msk: u32 = 16384;
pub const TIM_SMCR_ECE: u32 = 16384;
pub const TIM_SMCR_ETP_Pos: u32 = 15;
pub const TIM_SMCR_ETP_Msk: u32 = 32768;
pub const TIM_SMCR_ETP: u32 = 32768;
pub const TIM_SMCR_SMSPE_Pos: u32 = 24;
pub const TIM_SMCR_SMSPE_Msk: u32 = 16777216;
pub const TIM_SMCR_SMSPE: u32 = 16777216;
pub const TIM_SMCR_SMSPS_Pos: u32 = 25;
pub const TIM_SMCR_SMSPS_Msk: u32 = 33554432;
pub const TIM_SMCR_SMSPS: u32 = 33554432;
pub const TIM_DIER_UIE_Pos: u32 = 0;
pub const TIM_DIER_UIE_Msk: u32 = 1;
pub const TIM_DIER_UIE: u32 = 1;
pub const TIM_DIER_CC1IE_Pos: u32 = 1;
pub const TIM_DIER_CC1IE_Msk: u32 = 2;
pub const TIM_DIER_CC1IE: u32 = 2;
pub const TIM_DIER_CC2IE_Pos: u32 = 2;
pub const TIM_DIER_CC2IE_Msk: u32 = 4;
pub const TIM_DIER_CC2IE: u32 = 4;
pub const TIM_DIER_CC3IE_Pos: u32 = 3;
pub const TIM_DIER_CC3IE_Msk: u32 = 8;
pub const TIM_DIER_CC3IE: u32 = 8;
pub const TIM_DIER_CC4IE_Pos: u32 = 4;
pub const TIM_DIER_CC4IE_Msk: u32 = 16;
pub const TIM_DIER_CC4IE: u32 = 16;
pub const TIM_DIER_COMIE_Pos: u32 = 5;
pub const TIM_DIER_COMIE_Msk: u32 = 32;
pub const TIM_DIER_COMIE: u32 = 32;
pub const TIM_DIER_TIE_Pos: u32 = 6;
pub const TIM_DIER_TIE_Msk: u32 = 64;
pub const TIM_DIER_TIE: u32 = 64;
pub const TIM_DIER_BIE_Pos: u32 = 7;
pub const TIM_DIER_BIE_Msk: u32 = 128;
pub const TIM_DIER_BIE: u32 = 128;
pub const TIM_DIER_UDE_Pos: u32 = 8;
pub const TIM_DIER_UDE_Msk: u32 = 256;
pub const TIM_DIER_UDE: u32 = 256;
pub const TIM_DIER_CC1DE_Pos: u32 = 9;
pub const TIM_DIER_CC1DE_Msk: u32 = 512;
pub const TIM_DIER_CC1DE: u32 = 512;
pub const TIM_DIER_CC2DE_Pos: u32 = 10;
pub const TIM_DIER_CC2DE_Msk: u32 = 1024;
pub const TIM_DIER_CC2DE: u32 = 1024;
pub const TIM_DIER_CC3DE_Pos: u32 = 11;
pub const TIM_DIER_CC3DE_Msk: u32 = 2048;
pub const TIM_DIER_CC3DE: u32 = 2048;
pub const TIM_DIER_CC4DE_Pos: u32 = 12;
pub const TIM_DIER_CC4DE_Msk: u32 = 4096;
pub const TIM_DIER_CC4DE: u32 = 4096;
pub const TIM_DIER_COMDE_Pos: u32 = 13;
pub const TIM_DIER_COMDE_Msk: u32 = 8192;
pub const TIM_DIER_COMDE: u32 = 8192;
pub const TIM_DIER_TDE_Pos: u32 = 14;
pub const TIM_DIER_TDE_Msk: u32 = 16384;
pub const TIM_DIER_TDE: u32 = 16384;
pub const TIM_DIER_IDXIE_Pos: u32 = 20;
pub const TIM_DIER_IDXIE_Msk: u32 = 1048576;
pub const TIM_DIER_IDXIE: u32 = 1048576;
pub const TIM_DIER_DIRIE_Pos: u32 = 21;
pub const TIM_DIER_DIRIE_Msk: u32 = 2097152;
pub const TIM_DIER_DIRIE: u32 = 2097152;
pub const TIM_DIER_IERRIE_Pos: u32 = 22;
pub const TIM_DIER_IERRIE_Msk: u32 = 4194304;
pub const TIM_DIER_IERRIE: u32 = 4194304;
pub const TIM_DIER_TERRIE_Pos: u32 = 23;
pub const TIM_DIER_TERRIE_Msk: u32 = 8388608;
pub const TIM_DIER_TERRIE: u32 = 8388608;
pub const TIM_SR_UIF_Pos: u32 = 0;
pub const TIM_SR_UIF_Msk: u32 = 1;
pub const TIM_SR_UIF: u32 = 1;
pub const TIM_SR_CC1IF_Pos: u32 = 1;
pub const TIM_SR_CC1IF_Msk: u32 = 2;
pub const TIM_SR_CC1IF: u32 = 2;
pub const TIM_SR_CC2IF_Pos: u32 = 2;
pub const TIM_SR_CC2IF_Msk: u32 = 4;
pub const TIM_SR_CC2IF: u32 = 4;
pub const TIM_SR_CC3IF_Pos: u32 = 3;
pub const TIM_SR_CC3IF_Msk: u32 = 8;
pub const TIM_SR_CC3IF: u32 = 8;
pub const TIM_SR_CC4IF_Pos: u32 = 4;
pub const TIM_SR_CC4IF_Msk: u32 = 16;
pub const TIM_SR_CC4IF: u32 = 16;
pub const TIM_SR_COMIF_Pos: u32 = 5;
pub const TIM_SR_COMIF_Msk: u32 = 32;
pub const TIM_SR_COMIF: u32 = 32;
pub const TIM_SR_TIF_Pos: u32 = 6;
pub const TIM_SR_TIF_Msk: u32 = 64;
pub const TIM_SR_TIF: u32 = 64;
pub const TIM_SR_BIF_Pos: u32 = 7;
pub const TIM_SR_BIF_Msk: u32 = 128;
pub const TIM_SR_BIF: u32 = 128;
pub const TIM_SR_B2IF_Pos: u32 = 8;
pub const TIM_SR_B2IF_Msk: u32 = 256;
pub const TIM_SR_B2IF: u32 = 256;
pub const TIM_SR_CC1OF_Pos: u32 = 9;
pub const TIM_SR_CC1OF_Msk: u32 = 512;
pub const TIM_SR_CC1OF: u32 = 512;
pub const TIM_SR_CC2OF_Pos: u32 = 10;
pub const TIM_SR_CC2OF_Msk: u32 = 1024;
pub const TIM_SR_CC2OF: u32 = 1024;
pub const TIM_SR_CC3OF_Pos: u32 = 11;
pub const TIM_SR_CC3OF_Msk: u32 = 2048;
pub const TIM_SR_CC3OF: u32 = 2048;
pub const TIM_SR_CC4OF_Pos: u32 = 12;
pub const TIM_SR_CC4OF_Msk: u32 = 4096;
pub const TIM_SR_CC4OF: u32 = 4096;
pub const TIM_SR_SBIF_Pos: u32 = 13;
pub const TIM_SR_SBIF_Msk: u32 = 8192;
pub const TIM_SR_SBIF: u32 = 8192;
pub const TIM_SR_CC5IF_Pos: u32 = 16;
pub const TIM_SR_CC5IF_Msk: u32 = 65536;
pub const TIM_SR_CC5IF: u32 = 65536;
pub const TIM_SR_CC6IF_Pos: u32 = 17;
pub const TIM_SR_CC6IF_Msk: u32 = 131072;
pub const TIM_SR_CC6IF: u32 = 131072;
pub const TIM_SR_IDXF_Pos: u32 = 20;
pub const TIM_SR_IDXF_Msk: u32 = 1048576;
pub const TIM_SR_IDXF: u32 = 1048576;
pub const TIM_SR_DIRF_Pos: u32 = 21;
pub const TIM_SR_DIRF_Msk: u32 = 2097152;
pub const TIM_SR_DIRF: u32 = 2097152;
pub const TIM_SR_IERRF_Pos: u32 = 22;
pub const TIM_SR_IERRF_Msk: u32 = 4194304;
pub const TIM_SR_IERRF: u32 = 4194304;
pub const TIM_SR_TERRF_Pos: u32 = 23;
pub const TIM_SR_TERRF_Msk: u32 = 8388608;
pub const TIM_SR_TERRF: u32 = 8388608;
pub const TIM_EGR_UG_Pos: u32 = 0;
pub const TIM_EGR_UG_Msk: u32 = 1;
pub const TIM_EGR_UG: u32 = 1;
pub const TIM_EGR_CC1G_Pos: u32 = 1;
pub const TIM_EGR_CC1G_Msk: u32 = 2;
pub const TIM_EGR_CC1G: u32 = 2;
pub const TIM_EGR_CC2G_Pos: u32 = 2;
pub const TIM_EGR_CC2G_Msk: u32 = 4;
pub const TIM_EGR_CC2G: u32 = 4;
pub const TIM_EGR_CC3G_Pos: u32 = 3;
pub const TIM_EGR_CC3G_Msk: u32 = 8;
pub const TIM_EGR_CC3G: u32 = 8;
pub const TIM_EGR_CC4G_Pos: u32 = 4;
pub const TIM_EGR_CC4G_Msk: u32 = 16;
pub const TIM_EGR_CC4G: u32 = 16;
pub const TIM_EGR_COMG_Pos: u32 = 5;
pub const TIM_EGR_COMG_Msk: u32 = 32;
pub const TIM_EGR_COMG: u32 = 32;
pub const TIM_EGR_TG_Pos: u32 = 6;
pub const TIM_EGR_TG_Msk: u32 = 64;
pub const TIM_EGR_TG: u32 = 64;
pub const TIM_EGR_BG_Pos: u32 = 7;
pub const TIM_EGR_BG_Msk: u32 = 128;
pub const TIM_EGR_BG: u32 = 128;
pub const TIM_EGR_B2G_Pos: u32 = 8;
pub const TIM_EGR_B2G_Msk: u32 = 256;
pub const TIM_EGR_B2G: u32 = 256;
pub const TIM_CCMR1_CC1S_Pos: u32 = 0;
pub const TIM_CCMR1_CC1S_Msk: u32 = 3;
pub const TIM_CCMR1_CC1S: u32 = 3;
pub const TIM_CCMR1_CC1S_0: u32 = 1;
pub const TIM_CCMR1_CC1S_1: u32 = 2;
pub const TIM_CCMR1_OC1FE_Pos: u32 = 2;
pub const TIM_CCMR1_OC1FE_Msk: u32 = 4;
pub const TIM_CCMR1_OC1FE: u32 = 4;
pub const TIM_CCMR1_OC1PE_Pos: u32 = 3;
pub const TIM_CCMR1_OC1PE_Msk: u32 = 8;
pub const TIM_CCMR1_OC1PE: u32 = 8;
pub const TIM_CCMR1_OC1M_Pos: u32 = 4;
pub const TIM_CCMR1_OC1M_Msk: u32 = 65648;
pub const TIM_CCMR1_OC1M: u32 = 65648;
pub const TIM_CCMR1_OC1M_0: u32 = 16;
pub const TIM_CCMR1_OC1M_1: u32 = 32;
pub const TIM_CCMR1_OC1M_2: u32 = 64;
pub const TIM_CCMR1_OC1M_3: u32 = 65536;
pub const TIM_CCMR1_OC1CE_Pos: u32 = 7;
pub const TIM_CCMR1_OC1CE_Msk: u32 = 128;
pub const TIM_CCMR1_OC1CE: u32 = 128;
pub const TIM_CCMR1_CC2S_Pos: u32 = 8;
pub const TIM_CCMR1_CC2S_Msk: u32 = 768;
pub const TIM_CCMR1_CC2S: u32 = 768;
pub const TIM_CCMR1_CC2S_0: u32 = 256;
pub const TIM_CCMR1_CC2S_1: u32 = 512;
pub const TIM_CCMR1_OC2FE_Pos: u32 = 10;
pub const TIM_CCMR1_OC2FE_Msk: u32 = 1024;
pub const TIM_CCMR1_OC2FE: u32 = 1024;
pub const TIM_CCMR1_OC2PE_Pos: u32 = 11;
pub const TIM_CCMR1_OC2PE_Msk: u32 = 2048;
pub const TIM_CCMR1_OC2PE: u32 = 2048;
pub const TIM_CCMR1_OC2M_Pos: u32 = 12;
pub const TIM_CCMR1_OC2M_Msk: u32 = 16805888;
pub const TIM_CCMR1_OC2M: u32 = 16805888;
pub const TIM_CCMR1_OC2M_0: u32 = 4096;
pub const TIM_CCMR1_OC2M_1: u32 = 8192;
pub const TIM_CCMR1_OC2M_2: u32 = 16384;
pub const TIM_CCMR1_OC2M_3: u32 = 16777216;
pub const TIM_CCMR1_OC2CE_Pos: u32 = 15;
pub const TIM_CCMR1_OC2CE_Msk: u32 = 32768;
pub const TIM_CCMR1_OC2CE: u32 = 32768;
pub const TIM_CCMR1_IC1PSC_Pos: u32 = 2;
pub const TIM_CCMR1_IC1PSC_Msk: u32 = 12;
pub const TIM_CCMR1_IC1PSC: u32 = 12;
pub const TIM_CCMR1_IC1PSC_0: u32 = 4;
pub const TIM_CCMR1_IC1PSC_1: u32 = 8;
pub const TIM_CCMR1_IC1F_Pos: u32 = 4;
pub const TIM_CCMR1_IC1F_Msk: u32 = 240;
pub const TIM_CCMR1_IC1F: u32 = 240;
pub const TIM_CCMR1_IC1F_0: u32 = 16;
pub const TIM_CCMR1_IC1F_1: u32 = 32;
pub const TIM_CCMR1_IC1F_2: u32 = 64;
pub const TIM_CCMR1_IC1F_3: u32 = 128;
pub const TIM_CCMR1_IC2PSC_Pos: u32 = 10;
pub const TIM_CCMR1_IC2PSC_Msk: u32 = 3072;
pub const TIM_CCMR1_IC2PSC: u32 = 3072;
pub const TIM_CCMR1_IC2PSC_0: u32 = 1024;
pub const TIM_CCMR1_IC2PSC_1: u32 = 2048;
pub const TIM_CCMR1_IC2F_Pos: u32 = 12;
pub const TIM_CCMR1_IC2F_Msk: u32 = 61440;
pub const TIM_CCMR1_IC2F: u32 = 61440;
pub const TIM_CCMR1_IC2F_0: u32 = 4096;
pub const TIM_CCMR1_IC2F_1: u32 = 8192;
pub const TIM_CCMR1_IC2F_2: u32 = 16384;
pub const TIM_CCMR1_IC2F_3: u32 = 32768;
pub const TIM_CCMR2_CC3S_Pos: u32 = 0;
pub const TIM_CCMR2_CC3S_Msk: u32 = 3;
pub const TIM_CCMR2_CC3S: u32 = 3;
pub const TIM_CCMR2_CC3S_0: u32 = 1;
pub const TIM_CCMR2_CC3S_1: u32 = 2;
pub const TIM_CCMR2_OC3FE_Pos: u32 = 2;
pub const TIM_CCMR2_OC3FE_Msk: u32 = 4;
pub const TIM_CCMR2_OC3FE: u32 = 4;
pub const TIM_CCMR2_OC3PE_Pos: u32 = 3;
pub const TIM_CCMR2_OC3PE_Msk: u32 = 8;
pub const TIM_CCMR2_OC3PE: u32 = 8;
pub const TIM_CCMR2_OC3M_Pos: u32 = 4;
pub const TIM_CCMR2_OC3M_Msk: u32 = 65648;
pub const TIM_CCMR2_OC3M: u32 = 65648;
pub const TIM_CCMR2_OC3M_0: u32 = 16;
pub const TIM_CCMR2_OC3M_1: u32 = 32;
pub const TIM_CCMR2_OC3M_2: u32 = 64;
pub const TIM_CCMR2_OC3M_3: u32 = 65536;
pub const TIM_CCMR2_OC3CE_Pos: u32 = 7;
pub const TIM_CCMR2_OC3CE_Msk: u32 = 128;
pub const TIM_CCMR2_OC3CE: u32 = 128;
pub const TIM_CCMR2_CC4S_Pos: u32 = 8;
pub const TIM_CCMR2_CC4S_Msk: u32 = 768;
pub const TIM_CCMR2_CC4S: u32 = 768;
pub const TIM_CCMR2_CC4S_0: u32 = 256;
pub const TIM_CCMR2_CC4S_1: u32 = 512;
pub const TIM_CCMR2_OC4FE_Pos: u32 = 10;
pub const TIM_CCMR2_OC4FE_Msk: u32 = 1024;
pub const TIM_CCMR2_OC4FE: u32 = 1024;
pub const TIM_CCMR2_OC4PE_Pos: u32 = 11;
pub const TIM_CCMR2_OC4PE_Msk: u32 = 2048;
pub const TIM_CCMR2_OC4PE: u32 = 2048;
pub const TIM_CCMR2_OC4M_Pos: u32 = 12;
pub const TIM_CCMR2_OC4M_Msk: u32 = 16805888;
pub const TIM_CCMR2_OC4M: u32 = 16805888;
pub const TIM_CCMR2_OC4M_0: u32 = 4096;
pub const TIM_CCMR2_OC4M_1: u32 = 8192;
pub const TIM_CCMR2_OC4M_2: u32 = 16384;
pub const TIM_CCMR2_OC4M_3: u32 = 16777216;
pub const TIM_CCMR2_OC4CE_Pos: u32 = 15;
pub const TIM_CCMR2_OC4CE_Msk: u32 = 32768;
pub const TIM_CCMR2_OC4CE: u32 = 32768;
pub const TIM_CCMR2_IC3PSC_Pos: u32 = 2;
pub const TIM_CCMR2_IC3PSC_Msk: u32 = 12;
pub const TIM_CCMR2_IC3PSC: u32 = 12;
pub const TIM_CCMR2_IC3PSC_0: u32 = 4;
pub const TIM_CCMR2_IC3PSC_1: u32 = 8;
pub const TIM_CCMR2_IC3F_Pos: u32 = 4;
pub const TIM_CCMR2_IC3F_Msk: u32 = 240;
pub const TIM_CCMR2_IC3F: u32 = 240;
pub const TIM_CCMR2_IC3F_0: u32 = 16;
pub const TIM_CCMR2_IC3F_1: u32 = 32;
pub const TIM_CCMR2_IC3F_2: u32 = 64;
pub const TIM_CCMR2_IC3F_3: u32 = 128;
pub const TIM_CCMR2_IC4PSC_Pos: u32 = 10;
pub const TIM_CCMR2_IC4PSC_Msk: u32 = 3072;
pub const TIM_CCMR2_IC4PSC: u32 = 3072;
pub const TIM_CCMR2_IC4PSC_0: u32 = 1024;
pub const TIM_CCMR2_IC4PSC_1: u32 = 2048;
pub const TIM_CCMR2_IC4F_Pos: u32 = 12;
pub const TIM_CCMR2_IC4F_Msk: u32 = 61440;
pub const TIM_CCMR2_IC4F: u32 = 61440;
pub const TIM_CCMR2_IC4F_0: u32 = 4096;
pub const TIM_CCMR2_IC4F_1: u32 = 8192;
pub const TIM_CCMR2_IC4F_2: u32 = 16384;
pub const TIM_CCMR2_IC4F_3: u32 = 32768;
pub const TIM_CCMR3_OC5FE_Pos: u32 = 2;
pub const TIM_CCMR3_OC5FE_Msk: u32 = 4;
pub const TIM_CCMR3_OC5FE: u32 = 4;
pub const TIM_CCMR3_OC5PE_Pos: u32 = 3;
pub const TIM_CCMR3_OC5PE_Msk: u32 = 8;
pub const TIM_CCMR3_OC5PE: u32 = 8;
pub const TIM_CCMR3_OC5M_Pos: u32 = 4;
pub const TIM_CCMR3_OC5M_Msk: u32 = 65648;
pub const TIM_CCMR3_OC5M: u32 = 65648;
pub const TIM_CCMR3_OC5M_0: u32 = 16;
pub const TIM_CCMR3_OC5M_1: u32 = 32;
pub const TIM_CCMR3_OC5M_2: u32 = 64;
pub const TIM_CCMR3_OC5M_3: u32 = 65536;
pub const TIM_CCMR3_OC5CE_Pos: u32 = 7;
pub const TIM_CCMR3_OC5CE_Msk: u32 = 128;
pub const TIM_CCMR3_OC5CE: u32 = 128;
pub const TIM_CCMR3_OC6FE_Pos: u32 = 10;
pub const TIM_CCMR3_OC6FE_Msk: u32 = 1024;
pub const TIM_CCMR3_OC6FE: u32 = 1024;
pub const TIM_CCMR3_OC6PE_Pos: u32 = 11;
pub const TIM_CCMR3_OC6PE_Msk: u32 = 2048;
pub const TIM_CCMR3_OC6PE: u32 = 2048;
pub const TIM_CCMR3_OC6M_Pos: u32 = 12;
pub const TIM_CCMR3_OC6M_Msk: u32 = 16805888;
pub const TIM_CCMR3_OC6M: u32 = 16805888;
pub const TIM_CCMR3_OC6M_0: u32 = 4096;
pub const TIM_CCMR3_OC6M_1: u32 = 8192;
pub const TIM_CCMR3_OC6M_2: u32 = 16384;
pub const TIM_CCMR3_OC6M_3: u32 = 16777216;
pub const TIM_CCMR3_OC6CE_Pos: u32 = 15;
pub const TIM_CCMR3_OC6CE_Msk: u32 = 32768;
pub const TIM_CCMR3_OC6CE: u32 = 32768;
pub const TIM_CCER_CC1E_Pos: u32 = 0;
pub const TIM_CCER_CC1E_Msk: u32 = 1;
pub const TIM_CCER_CC1E: u32 = 1;
pub const TIM_CCER_CC1P_Pos: u32 = 1;
pub const TIM_CCER_CC1P_Msk: u32 = 2;
pub const TIM_CCER_CC1P: u32 = 2;
pub const TIM_CCER_CC1NE_Pos: u32 = 2;
pub const TIM_CCER_CC1NE_Msk: u32 = 4;
pub const TIM_CCER_CC1NE: u32 = 4;
pub const TIM_CCER_CC1NP_Pos: u32 = 3;
pub const TIM_CCER_CC1NP_Msk: u32 = 8;
pub const TIM_CCER_CC1NP: u32 = 8;
pub const TIM_CCER_CC2E_Pos: u32 = 4;
pub const TIM_CCER_CC2E_Msk: u32 = 16;
pub const TIM_CCER_CC2E: u32 = 16;
pub const TIM_CCER_CC2P_Pos: u32 = 5;
pub const TIM_CCER_CC2P_Msk: u32 = 32;
pub const TIM_CCER_CC2P: u32 = 32;
pub const TIM_CCER_CC2NE_Pos: u32 = 6;
pub const TIM_CCER_CC2NE_Msk: u32 = 64;
pub const TIM_CCER_CC2NE: u32 = 64;
pub const TIM_CCER_CC2NP_Pos: u32 = 7;
pub const TIM_CCER_CC2NP_Msk: u32 = 128;
pub const TIM_CCER_CC2NP: u32 = 128;
pub const TIM_CCER_CC3E_Pos: u32 = 8;
pub const TIM_CCER_CC3E_Msk: u32 = 256;
pub const TIM_CCER_CC3E: u32 = 256;
pub const TIM_CCER_CC3P_Pos: u32 = 9;
pub const TIM_CCER_CC3P_Msk: u32 = 512;
pub const TIM_CCER_CC3P: u32 = 512;
pub const TIM_CCER_CC3NE_Pos: u32 = 10;
pub const TIM_CCER_CC3NE_Msk: u32 = 1024;
pub const TIM_CCER_CC3NE: u32 = 1024;
pub const TIM_CCER_CC3NP_Pos: u32 = 11;
pub const TIM_CCER_CC3NP_Msk: u32 = 2048;
pub const TIM_CCER_CC3NP: u32 = 2048;
pub const TIM_CCER_CC4E_Pos: u32 = 12;
pub const TIM_CCER_CC4E_Msk: u32 = 4096;
pub const TIM_CCER_CC4E: u32 = 4096;
pub const TIM_CCER_CC4P_Pos: u32 = 13;
pub const TIM_CCER_CC4P_Msk: u32 = 8192;
pub const TIM_CCER_CC4P: u32 = 8192;
pub const TIM_CCER_CC4NE_Pos: u32 = 14;
pub const TIM_CCER_CC4NE_Msk: u32 = 16384;
pub const TIM_CCER_CC4NE: u32 = 16384;
pub const TIM_CCER_CC4NP_Pos: u32 = 15;
pub const TIM_CCER_CC4NP_Msk: u32 = 32768;
pub const TIM_CCER_CC4NP: u32 = 32768;
pub const TIM_CCER_CC5E_Pos: u32 = 16;
pub const TIM_CCER_CC5E_Msk: u32 = 65536;
pub const TIM_CCER_CC5E: u32 = 65536;
pub const TIM_CCER_CC5P_Pos: u32 = 17;
pub const TIM_CCER_CC5P_Msk: u32 = 131072;
pub const TIM_CCER_CC5P: u32 = 131072;
pub const TIM_CCER_CC6E_Pos: u32 = 20;
pub const TIM_CCER_CC6E_Msk: u32 = 1048576;
pub const TIM_CCER_CC6E: u32 = 1048576;
pub const TIM_CCER_CC6P_Pos: u32 = 21;
pub const TIM_CCER_CC6P_Msk: u32 = 2097152;
pub const TIM_CCER_CC6P: u32 = 2097152;
pub const TIM_CNT_CNT_Pos: u32 = 0;
pub const TIM_CNT_CNT_Msk: u32 = 4294967295;
pub const TIM_CNT_CNT: u32 = 4294967295;
pub const TIM_CNT_UIFCPY_Pos: u32 = 31;
pub const TIM_CNT_UIFCPY_Msk: u32 = 2147483648;
pub const TIM_CNT_UIFCPY: u32 = 2147483648;
pub const TIM_PSC_PSC_Pos: u32 = 0;
pub const TIM_PSC_PSC_Msk: u32 = 65535;
pub const TIM_PSC_PSC: u32 = 65535;
pub const TIM_ARR_ARR_Pos: u32 = 0;
pub const TIM_ARR_ARR_Msk: u32 = 4294967295;
pub const TIM_ARR_ARR: u32 = 4294967295;
pub const TIM_RCR_REP_Pos: u32 = 0;
pub const TIM_RCR_REP_Msk: u32 = 65535;
pub const TIM_RCR_REP: u32 = 65535;
pub const TIM_CCR1_CCR1_Pos: u32 = 0;
pub const TIM_CCR1_CCR1_Msk: u32 = 65535;
pub const TIM_CCR1_CCR1: u32 = 65535;
pub const TIM_CCR2_CCR2_Pos: u32 = 0;
pub const TIM_CCR2_CCR2_Msk: u32 = 65535;
pub const TIM_CCR2_CCR2: u32 = 65535;
pub const TIM_CCR3_CCR3_Pos: u32 = 0;
pub const TIM_CCR3_CCR3_Msk: u32 = 65535;
pub const TIM_CCR3_CCR3: u32 = 65535;
pub const TIM_CCR4_CCR4_Pos: u32 = 0;
pub const TIM_CCR4_CCR4_Msk: u32 = 65535;
pub const TIM_CCR4_CCR4: u32 = 65535;
pub const TIM_CCR5_CCR5_Pos: u32 = 0;
pub const TIM_CCR5_CCR5_Msk: u32 = 4294967295;
pub const TIM_CCR5_CCR5: u32 = 4294967295;
pub const TIM_CCR5_GC5C1_Pos: u32 = 29;
pub const TIM_CCR5_GC5C1_Msk: u32 = 536870912;
pub const TIM_CCR5_GC5C1: u32 = 536870912;
pub const TIM_CCR5_GC5C2_Pos: u32 = 30;
pub const TIM_CCR5_GC5C2_Msk: u32 = 1073741824;
pub const TIM_CCR5_GC5C2: u32 = 1073741824;
pub const TIM_CCR5_GC5C3_Pos: u32 = 31;
pub const TIM_CCR5_GC5C3_Msk: u32 = 2147483648;
pub const TIM_CCR5_GC5C3: u32 = 2147483648;
pub const TIM_CCR6_CCR6_Pos: u32 = 0;
pub const TIM_CCR6_CCR6_Msk: u32 = 65535;
pub const TIM_CCR6_CCR6: u32 = 65535;
pub const TIM_BDTR_DTG_Pos: u32 = 0;
pub const TIM_BDTR_DTG_Msk: u32 = 255;
pub const TIM_BDTR_DTG: u32 = 255;
pub const TIM_BDTR_DTG_0: u32 = 1;
pub const TIM_BDTR_DTG_1: u32 = 2;
pub const TIM_BDTR_DTG_2: u32 = 4;
pub const TIM_BDTR_DTG_3: u32 = 8;
pub const TIM_BDTR_DTG_4: u32 = 16;
pub const TIM_BDTR_DTG_5: u32 = 32;
pub const TIM_BDTR_DTG_6: u32 = 64;
pub const TIM_BDTR_DTG_7: u32 = 128;
pub const TIM_BDTR_LOCK_Pos: u32 = 8;
pub const TIM_BDTR_LOCK_Msk: u32 = 768;
pub const TIM_BDTR_LOCK: u32 = 768;
pub const TIM_BDTR_LOCK_0: u32 = 256;
pub const TIM_BDTR_LOCK_1: u32 = 512;
pub const TIM_BDTR_OSSI_Pos: u32 = 10;
pub const TIM_BDTR_OSSI_Msk: u32 = 1024;
pub const TIM_BDTR_OSSI: u32 = 1024;
pub const TIM_BDTR_OSSR_Pos: u32 = 11;
pub const TIM_BDTR_OSSR_Msk: u32 = 2048;
pub const TIM_BDTR_OSSR: u32 = 2048;
pub const TIM_BDTR_BKE_Pos: u32 = 12;
pub const TIM_BDTR_BKE_Msk: u32 = 4096;
pub const TIM_BDTR_BKE: u32 = 4096;
pub const TIM_BDTR_BKP_Pos: u32 = 13;
pub const TIM_BDTR_BKP_Msk: u32 = 8192;
pub const TIM_BDTR_BKP: u32 = 8192;
pub const TIM_BDTR_AOE_Pos: u32 = 14;
pub const TIM_BDTR_AOE_Msk: u32 = 16384;
pub const TIM_BDTR_AOE: u32 = 16384;
pub const TIM_BDTR_MOE_Pos: u32 = 15;
pub const TIM_BDTR_MOE_Msk: u32 = 32768;
pub const TIM_BDTR_MOE: u32 = 32768;
pub const TIM_BDTR_BKF_Pos: u32 = 16;
pub const TIM_BDTR_BKF_Msk: u32 = 983040;
pub const TIM_BDTR_BKF: u32 = 983040;
pub const TIM_BDTR_BK2F_Pos: u32 = 20;
pub const TIM_BDTR_BK2F_Msk: u32 = 15728640;
pub const TIM_BDTR_BK2F: u32 = 15728640;
pub const TIM_BDTR_BK2E_Pos: u32 = 24;
pub const TIM_BDTR_BK2E_Msk: u32 = 16777216;
pub const TIM_BDTR_BK2E: u32 = 16777216;
pub const TIM_BDTR_BK2P_Pos: u32 = 25;
pub const TIM_BDTR_BK2P_Msk: u32 = 33554432;
pub const TIM_BDTR_BK2P: u32 = 33554432;
pub const TIM_BDTR_BKDSRM_Pos: u32 = 26;
pub const TIM_BDTR_BKDSRM_Msk: u32 = 67108864;
pub const TIM_BDTR_BKDSRM: u32 = 67108864;
pub const TIM_BDTR_BK2DSRM_Pos: u32 = 27;
pub const TIM_BDTR_BK2DSRM_Msk: u32 = 134217728;
pub const TIM_BDTR_BK2DSRM: u32 = 134217728;
pub const TIM_BDTR_BKBID_Pos: u32 = 28;
pub const TIM_BDTR_BKBID_Msk: u32 = 268435456;
pub const TIM_BDTR_BKBID: u32 = 268435456;
pub const TIM_BDTR_BK2BID_Pos: u32 = 29;
pub const TIM_BDTR_BK2BID_Msk: u32 = 536870912;
pub const TIM_BDTR_BK2BID: u32 = 536870912;
pub const TIM_DCR_DBA_Pos: u32 = 0;
pub const TIM_DCR_DBA_Msk: u32 = 31;
pub const TIM_DCR_DBA: u32 = 31;
pub const TIM_DCR_DBA_0: u32 = 1;
pub const TIM_DCR_DBA_1: u32 = 2;
pub const TIM_DCR_DBA_2: u32 = 4;
pub const TIM_DCR_DBA_3: u32 = 8;
pub const TIM_DCR_DBA_4: u32 = 16;
pub const TIM_DCR_DBL_Pos: u32 = 8;
pub const TIM_DCR_DBL_Msk: u32 = 7936;
pub const TIM_DCR_DBL: u32 = 7936;
pub const TIM_DCR_DBL_0: u32 = 256;
pub const TIM_DCR_DBL_1: u32 = 512;
pub const TIM_DCR_DBL_2: u32 = 1024;
pub const TIM_DCR_DBL_3: u32 = 2048;
pub const TIM_DCR_DBL_4: u32 = 4096;
pub const TIM1_AF1_BKINE_Pos: u32 = 0;
pub const TIM1_AF1_BKINE_Msk: u32 = 1;
pub const TIM1_AF1_BKINE: u32 = 1;
pub const TIM1_AF1_BKCMP1E_Pos: u32 = 1;
pub const TIM1_AF1_BKCMP1E_Msk: u32 = 2;
pub const TIM1_AF1_BKCMP1E: u32 = 2;
pub const TIM1_AF1_BKCMP2E_Pos: u32 = 2;
pub const TIM1_AF1_BKCMP2E_Msk: u32 = 4;
pub const TIM1_AF1_BKCMP2E: u32 = 4;
pub const TIM1_AF1_BKCMP3E_Pos: u32 = 3;
pub const TIM1_AF1_BKCMP3E_Msk: u32 = 8;
pub const TIM1_AF1_BKCMP3E: u32 = 8;
pub const TIM1_AF1_BKCMP4E_Pos: u32 = 4;
pub const TIM1_AF1_BKCMP4E_Msk: u32 = 16;
pub const TIM1_AF1_BKCMP4E: u32 = 16;
pub const TIM1_AF1_BKINP_Pos: u32 = 9;
pub const TIM1_AF1_BKINP_Msk: u32 = 512;
pub const TIM1_AF1_BKINP: u32 = 512;
pub const TIM1_AF1_BKCMP1P_Pos: u32 = 10;
pub const TIM1_AF1_BKCMP1P_Msk: u32 = 1024;
pub const TIM1_AF1_BKCMP1P: u32 = 1024;
pub const TIM1_AF1_BKCMP2P_Pos: u32 = 11;
pub const TIM1_AF1_BKCMP2P_Msk: u32 = 2048;
pub const TIM1_AF1_BKCMP2P: u32 = 2048;
pub const TIM1_AF1_BKCMP3P_Pos: u32 = 12;
pub const TIM1_AF1_BKCMP3P_Msk: u32 = 4096;
pub const TIM1_AF1_BKCMP3P: u32 = 4096;
pub const TIM1_AF1_BKCMP4P_Pos: u32 = 13;
pub const TIM1_AF1_BKCMP4P_Msk: u32 = 8192;
pub const TIM1_AF1_BKCMP4P: u32 = 8192;
pub const TIM1_AF1_ETRSEL_Pos: u32 = 14;
pub const TIM1_AF1_ETRSEL_Msk: u32 = 245760;
pub const TIM1_AF1_ETRSEL: u32 = 245760;
pub const TIM1_AF1_ETRSEL_0: u32 = 16384;
pub const TIM1_AF1_ETRSEL_1: u32 = 32768;
pub const TIM1_AF1_ETRSEL_2: u32 = 65536;
pub const TIM1_AF1_ETRSEL_3: u32 = 131072;
pub const TIM1_AF2_BK2INE_Pos: u32 = 0;
pub const TIM1_AF2_BK2INE_Msk: u32 = 1;
pub const TIM1_AF2_BK2INE: u32 = 1;
pub const TIM1_AF2_BK2CMP1E_Pos: u32 = 1;
pub const TIM1_AF2_BK2CMP1E_Msk: u32 = 2;
pub const TIM1_AF2_BK2CMP1E: u32 = 2;
pub const TIM1_AF2_BK2CMP2E_Pos: u32 = 2;
pub const TIM1_AF2_BK2CMP2E_Msk: u32 = 4;
pub const TIM1_AF2_BK2CMP2E: u32 = 4;
pub const TIM1_AF2_BK2CMP3E_Pos: u32 = 3;
pub const TIM1_AF2_BK2CMP3E_Msk: u32 = 8;
pub const TIM1_AF2_BK2CMP3E: u32 = 8;
pub const TIM1_AF2_BK2CMP4E_Pos: u32 = 4;
pub const TIM1_AF2_BK2CMP4E_Msk: u32 = 16;
pub const TIM1_AF2_BK2CMP4E: u32 = 16;
pub const TIM1_AF2_BK2INP_Pos: u32 = 9;
pub const TIM1_AF2_BK2INP_Msk: u32 = 512;
pub const TIM1_AF2_BK2INP: u32 = 512;
pub const TIM1_AF2_BK2CMP1P_Pos: u32 = 10;
pub const TIM1_AF2_BK2CMP1P_Msk: u32 = 1024;
pub const TIM1_AF2_BK2CMP1P: u32 = 1024;
pub const TIM1_AF2_BK2CMP2P_Pos: u32 = 11;
pub const TIM1_AF2_BK2CMP2P_Msk: u32 = 2048;
pub const TIM1_AF2_BK2CMP2P: u32 = 2048;
pub const TIM1_AF2_BK2CMP3P_Pos: u32 = 12;
pub const TIM1_AF2_BK2CMP3P_Msk: u32 = 4096;
pub const TIM1_AF2_BK2CMP3P: u32 = 4096;
pub const TIM1_AF2_BK2CMP4P_Pos: u32 = 13;
pub const TIM1_AF2_BK2CMP4P_Msk: u32 = 8192;
pub const TIM1_AF2_BK2CMP4P: u32 = 8192;
pub const TIM1_AF2_OCRSEL_Pos: u32 = 16;
pub const TIM1_AF2_OCRSEL_Msk: u32 = 458752;
pub const TIM1_AF2_OCRSEL: u32 = 458752;
pub const TIM1_AF2_OCRSEL_0: u32 = 65536;
pub const TIM1_AF2_OCRSEL_1: u32 = 131072;
pub const TIM1_AF2_OCRSEL_2: u32 = 262144;
pub const TIM_OR_HSE32EN_Pos: u32 = 0;
pub const TIM_OR_HSE32EN_Msk: u32 = 1;
pub const TIM_OR_HSE32EN: u32 = 1;
pub const TIM_TISEL_TI1SEL_Pos: u32 = 0;
pub const TIM_TISEL_TI1SEL_Msk: u32 = 15;
pub const TIM_TISEL_TI1SEL: u32 = 15;
pub const TIM_TISEL_TI1SEL_0: u32 = 1;
pub const TIM_TISEL_TI1SEL_1: u32 = 2;
pub const TIM_TISEL_TI1SEL_2: u32 = 4;
pub const TIM_TISEL_TI1SEL_3: u32 = 8;
pub const TIM_TISEL_TI2SEL_Pos: u32 = 8;
pub const TIM_TISEL_TI2SEL_Msk: u32 = 3840;
pub const TIM_TISEL_TI2SEL: u32 = 3840;
pub const TIM_TISEL_TI2SEL_0: u32 = 256;
pub const TIM_TISEL_TI2SEL_1: u32 = 512;
pub const TIM_TISEL_TI2SEL_2: u32 = 1024;
pub const TIM_TISEL_TI2SEL_3: u32 = 2048;
pub const TIM_TISEL_TI3SEL_Pos: u32 = 16;
pub const TIM_TISEL_TI3SEL_Msk: u32 = 983040;
pub const TIM_TISEL_TI3SEL: u32 = 983040;
pub const TIM_TISEL_TI3SEL_0: u32 = 65536;
pub const TIM_TISEL_TI3SEL_1: u32 = 131072;
pub const TIM_TISEL_TI3SEL_2: u32 = 262144;
pub const TIM_TISEL_TI3SEL_3: u32 = 524288;
pub const TIM_TISEL_TI4SEL_Pos: u32 = 24;
pub const TIM_TISEL_TI4SEL_Msk: u32 = 251658240;
pub const TIM_TISEL_TI4SEL: u32 = 251658240;
pub const TIM_TISEL_TI4SEL_0: u32 = 16777216;
pub const TIM_TISEL_TI4SEL_1: u32 = 33554432;
pub const TIM_TISEL_TI4SEL_2: u32 = 67108864;
pub const TIM_TISEL_TI4SEL_3: u32 = 134217728;
pub const TIM_DTR2_DTGF_Pos: u32 = 0;
pub const TIM_DTR2_DTGF_Msk: u32 = 255;
pub const TIM_DTR2_DTGF: u32 = 255;
pub const TIM_DTR2_DTGF_0: u32 = 1;
pub const TIM_DTR2_DTGF_1: u32 = 2;
pub const TIM_DTR2_DTGF_2: u32 = 4;
pub const TIM_DTR2_DTGF_3: u32 = 8;
pub const TIM_DTR2_DTGF_4: u32 = 16;
pub const TIM_DTR2_DTGF_5: u32 = 32;
pub const TIM_DTR2_DTGF_6: u32 = 64;
pub const TIM_DTR2_DTGF_7: u32 = 128;
pub const TIM_DTR2_DTAE_Pos: u32 = 16;
pub const TIM_DTR2_DTAE_Msk: u32 = 65536;
pub const TIM_DTR2_DTAE: u32 = 65536;
pub const TIM_DTR2_DTPE_Pos: u32 = 17;
pub const TIM_DTR2_DTPE_Msk: u32 = 131072;
pub const TIM_DTR2_DTPE: u32 = 131072;
pub const TIM_ECR_IE_Pos: u32 = 0;
pub const TIM_ECR_IE_Msk: u32 = 1;
pub const TIM_ECR_IE: u32 = 1;
pub const TIM_ECR_IDIR_Pos: u32 = 1;
pub const TIM_ECR_IDIR_Msk: u32 = 6;
pub const TIM_ECR_IDIR: u32 = 6;
pub const TIM_ECR_IDIR_0: u32 = 2;
pub const TIM_ECR_IDIR_1: u32 = 4;
pub const TIM_ECR_FIDX_Pos: u32 = 5;
pub const TIM_ECR_FIDX_Msk: u32 = 32;
pub const TIM_ECR_FIDX: u32 = 32;
pub const TIM_ECR_IPOS_Pos: u32 = 6;
pub const TIM_ECR_IPOS_Msk: u32 = 192;
pub const TIM_ECR_IPOS: u32 = 192;
pub const TIM_ECR_IPOS_0: u32 = 64;
pub const TIM_ECR_IPOS_1: u32 = 128;
pub const TIM_ECR_PW_Pos: u32 = 16;
pub const TIM_ECR_PW_Msk: u32 = 16711680;
pub const TIM_ECR_PW: u32 = 16711680;
pub const TIM_ECR_PW_0: u32 = 65536;
pub const TIM_ECR_PW_1: u32 = 131072;
pub const TIM_ECR_PW_2: u32 = 262144;
pub const TIM_ECR_PW_3: u32 = 524288;
pub const TIM_ECR_PW_4: u32 = 1048576;
pub const TIM_ECR_PW_5: u32 = 2097152;
pub const TIM_ECR_PW_6: u32 = 4194304;
pub const TIM_ECR_PW_7: u32 = 8388608;
pub const TIM_ECR_PWPRSC_Pos: u32 = 24;
pub const TIM_ECR_PWPRSC_Msk: u32 = 117440512;
pub const TIM_ECR_PWPRSC: u32 = 117440512;
pub const TIM_ECR_PWPRSC_0: u32 = 16777216;
pub const TIM_ECR_PWPRSC_1: u32 = 33554432;
pub const TIM_ECR_PWPRSC_2: u32 = 67108864;
pub const TIM_DMAR_DMAB_Pos: u32 = 0;
pub const TIM_DMAR_DMAB_Msk: u32 = 4294967295;
pub const TIM_DMAR_DMAB: u32 = 4294967295;
pub const LPTIM_ISR_CMPM_Pos: u32 = 0;
pub const LPTIM_ISR_CMPM_Msk: u32 = 1;
pub const LPTIM_ISR_CMPM: u32 = 1;
pub const LPTIM_ISR_ARRM_Pos: u32 = 1;
pub const LPTIM_ISR_ARRM_Msk: u32 = 2;
pub const LPTIM_ISR_ARRM: u32 = 2;
pub const LPTIM_ISR_EXTTRIG_Pos: u32 = 2;
pub const LPTIM_ISR_EXTTRIG_Msk: u32 = 4;
pub const LPTIM_ISR_EXTTRIG: u32 = 4;
pub const LPTIM_ISR_CMPOK_Pos: u32 = 3;
pub const LPTIM_ISR_CMPOK_Msk: u32 = 8;
pub const LPTIM_ISR_CMPOK: u32 = 8;
pub const LPTIM_ISR_ARROK_Pos: u32 = 4;
pub const LPTIM_ISR_ARROK_Msk: u32 = 16;
pub const LPTIM_ISR_ARROK: u32 = 16;
pub const LPTIM_ISR_UP_Pos: u32 = 5;
pub const LPTIM_ISR_UP_Msk: u32 = 32;
pub const LPTIM_ISR_UP: u32 = 32;
pub const LPTIM_ISR_DOWN_Pos: u32 = 6;
pub const LPTIM_ISR_DOWN_Msk: u32 = 64;
pub const LPTIM_ISR_DOWN: u32 = 64;
pub const LPTIM_ICR_CMPMCF_Pos: u32 = 0;
pub const LPTIM_ICR_CMPMCF_Msk: u32 = 1;
pub const LPTIM_ICR_CMPMCF: u32 = 1;
pub const LPTIM_ICR_ARRMCF_Pos: u32 = 1;
pub const LPTIM_ICR_ARRMCF_Msk: u32 = 2;
pub const LPTIM_ICR_ARRMCF: u32 = 2;
pub const LPTIM_ICR_EXTTRIGCF_Pos: u32 = 2;
pub const LPTIM_ICR_EXTTRIGCF_Msk: u32 = 4;
pub const LPTIM_ICR_EXTTRIGCF: u32 = 4;
pub const LPTIM_ICR_CMPOKCF_Pos: u32 = 3;
pub const LPTIM_ICR_CMPOKCF_Msk: u32 = 8;
pub const LPTIM_ICR_CMPOKCF: u32 = 8;
pub const LPTIM_ICR_ARROKCF_Pos: u32 = 4;
pub const LPTIM_ICR_ARROKCF_Msk: u32 = 16;
pub const LPTIM_ICR_ARROKCF: u32 = 16;
pub const LPTIM_ICR_UPCF_Pos: u32 = 5;
pub const LPTIM_ICR_UPCF_Msk: u32 = 32;
pub const LPTIM_ICR_UPCF: u32 = 32;
pub const LPTIM_ICR_DOWNCF_Pos: u32 = 6;
pub const LPTIM_ICR_DOWNCF_Msk: u32 = 64;
pub const LPTIM_ICR_DOWNCF: u32 = 64;
pub const LPTIM_IER_CMPMIE_Pos: u32 = 0;
pub const LPTIM_IER_CMPMIE_Msk: u32 = 1;
pub const LPTIM_IER_CMPMIE: u32 = 1;
pub const LPTIM_IER_ARRMIE_Pos: u32 = 1;
pub const LPTIM_IER_ARRMIE_Msk: u32 = 2;
pub const LPTIM_IER_ARRMIE: u32 = 2;
pub const LPTIM_IER_EXTTRIGIE_Pos: u32 = 2;
pub const LPTIM_IER_EXTTRIGIE_Msk: u32 = 4;
pub const LPTIM_IER_EXTTRIGIE: u32 = 4;
pub const LPTIM_IER_CMPOKIE_Pos: u32 = 3;
pub const LPTIM_IER_CMPOKIE_Msk: u32 = 8;
pub const LPTIM_IER_CMPOKIE: u32 = 8;
pub const LPTIM_IER_ARROKIE_Pos: u32 = 4;
pub const LPTIM_IER_ARROKIE_Msk: u32 = 16;
pub const LPTIM_IER_ARROKIE: u32 = 16;
pub const LPTIM_IER_UPIE_Pos: u32 = 5;
pub const LPTIM_IER_UPIE_Msk: u32 = 32;
pub const LPTIM_IER_UPIE: u32 = 32;
pub const LPTIM_IER_DOWNIE_Pos: u32 = 6;
pub const LPTIM_IER_DOWNIE_Msk: u32 = 64;
pub const LPTIM_IER_DOWNIE: u32 = 64;
pub const LPTIM_CFGR_CKSEL_Pos: u32 = 0;
pub const LPTIM_CFGR_CKSEL_Msk: u32 = 1;
pub const LPTIM_CFGR_CKSEL: u32 = 1;
pub const LPTIM_CFGR_CKPOL_Pos: u32 = 1;
pub const LPTIM_CFGR_CKPOL_Msk: u32 = 6;
pub const LPTIM_CFGR_CKPOL: u32 = 6;
pub const LPTIM_CFGR_CKPOL_0: u32 = 2;
pub const LPTIM_CFGR_CKPOL_1: u32 = 4;
pub const LPTIM_CFGR_CKFLT_Pos: u32 = 3;
pub const LPTIM_CFGR_CKFLT_Msk: u32 = 24;
pub const LPTIM_CFGR_CKFLT: u32 = 24;
pub const LPTIM_CFGR_CKFLT_0: u32 = 8;
pub const LPTIM_CFGR_CKFLT_1: u32 = 16;
pub const LPTIM_CFGR_TRGFLT_Pos: u32 = 6;
pub const LPTIM_CFGR_TRGFLT_Msk: u32 = 192;
pub const LPTIM_CFGR_TRGFLT: u32 = 192;
pub const LPTIM_CFGR_TRGFLT_0: u32 = 64;
pub const LPTIM_CFGR_TRGFLT_1: u32 = 128;
pub const LPTIM_CFGR_PRESC_Pos: u32 = 9;
pub const LPTIM_CFGR_PRESC_Msk: u32 = 3584;
pub const LPTIM_CFGR_PRESC: u32 = 3584;
pub const LPTIM_CFGR_PRESC_0: u32 = 512;
pub const LPTIM_CFGR_PRESC_1: u32 = 1024;
pub const LPTIM_CFGR_PRESC_2: u32 = 2048;
pub const LPTIM_CFGR_TRIGSEL_Pos: u32 = 13;
pub const LPTIM_CFGR_TRIGSEL_Msk: u32 = 536928256;
pub const LPTIM_CFGR_TRIGSEL: u32 = 536928256;
pub const LPTIM_CFGR_TRIGSEL_0: u32 = 8192;
pub const LPTIM_CFGR_TRIGSEL_1: u32 = 16384;
pub const LPTIM_CFGR_TRIGSEL_2: u32 = 32768;
pub const LPTIM_CFGR_TRIGSEL_3: u32 = 536870912;
pub const LPTIM_CFGR_TRIGEN_Pos: u32 = 17;
pub const LPTIM_CFGR_TRIGEN_Msk: u32 = 393216;
pub const LPTIM_CFGR_TRIGEN: u32 = 393216;
pub const LPTIM_CFGR_TRIGEN_0: u32 = 131072;
pub const LPTIM_CFGR_TRIGEN_1: u32 = 262144;
pub const LPTIM_CFGR_TIMOUT_Pos: u32 = 19;
pub const LPTIM_CFGR_TIMOUT_Msk: u32 = 524288;
pub const LPTIM_CFGR_TIMOUT: u32 = 524288;
pub const LPTIM_CFGR_WAVE_Pos: u32 = 20;
pub const LPTIM_CFGR_WAVE_Msk: u32 = 1048576;
pub const LPTIM_CFGR_WAVE: u32 = 1048576;
pub const LPTIM_CFGR_WAVPOL_Pos: u32 = 21;
pub const LPTIM_CFGR_WAVPOL_Msk: u32 = 2097152;
pub const LPTIM_CFGR_WAVPOL: u32 = 2097152;
pub const LPTIM_CFGR_PRELOAD_Pos: u32 = 22;
pub const LPTIM_CFGR_PRELOAD_Msk: u32 = 4194304;
pub const LPTIM_CFGR_PRELOAD: u32 = 4194304;
pub const LPTIM_CFGR_COUNTMODE_Pos: u32 = 23;
pub const LPTIM_CFGR_COUNTMODE_Msk: u32 = 8388608;
pub const LPTIM_CFGR_COUNTMODE: u32 = 8388608;
pub const LPTIM_CFGR_ENC_Pos: u32 = 24;
pub const LPTIM_CFGR_ENC_Msk: u32 = 16777216;
pub const LPTIM_CFGR_ENC: u32 = 16777216;
pub const LPTIM_CR_ENABLE_Pos: u32 = 0;
pub const LPTIM_CR_ENABLE_Msk: u32 = 1;
pub const LPTIM_CR_ENABLE: u32 = 1;
pub const LPTIM_CR_SNGSTRT_Pos: u32 = 1;
pub const LPTIM_CR_SNGSTRT_Msk: u32 = 2;
pub const LPTIM_CR_SNGSTRT: u32 = 2;
pub const LPTIM_CR_CNTSTRT_Pos: u32 = 2;
pub const LPTIM_CR_CNTSTRT_Msk: u32 = 4;
pub const LPTIM_CR_CNTSTRT: u32 = 4;
pub const LPTIM_CR_COUNTRST_Pos: u32 = 3;
pub const LPTIM_CR_COUNTRST_Msk: u32 = 8;
pub const LPTIM_CR_COUNTRST: u32 = 8;
pub const LPTIM_CR_RSTARE_Pos: u32 = 4;
pub const LPTIM_CR_RSTARE_Msk: u32 = 16;
pub const LPTIM_CR_RSTARE: u32 = 16;
pub const LPTIM_CMP_CMP_Pos: u32 = 0;
pub const LPTIM_CMP_CMP_Msk: u32 = 65535;
pub const LPTIM_CMP_CMP: u32 = 65535;
pub const LPTIM_ARR_ARR_Pos: u32 = 0;
pub const LPTIM_ARR_ARR_Msk: u32 = 65535;
pub const LPTIM_ARR_ARR: u32 = 65535;
pub const LPTIM_CNT_CNT_Pos: u32 = 0;
pub const LPTIM_CNT_CNT_Msk: u32 = 65535;
pub const LPTIM_CNT_CNT: u32 = 65535;
pub const LPTIM_OR_IN1_Pos: u32 = 0;
pub const LPTIM_OR_IN1_Msk: u32 = 13;
pub const LPTIM_OR_IN1: u32 = 13;
pub const LPTIM_OR_IN1_0: u32 = 1;
pub const LPTIM_OR_IN1_1: u32 = 4;
pub const LPTIM_OR_IN1_2: u32 = 8;
pub const LPTIM_OR_IN2_Pos: u32 = 1;
pub const LPTIM_OR_IN2_Msk: u32 = 50;
pub const LPTIM_OR_IN2: u32 = 50;
pub const LPTIM_OR_IN2_0: u32 = 2;
pub const LPTIM_OR_IN2_1: u32 = 16;
pub const LPTIM_OR_IN2_2: u32 = 32;
pub const USART_CR1_UE_Pos: u32 = 0;
pub const USART_CR1_UE_Msk: u32 = 1;
pub const USART_CR1_UE: u32 = 1;
pub const USART_CR1_UESM_Pos: u32 = 1;
pub const USART_CR1_UESM_Msk: u32 = 2;
pub const USART_CR1_UESM: u32 = 2;
pub const USART_CR1_RE_Pos: u32 = 2;
pub const USART_CR1_RE_Msk: u32 = 4;
pub const USART_CR1_RE: u32 = 4;
pub const USART_CR1_TE_Pos: u32 = 3;
pub const USART_CR1_TE_Msk: u32 = 8;
pub const USART_CR1_TE: u32 = 8;
pub const USART_CR1_IDLEIE_Pos: u32 = 4;
pub const USART_CR1_IDLEIE_Msk: u32 = 16;
pub const USART_CR1_IDLEIE: u32 = 16;
pub const USART_CR1_RXNEIE_Pos: u32 = 5;
pub const USART_CR1_RXNEIE_Msk: u32 = 32;
pub const USART_CR1_RXNEIE: u32 = 32;
pub const USART_CR1_RXNEIE_RXFNEIE_Pos: u32 = 5;
pub const USART_CR1_RXNEIE_RXFNEIE_Msk: u32 = 32;
pub const USART_CR1_RXNEIE_RXFNEIE: u32 = 32;
pub const USART_CR1_TCIE_Pos: u32 = 6;
pub const USART_CR1_TCIE_Msk: u32 = 64;
pub const USART_CR1_TCIE: u32 = 64;
pub const USART_CR1_TXEIE_Pos: u32 = 7;
pub const USART_CR1_TXEIE_Msk: u32 = 128;
pub const USART_CR1_TXEIE: u32 = 128;
pub const USART_CR1_TXEIE_TXFNFIE_Pos: u32 = 7;
pub const USART_CR1_TXEIE_TXFNFIE_Msk: u32 = 128;
pub const USART_CR1_TXEIE_TXFNFIE: u32 = 128;
pub const USART_CR1_PEIE_Pos: u32 = 8;
pub const USART_CR1_PEIE_Msk: u32 = 256;
pub const USART_CR1_PEIE: u32 = 256;
pub const USART_CR1_PS_Pos: u32 = 9;
pub const USART_CR1_PS_Msk: u32 = 512;
pub const USART_CR1_PS: u32 = 512;
pub const USART_CR1_PCE_Pos: u32 = 10;
pub const USART_CR1_PCE_Msk: u32 = 1024;
pub const USART_CR1_PCE: u32 = 1024;
pub const USART_CR1_WAKE_Pos: u32 = 11;
pub const USART_CR1_WAKE_Msk: u32 = 2048;
pub const USART_CR1_WAKE: u32 = 2048;
pub const USART_CR1_M_Pos: u32 = 12;
pub const USART_CR1_M_Msk: u32 = 268439552;
pub const USART_CR1_M: u32 = 268439552;
pub const USART_CR1_M0_Pos: u32 = 12;
pub const USART_CR1_M0_Msk: u32 = 4096;
pub const USART_CR1_M0: u32 = 4096;
pub const USART_CR1_MME_Pos: u32 = 13;
pub const USART_CR1_MME_Msk: u32 = 8192;
pub const USART_CR1_MME: u32 = 8192;
pub const USART_CR1_CMIE_Pos: u32 = 14;
pub const USART_CR1_CMIE_Msk: u32 = 16384;
pub const USART_CR1_CMIE: u32 = 16384;
pub const USART_CR1_OVER8_Pos: u32 = 15;
pub const USART_CR1_OVER8_Msk: u32 = 32768;
pub const USART_CR1_OVER8: u32 = 32768;
pub const USART_CR1_DEDT_Pos: u32 = 16;
pub const USART_CR1_DEDT_Msk: u32 = 2031616;
pub const USART_CR1_DEDT: u32 = 2031616;
pub const USART_CR1_DEDT_0: u32 = 65536;
pub const USART_CR1_DEDT_1: u32 = 131072;
pub const USART_CR1_DEDT_2: u32 = 262144;
pub const USART_CR1_DEDT_3: u32 = 524288;
pub const USART_CR1_DEDT_4: u32 = 1048576;
pub const USART_CR1_DEAT_Pos: u32 = 21;
pub const USART_CR1_DEAT_Msk: u32 = 65011712;
pub const USART_CR1_DEAT: u32 = 65011712;
pub const USART_CR1_DEAT_0: u32 = 2097152;
pub const USART_CR1_DEAT_1: u32 = 4194304;
pub const USART_CR1_DEAT_2: u32 = 8388608;
pub const USART_CR1_DEAT_3: u32 = 16777216;
pub const USART_CR1_DEAT_4: u32 = 33554432;
pub const USART_CR1_RTOIE_Pos: u32 = 26;
pub const USART_CR1_RTOIE_Msk: u32 = 67108864;
pub const USART_CR1_RTOIE: u32 = 67108864;
pub const USART_CR1_EOBIE_Pos: u32 = 27;
pub const USART_CR1_EOBIE_Msk: u32 = 134217728;
pub const USART_CR1_EOBIE: u32 = 134217728;
pub const USART_CR1_M1_Pos: u32 = 28;
pub const USART_CR1_M1_Msk: u32 = 268435456;
pub const USART_CR1_M1: u32 = 268435456;
pub const USART_CR1_FIFOEN_Pos: u32 = 29;
pub const USART_CR1_FIFOEN_Msk: u32 = 536870912;
pub const USART_CR1_FIFOEN: u32 = 536870912;
pub const USART_CR1_TXFEIE_Pos: u32 = 30;
pub const USART_CR1_TXFEIE_Msk: u32 = 1073741824;
pub const USART_CR1_TXFEIE: u32 = 1073741824;
pub const USART_CR1_RXFFIE_Pos: u32 = 31;
pub const USART_CR1_RXFFIE_Msk: u32 = 2147483648;
pub const USART_CR1_RXFFIE: u32 = 2147483648;
pub const USART_CR2_SLVEN_Pos: u32 = 0;
pub const USART_CR2_SLVEN_Msk: u32 = 1;
pub const USART_CR2_SLVEN: u32 = 1;
pub const USART_CR2_DIS_NSS_Pos: u32 = 3;
pub const USART_CR2_DIS_NSS_Msk: u32 = 8;
pub const USART_CR2_DIS_NSS: u32 = 8;
pub const USART_CR2_ADDM7_Pos: u32 = 4;
pub const USART_CR2_ADDM7_Msk: u32 = 16;
pub const USART_CR2_ADDM7: u32 = 16;
pub const USART_CR2_LBDL_Pos: u32 = 5;
pub const USART_CR2_LBDL_Msk: u32 = 32;
pub const USART_CR2_LBDL: u32 = 32;
pub const USART_CR2_LBDIE_Pos: u32 = 6;
pub const USART_CR2_LBDIE_Msk: u32 = 64;
pub const USART_CR2_LBDIE: u32 = 64;
pub const USART_CR2_LBCL_Pos: u32 = 8;
pub const USART_CR2_LBCL_Msk: u32 = 256;
pub const USART_CR2_LBCL: u32 = 256;
pub const USART_CR2_CPHA_Pos: u32 = 9;
pub const USART_CR2_CPHA_Msk: u32 = 512;
pub const USART_CR2_CPHA: u32 = 512;
pub const USART_CR2_CPOL_Pos: u32 = 10;
pub const USART_CR2_CPOL_Msk: u32 = 1024;
pub const USART_CR2_CPOL: u32 = 1024;
pub const USART_CR2_CLKEN_Pos: u32 = 11;
pub const USART_CR2_CLKEN_Msk: u32 = 2048;
pub const USART_CR2_CLKEN: u32 = 2048;
pub const USART_CR2_STOP_Pos: u32 = 12;
pub const USART_CR2_STOP_Msk: u32 = 12288;
pub const USART_CR2_STOP: u32 = 12288;
pub const USART_CR2_STOP_0: u32 = 4096;
pub const USART_CR2_STOP_1: u32 = 8192;
pub const USART_CR2_LINEN_Pos: u32 = 14;
pub const USART_CR2_LINEN_Msk: u32 = 16384;
pub const USART_CR2_LINEN: u32 = 16384;
pub const USART_CR2_SWAP_Pos: u32 = 15;
pub const USART_CR2_SWAP_Msk: u32 = 32768;
pub const USART_CR2_SWAP: u32 = 32768;
pub const USART_CR2_RXINV_Pos: u32 = 16;
pub const USART_CR2_RXINV_Msk: u32 = 65536;
pub const USART_CR2_RXINV: u32 = 65536;
pub const USART_CR2_TXINV_Pos: u32 = 17;
pub const USART_CR2_TXINV_Msk: u32 = 131072;
pub const USART_CR2_TXINV: u32 = 131072;
pub const USART_CR2_DATAINV_Pos: u32 = 18;
pub const USART_CR2_DATAINV_Msk: u32 = 262144;
pub const USART_CR2_DATAINV: u32 = 262144;
pub const USART_CR2_MSBFIRST_Pos: u32 = 19;
pub const USART_CR2_MSBFIRST_Msk: u32 = 524288;
pub const USART_CR2_MSBFIRST: u32 = 524288;
pub const USART_CR2_ABREN_Pos: u32 = 20;
pub const USART_CR2_ABREN_Msk: u32 = 1048576;
pub const USART_CR2_ABREN: u32 = 1048576;
pub const USART_CR2_ABRMODE_Pos: u32 = 21;
pub const USART_CR2_ABRMODE_Msk: u32 = 6291456;
pub const USART_CR2_ABRMODE: u32 = 6291456;
pub const USART_CR2_ABRMODE_0: u32 = 2097152;
pub const USART_CR2_ABRMODE_1: u32 = 4194304;
pub const USART_CR2_RTOEN_Pos: u32 = 23;
pub const USART_CR2_RTOEN_Msk: u32 = 8388608;
pub const USART_CR2_RTOEN: u32 = 8388608;
pub const USART_CR2_ADD_Pos: u32 = 24;
pub const USART_CR2_ADD_Msk: u32 = 4278190080;
pub const USART_CR2_ADD: u32 = 4278190080;
pub const USART_CR3_EIE_Pos: u32 = 0;
pub const USART_CR3_EIE_Msk: u32 = 1;
pub const USART_CR3_EIE: u32 = 1;
pub const USART_CR3_IREN_Pos: u32 = 1;
pub const USART_CR3_IREN_Msk: u32 = 2;
pub const USART_CR3_IREN: u32 = 2;
pub const USART_CR3_IRLP_Pos: u32 = 2;
pub const USART_CR3_IRLP_Msk: u32 = 4;
pub const USART_CR3_IRLP: u32 = 4;
pub const USART_CR3_HDSEL_Pos: u32 = 3;
pub const USART_CR3_HDSEL_Msk: u32 = 8;
pub const USART_CR3_HDSEL: u32 = 8;
pub const USART_CR3_NACK_Pos: u32 = 4;
pub const USART_CR3_NACK_Msk: u32 = 16;
pub const USART_CR3_NACK: u32 = 16;
pub const USART_CR3_SCEN_Pos: u32 = 5;
pub const USART_CR3_SCEN_Msk: u32 = 32;
pub const USART_CR3_SCEN: u32 = 32;
pub const USART_CR3_DMAR_Pos: u32 = 6;
pub const USART_CR3_DMAR_Msk: u32 = 64;
pub const USART_CR3_DMAR: u32 = 64;
pub const USART_CR3_DMAT_Pos: u32 = 7;
pub const USART_CR3_DMAT_Msk: u32 = 128;
pub const USART_CR3_DMAT: u32 = 128;
pub const USART_CR3_RTSE_Pos: u32 = 8;
pub const USART_CR3_RTSE_Msk: u32 = 256;
pub const USART_CR3_RTSE: u32 = 256;
pub const USART_CR3_CTSE_Pos: u32 = 9;
pub const USART_CR3_CTSE_Msk: u32 = 512;
pub const USART_CR3_CTSE: u32 = 512;
pub const USART_CR3_CTSIE_Pos: u32 = 10;
pub const USART_CR3_CTSIE_Msk: u32 = 1024;
pub const USART_CR3_CTSIE: u32 = 1024;
pub const USART_CR3_ONEBIT_Pos: u32 = 11;
pub const USART_CR3_ONEBIT_Msk: u32 = 2048;
pub const USART_CR3_ONEBIT: u32 = 2048;
pub const USART_CR3_OVRDIS_Pos: u32 = 12;
pub const USART_CR3_OVRDIS_Msk: u32 = 4096;
pub const USART_CR3_OVRDIS: u32 = 4096;
pub const USART_CR3_DDRE_Pos: u32 = 13;
pub const USART_CR3_DDRE_Msk: u32 = 8192;
pub const USART_CR3_DDRE: u32 = 8192;
pub const USART_CR3_DEM_Pos: u32 = 14;
pub const USART_CR3_DEM_Msk: u32 = 16384;
pub const USART_CR3_DEM: u32 = 16384;
pub const USART_CR3_DEP_Pos: u32 = 15;
pub const USART_CR3_DEP_Msk: u32 = 32768;
pub const USART_CR3_DEP: u32 = 32768;
pub const USART_CR3_SCARCNT_Pos: u32 = 17;
pub const USART_CR3_SCARCNT_Msk: u32 = 917504;
pub const USART_CR3_SCARCNT: u32 = 917504;
pub const USART_CR3_SCARCNT_0: u32 = 131072;
pub const USART_CR3_SCARCNT_1: u32 = 262144;
pub const USART_CR3_SCARCNT_2: u32 = 524288;
pub const USART_CR3_WUS_Pos: u32 = 20;
pub const USART_CR3_WUS_Msk: u32 = 3145728;
pub const USART_CR3_WUS: u32 = 3145728;
pub const USART_CR3_WUS_0: u32 = 1048576;
pub const USART_CR3_WUS_1: u32 = 2097152;
pub const USART_CR3_WUFIE_Pos: u32 = 22;
pub const USART_CR3_WUFIE_Msk: u32 = 4194304;
pub const USART_CR3_WUFIE: u32 = 4194304;
pub const USART_CR3_TXFTIE_Pos: u32 = 23;
pub const USART_CR3_TXFTIE_Msk: u32 = 8388608;
pub const USART_CR3_TXFTIE: u32 = 8388608;
pub const USART_CR3_TCBGTIE_Pos: u32 = 24;
pub const USART_CR3_TCBGTIE_Msk: u32 = 16777216;
pub const USART_CR3_TCBGTIE: u32 = 16777216;
pub const USART_CR3_RXFTCFG_Pos: u32 = 25;
pub const USART_CR3_RXFTCFG_Msk: u32 = 234881024;
pub const USART_CR3_RXFTCFG: u32 = 234881024;
pub const USART_CR3_RXFTCFG_0: u32 = 33554432;
pub const USART_CR3_RXFTCFG_1: u32 = 67108864;
pub const USART_CR3_RXFTCFG_2: u32 = 134217728;
pub const USART_CR3_RXFTIE_Pos: u32 = 28;
pub const USART_CR3_RXFTIE_Msk: u32 = 268435456;
pub const USART_CR3_RXFTIE: u32 = 268435456;
pub const USART_CR3_TXFTCFG_Pos: u32 = 29;
pub const USART_CR3_TXFTCFG_Msk: u32 = 3758096384;
pub const USART_CR3_TXFTCFG: u32 = 3758096384;
pub const USART_CR3_TXFTCFG_0: u32 = 536870912;
pub const USART_CR3_TXFTCFG_1: u32 = 1073741824;
pub const USART_CR3_TXFTCFG_2: u32 = 2147483648;
pub const USART_BRR_LPUART_Pos: u32 = 0;
pub const USART_BRR_LPUART_Msk: u32 = 1048575;
pub const USART_BRR_LPUART: u32 = 1048575;
pub const USART_BRR_BRR_Pos: u32 = 0;
pub const USART_BRR_BRR_Msk: u32 = 65535;
pub const USART_BRR_BRR: u32 = 65535;
pub const USART_GTPR_PSC_Pos: u32 = 0;
pub const USART_GTPR_PSC_Msk: u32 = 255;
pub const USART_GTPR_PSC: u32 = 255;
pub const USART_GTPR_GT_Pos: u32 = 8;
pub const USART_GTPR_GT_Msk: u32 = 65280;
pub const USART_GTPR_GT: u32 = 65280;
pub const USART_RTOR_RTO_Pos: u32 = 0;
pub const USART_RTOR_RTO_Msk: u32 = 16777215;
pub const USART_RTOR_RTO: u32 = 16777215;
pub const USART_RTOR_BLEN_Pos: u32 = 24;
pub const USART_RTOR_BLEN_Msk: u32 = 4278190080;
pub const USART_RTOR_BLEN: u32 = 4278190080;
pub const USART_RQR_ABRRQ_Pos: u32 = 0;
pub const USART_RQR_ABRRQ_Msk: u32 = 1;
pub const USART_RQR_ABRRQ: u32 = 1;
pub const USART_RQR_SBKRQ_Pos: u32 = 1;
pub const USART_RQR_SBKRQ_Msk: u32 = 2;
pub const USART_RQR_SBKRQ: u32 = 2;
pub const USART_RQR_MMRQ_Pos: u32 = 2;
pub const USART_RQR_MMRQ_Msk: u32 = 4;
pub const USART_RQR_MMRQ: u32 = 4;
pub const USART_RQR_RXFRQ_Pos: u32 = 3;
pub const USART_RQR_RXFRQ_Msk: u32 = 8;
pub const USART_RQR_RXFRQ: u32 = 8;
pub const USART_RQR_TXFRQ_Pos: u32 = 4;
pub const USART_RQR_TXFRQ_Msk: u32 = 16;
pub const USART_RQR_TXFRQ: u32 = 16;
pub const USART_ISR_PE_Pos: u32 = 0;
pub const USART_ISR_PE_Msk: u32 = 1;
pub const USART_ISR_PE: u32 = 1;
pub const USART_ISR_FE_Pos: u32 = 1;
pub const USART_ISR_FE_Msk: u32 = 2;
pub const USART_ISR_FE: u32 = 2;
pub const USART_ISR_NE_Pos: u32 = 2;
pub const USART_ISR_NE_Msk: u32 = 4;
pub const USART_ISR_NE: u32 = 4;
pub const USART_ISR_ORE_Pos: u32 = 3;
pub const USART_ISR_ORE_Msk: u32 = 8;
pub const USART_ISR_ORE: u32 = 8;
pub const USART_ISR_IDLE_Pos: u32 = 4;
pub const USART_ISR_IDLE_Msk: u32 = 16;
pub const USART_ISR_IDLE: u32 = 16;
pub const USART_ISR_RXNE_Pos: u32 = 5;
pub const USART_ISR_RXNE_Msk: u32 = 32;
pub const USART_ISR_RXNE: u32 = 32;
pub const USART_ISR_RXNE_RXFNE_Pos: u32 = 5;
pub const USART_ISR_RXNE_RXFNE_Msk: u32 = 32;
pub const USART_ISR_RXNE_RXFNE: u32 = 32;
pub const USART_ISR_TC_Pos: u32 = 6;
pub const USART_ISR_TC_Msk: u32 = 64;
pub const USART_ISR_TC: u32 = 64;
pub const USART_ISR_TXE_Pos: u32 = 7;
pub const USART_ISR_TXE_Msk: u32 = 128;
pub const USART_ISR_TXE: u32 = 128;
pub const USART_ISR_TXE_TXFNF_Pos: u32 = 7;
pub const USART_ISR_TXE_TXFNF_Msk: u32 = 128;
pub const USART_ISR_TXE_TXFNF: u32 = 128;
pub const USART_ISR_LBDF_Pos: u32 = 8;
pub const USART_ISR_LBDF_Msk: u32 = 256;
pub const USART_ISR_LBDF: u32 = 256;
pub const USART_ISR_CTSIF_Pos: u32 = 9;
pub const USART_ISR_CTSIF_Msk: u32 = 512;
pub const USART_ISR_CTSIF: u32 = 512;
pub const USART_ISR_CTS_Pos: u32 = 10;
pub const USART_ISR_CTS_Msk: u32 = 1024;
pub const USART_ISR_CTS: u32 = 1024;
pub const USART_ISR_RTOF_Pos: u32 = 11;
pub const USART_ISR_RTOF_Msk: u32 = 2048;
pub const USART_ISR_RTOF: u32 = 2048;
pub const USART_ISR_EOBF_Pos: u32 = 12;
pub const USART_ISR_EOBF_Msk: u32 = 4096;
pub const USART_ISR_EOBF: u32 = 4096;
pub const USART_ISR_UDR_Pos: u32 = 13;
pub const USART_ISR_UDR_Msk: u32 = 8192;
pub const USART_ISR_UDR: u32 = 8192;
pub const USART_ISR_ABRE_Pos: u32 = 14;
pub const USART_ISR_ABRE_Msk: u32 = 16384;
pub const USART_ISR_ABRE: u32 = 16384;
pub const USART_ISR_ABRF_Pos: u32 = 15;
pub const USART_ISR_ABRF_Msk: u32 = 32768;
pub const USART_ISR_ABRF: u32 = 32768;
pub const USART_ISR_BUSY_Pos: u32 = 16;
pub const USART_ISR_BUSY_Msk: u32 = 65536;
pub const USART_ISR_BUSY: u32 = 65536;
pub const USART_ISR_CMF_Pos: u32 = 17;
pub const USART_ISR_CMF_Msk: u32 = 131072;
pub const USART_ISR_CMF: u32 = 131072;
pub const USART_ISR_SBKF_Pos: u32 = 18;
pub const USART_ISR_SBKF_Msk: u32 = 262144;
pub const USART_ISR_SBKF: u32 = 262144;
pub const USART_ISR_RWU_Pos: u32 = 19;
pub const USART_ISR_RWU_Msk: u32 = 524288;
pub const USART_ISR_RWU: u32 = 524288;
pub const USART_ISR_WUF_Pos: u32 = 20;
pub const USART_ISR_WUF_Msk: u32 = 1048576;
pub const USART_ISR_WUF: u32 = 1048576;
pub const USART_ISR_TEACK_Pos: u32 = 21;
pub const USART_ISR_TEACK_Msk: u32 = 2097152;
pub const USART_ISR_TEACK: u32 = 2097152;
pub const USART_ISR_REACK_Pos: u32 = 22;
pub const USART_ISR_REACK_Msk: u32 = 4194304;
pub const USART_ISR_REACK: u32 = 4194304;
pub const USART_ISR_TXFE_Pos: u32 = 23;
pub const USART_ISR_TXFE_Msk: u32 = 8388608;
pub const USART_ISR_TXFE: u32 = 8388608;
pub const USART_ISR_RXFF_Pos: u32 = 24;
pub const USART_ISR_RXFF_Msk: u32 = 16777216;
pub const USART_ISR_RXFF: u32 = 16777216;
pub const USART_ISR_TCBGT_Pos: u32 = 25;
pub const USART_ISR_TCBGT_Msk: u32 = 33554432;
pub const USART_ISR_TCBGT: u32 = 33554432;
pub const USART_ISR_RXFT_Pos: u32 = 26;
pub const USART_ISR_RXFT_Msk: u32 = 67108864;
pub const USART_ISR_RXFT: u32 = 67108864;
pub const USART_ISR_TXFT_Pos: u32 = 27;
pub const USART_ISR_TXFT_Msk: u32 = 134217728;
pub const USART_ISR_TXFT: u32 = 134217728;
pub const USART_ICR_PECF_Pos: u32 = 0;
pub const USART_ICR_PECF_Msk: u32 = 1;
pub const USART_ICR_PECF: u32 = 1;
pub const USART_ICR_FECF_Pos: u32 = 1;
pub const USART_ICR_FECF_Msk: u32 = 2;
pub const USART_ICR_FECF: u32 = 2;
pub const USART_ICR_NECF_Pos: u32 = 2;
pub const USART_ICR_NECF_Msk: u32 = 4;
pub const USART_ICR_NECF: u32 = 4;
pub const USART_ICR_ORECF_Pos: u32 = 3;
pub const USART_ICR_ORECF_Msk: u32 = 8;
pub const USART_ICR_ORECF: u32 = 8;
pub const USART_ICR_IDLECF_Pos: u32 = 4;
pub const USART_ICR_IDLECF_Msk: u32 = 16;
pub const USART_ICR_IDLECF: u32 = 16;
pub const USART_ICR_TXFECF_Pos: u32 = 5;
pub const USART_ICR_TXFECF_Msk: u32 = 32;
pub const USART_ICR_TXFECF: u32 = 32;
pub const USART_ICR_TCCF_Pos: u32 = 6;
pub const USART_ICR_TCCF_Msk: u32 = 64;
pub const USART_ICR_TCCF: u32 = 64;
pub const USART_ICR_TCBGTCF_Pos: u32 = 7;
pub const USART_ICR_TCBGTCF_Msk: u32 = 128;
pub const USART_ICR_TCBGTCF: u32 = 128;
pub const USART_ICR_LBDCF_Pos: u32 = 8;
pub const USART_ICR_LBDCF_Msk: u32 = 256;
pub const USART_ICR_LBDCF: u32 = 256;
pub const USART_ICR_CTSCF_Pos: u32 = 9;
pub const USART_ICR_CTSCF_Msk: u32 = 512;
pub const USART_ICR_CTSCF: u32 = 512;
pub const USART_ICR_RTOCF_Pos: u32 = 11;
pub const USART_ICR_RTOCF_Msk: u32 = 2048;
pub const USART_ICR_RTOCF: u32 = 2048;
pub const USART_ICR_EOBCF_Pos: u32 = 12;
pub const USART_ICR_EOBCF_Msk: u32 = 4096;
pub const USART_ICR_EOBCF: u32 = 4096;
pub const USART_ICR_UDRCF_Pos: u32 = 13;
pub const USART_ICR_UDRCF_Msk: u32 = 8192;
pub const USART_ICR_UDRCF: u32 = 8192;
pub const USART_ICR_CMCF_Pos: u32 = 17;
pub const USART_ICR_CMCF_Msk: u32 = 131072;
pub const USART_ICR_CMCF: u32 = 131072;
pub const USART_ICR_WUCF_Pos: u32 = 20;
pub const USART_ICR_WUCF_Msk: u32 = 1048576;
pub const USART_ICR_WUCF: u32 = 1048576;
pub const USART_RDR_RDR_Pos: u32 = 0;
pub const USART_RDR_RDR_Msk: u32 = 511;
pub const USART_RDR_RDR: u32 = 511;
pub const USART_TDR_TDR_Pos: u32 = 0;
pub const USART_TDR_TDR_Msk: u32 = 511;
pub const USART_TDR_TDR: u32 = 511;
pub const USART_PRESC_PRESCALER_Pos: u32 = 0;
pub const USART_PRESC_PRESCALER_Msk: u32 = 15;
pub const USART_PRESC_PRESCALER: u32 = 15;
pub const USART_PRESC_PRESCALER_0: u32 = 1;
pub const USART_PRESC_PRESCALER_1: u32 = 2;
pub const USART_PRESC_PRESCALER_2: u32 = 4;
pub const USART_PRESC_PRESCALER_3: u32 = 8;
pub const VREFBUF_CSR_ENVR_Pos: u32 = 0;
pub const VREFBUF_CSR_ENVR_Msk: u32 = 1;
pub const VREFBUF_CSR_ENVR: u32 = 1;
pub const VREFBUF_CSR_HIZ_Pos: u32 = 1;
pub const VREFBUF_CSR_HIZ_Msk: u32 = 2;
pub const VREFBUF_CSR_HIZ: u32 = 2;
pub const VREFBUF_CSR_VRR_Pos: u32 = 3;
pub const VREFBUF_CSR_VRR_Msk: u32 = 8;
pub const VREFBUF_CSR_VRR: u32 = 8;
pub const VREFBUF_CSR_VRS_Pos: u32 = 4;
pub const VREFBUF_CSR_VRS_Msk: u32 = 48;
pub const VREFBUF_CSR_VRS: u32 = 48;
pub const VREFBUF_CSR_VRS_0: u32 = 16;
pub const VREFBUF_CSR_VRS_1: u32 = 32;
pub const VREFBUF_CCR_TRIM_Pos: u32 = 0;
pub const VREFBUF_CCR_TRIM_Msk: u32 = 63;
pub const VREFBUF_CCR_TRIM: u32 = 63;
pub const USB_EP0R: u32 = 1073765376;
pub const USB_CNTR: u32 = 1073765440;
pub const USB_ISTR: u32 = 1073765444;
pub const USB_FNR: u32 = 1073765448;
pub const USB_DADDR: u32 = 1073765452;
pub const USB_BTABLE: u32 = 1073765456;
pub const USB_LPMCSR: u32 = 1073765460;
pub const USB_BCDR: u32 = 1073765464;
pub const USB_ADDR0_TX_ADDR0_TX_Pos: u32 = 1;
pub const USB_ADDR0_TX_ADDR0_TX_Msk: u32 = 65534;
pub const USB_ADDR0_TX_ADDR0_TX: u32 = 65534;
pub const USB_ADDR1_TX_ADDR1_TX_Pos: u32 = 1;
pub const USB_ADDR1_TX_ADDR1_TX_Msk: u32 = 65534;
pub const USB_ADDR1_TX_ADDR1_TX: u32 = 65534;
pub const USB_ADDR2_TX_ADDR2_TX_Pos: u32 = 1;
pub const USB_ADDR2_TX_ADDR2_TX_Msk: u32 = 65534;
pub const USB_ADDR2_TX_ADDR2_TX: u32 = 65534;
pub const USB_ADDR3_TX_ADDR3_TX_Pos: u32 = 1;
pub const USB_ADDR3_TX_ADDR3_TX_Msk: u32 = 65534;
pub const USB_ADDR3_TX_ADDR3_TX: u32 = 65534;
pub const USB_ADDR4_TX_ADDR4_TX_Pos: u32 = 1;
pub const USB_ADDR4_TX_ADDR4_TX_Msk: u32 = 65534;
pub const USB_ADDR4_TX_ADDR4_TX: u32 = 65534;
pub const USB_ADDR5_TX_ADDR5_TX_Pos: u32 = 1;
pub const USB_ADDR5_TX_ADDR5_TX_Msk: u32 = 65534;
pub const USB_ADDR5_TX_ADDR5_TX: u32 = 65534;
pub const USB_ADDR6_TX_ADDR6_TX_Pos: u32 = 1;
pub const USB_ADDR6_TX_ADDR6_TX_Msk: u32 = 65534;
pub const USB_ADDR6_TX_ADDR6_TX: u32 = 65534;
pub const USB_ADDR7_TX_ADDR7_TX_Pos: u32 = 1;
pub const USB_ADDR7_TX_ADDR7_TX_Msk: u32 = 65534;
pub const USB_ADDR7_TX_ADDR7_TX: u32 = 65534;
pub const USB_COUNT0_TX_COUNT0_TX_Pos: u32 = 0;
pub const USB_COUNT0_TX_COUNT0_TX_Msk: u32 = 1023;
pub const USB_COUNT0_TX_COUNT0_TX: u32 = 1023;
pub const USB_COUNT1_TX_COUNT1_TX_Pos: u32 = 0;
pub const USB_COUNT1_TX_COUNT1_TX_Msk: u32 = 1023;
pub const USB_COUNT1_TX_COUNT1_TX: u32 = 1023;
pub const USB_COUNT2_TX_COUNT2_TX_Pos: u32 = 0;
pub const USB_COUNT2_TX_COUNT2_TX_Msk: u32 = 1023;
pub const USB_COUNT2_TX_COUNT2_TX: u32 = 1023;
pub const USB_COUNT3_TX_COUNT3_TX_Pos: u32 = 0;
pub const USB_COUNT3_TX_COUNT3_TX_Msk: u32 = 1023;
pub const USB_COUNT3_TX_COUNT3_TX: u32 = 1023;
pub const USB_COUNT4_TX_COUNT4_TX_Pos: u32 = 0;
pub const USB_COUNT4_TX_COUNT4_TX_Msk: u32 = 1023;
pub const USB_COUNT4_TX_COUNT4_TX: u32 = 1023;
pub const USB_COUNT5_TX_COUNT5_TX_Pos: u32 = 0;
pub const USB_COUNT5_TX_COUNT5_TX_Msk: u32 = 1023;
pub const USB_COUNT5_TX_COUNT5_TX: u32 = 1023;
pub const USB_COUNT6_TX_COUNT6_TX_Pos: u32 = 0;
pub const USB_COUNT6_TX_COUNT6_TX_Msk: u32 = 1023;
pub const USB_COUNT6_TX_COUNT6_TX: u32 = 1023;
pub const USB_COUNT7_TX_COUNT7_TX_Pos: u32 = 0;
pub const USB_COUNT7_TX_COUNT7_TX_Msk: u32 = 1023;
pub const USB_COUNT7_TX_COUNT7_TX: u32 = 1023;
pub const USB_COUNT0_TX_0_COUNT0_TX_0: u32 = 1023;
pub const USB_COUNT0_TX_1_COUNT0_TX_1: u32 = 67043328;
pub const USB_COUNT1_TX_0_COUNT1_TX_0: u32 = 1023;
pub const USB_COUNT1_TX_1_COUNT1_TX_1: u32 = 67043328;
pub const USB_COUNT2_TX_0_COUNT2_TX_0: u32 = 1023;
pub const USB_COUNT2_TX_1_COUNT2_TX_1: u32 = 67043328;
pub const USB_COUNT3_TX_0_COUNT3_TX_0: u32 = 1023;
pub const USB_COUNT3_TX_1_COUNT3_TX_1: u32 = 67043328;
pub const USB_COUNT4_TX_0_COUNT4_TX_0: u32 = 1023;
pub const USB_COUNT4_TX_1_COUNT4_TX_1: u32 = 67043328;
pub const USB_COUNT5_TX_0_COUNT5_TX_0: u32 = 1023;
pub const USB_COUNT5_TX_1_COUNT5_TX_1: u32 = 67043328;
pub const USB_COUNT6_TX_0_COUNT6_TX_0: u32 = 1023;
pub const USB_COUNT6_TX_1_COUNT6_TX_1: u32 = 67043328;
pub const USB_COUNT7_TX_0_COUNT7_TX_0: u32 = 1023;
pub const USB_COUNT7_TX_1_COUNT7_TX_1: u32 = 67043328;
pub const USB_ADDR0_RX_ADDR0_RX_Pos: u32 = 1;
pub const USB_ADDR0_RX_ADDR0_RX_Msk: u32 = 65534;
pub const USB_ADDR0_RX_ADDR0_RX: u32 = 65534;
pub const USB_ADDR1_RX_ADDR1_RX_Pos: u32 = 1;
pub const USB_ADDR1_RX_ADDR1_RX_Msk: u32 = 65534;
pub const USB_ADDR1_RX_ADDR1_RX: u32 = 65534;
pub const USB_ADDR2_RX_ADDR2_RX_Pos: u32 = 1;
pub const USB_ADDR2_RX_ADDR2_RX_Msk: u32 = 65534;
pub const USB_ADDR2_RX_ADDR2_RX: u32 = 65534;
pub const USB_ADDR3_RX_ADDR3_RX_Pos: u32 = 1;
pub const USB_ADDR3_RX_ADDR3_RX_Msk: u32 = 65534;
pub const USB_ADDR3_RX_ADDR3_RX: u32 = 65534;
pub const USB_ADDR4_RX_ADDR4_RX_Pos: u32 = 1;
pub const USB_ADDR4_RX_ADDR4_RX_Msk: u32 = 65534;
pub const USB_ADDR4_RX_ADDR4_RX: u32 = 65534;
pub const USB_ADDR5_RX_ADDR5_RX_Pos: u32 = 1;
pub const USB_ADDR5_RX_ADDR5_RX_Msk: u32 = 65534;
pub const USB_ADDR5_RX_ADDR5_RX: u32 = 65534;
pub const USB_ADDR6_RX_ADDR6_RX_Pos: u32 = 1;
pub const USB_ADDR6_RX_ADDR6_RX_Msk: u32 = 65534;
pub const USB_ADDR6_RX_ADDR6_RX: u32 = 65534;
pub const USB_ADDR7_RX_ADDR7_RX_Pos: u32 = 1;
pub const USB_ADDR7_RX_ADDR7_RX_Msk: u32 = 65534;
pub const USB_ADDR7_RX_ADDR7_RX: u32 = 65534;
pub const USB_COUNT0_RX_COUNT0_RX_Pos: u32 = 0;
pub const USB_COUNT0_RX_COUNT0_RX_Msk: u32 = 1023;
pub const USB_COUNT0_RX_COUNT0_RX: u32 = 1023;
pub const USB_COUNT0_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT0_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT0_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT0_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT0_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT0_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT0_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT0_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT0_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT0_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT0_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT1_RX_COUNT1_RX_Pos: u32 = 0;
pub const USB_COUNT1_RX_COUNT1_RX_Msk: u32 = 1023;
pub const USB_COUNT1_RX_COUNT1_RX: u32 = 1023;
pub const USB_COUNT1_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT1_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT1_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT1_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT1_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT1_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT1_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT1_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT1_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT1_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT1_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT2_RX_COUNT2_RX_Pos: u32 = 0;
pub const USB_COUNT2_RX_COUNT2_RX_Msk: u32 = 1023;
pub const USB_COUNT2_RX_COUNT2_RX: u32 = 1023;
pub const USB_COUNT2_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT2_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT2_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT2_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT2_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT2_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT2_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT2_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT2_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT2_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT2_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT3_RX_COUNT3_RX_Pos: u32 = 0;
pub const USB_COUNT3_RX_COUNT3_RX_Msk: u32 = 1023;
pub const USB_COUNT3_RX_COUNT3_RX: u32 = 1023;
pub const USB_COUNT3_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT3_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT3_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT3_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT3_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT3_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT3_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT3_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT3_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT3_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT3_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT4_RX_COUNT4_RX_Pos: u32 = 0;
pub const USB_COUNT4_RX_COUNT4_RX_Msk: u32 = 1023;
pub const USB_COUNT4_RX_COUNT4_RX: u32 = 1023;
pub const USB_COUNT4_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT4_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT4_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT4_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT4_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT4_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT4_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT4_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT4_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT4_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT4_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT5_RX_COUNT5_RX_Pos: u32 = 0;
pub const USB_COUNT5_RX_COUNT5_RX_Msk: u32 = 1023;
pub const USB_COUNT5_RX_COUNT5_RX: u32 = 1023;
pub const USB_COUNT5_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT5_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT5_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT5_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT5_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT5_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT5_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT5_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT5_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT5_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT5_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT6_RX_COUNT6_RX_Pos: u32 = 0;
pub const USB_COUNT6_RX_COUNT6_RX_Msk: u32 = 1023;
pub const USB_COUNT6_RX_COUNT6_RX: u32 = 1023;
pub const USB_COUNT6_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT6_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT6_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT6_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT6_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT6_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT6_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT6_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT6_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT6_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT6_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT7_RX_COUNT7_RX_Pos: u32 = 0;
pub const USB_COUNT7_RX_COUNT7_RX_Msk: u32 = 1023;
pub const USB_COUNT7_RX_COUNT7_RX: u32 = 1023;
pub const USB_COUNT7_RX_NUM_BLOCK_Pos: u32 = 10;
pub const USB_COUNT7_RX_NUM_BLOCK_Msk: u32 = 31744;
pub const USB_COUNT7_RX_NUM_BLOCK: u32 = 31744;
pub const USB_COUNT7_RX_NUM_BLOCK_0: u32 = 1024;
pub const USB_COUNT7_RX_NUM_BLOCK_1: u32 = 2048;
pub const USB_COUNT7_RX_NUM_BLOCK_2: u32 = 4096;
pub const USB_COUNT7_RX_NUM_BLOCK_3: u32 = 8192;
pub const USB_COUNT7_RX_NUM_BLOCK_4: u32 = 16384;
pub const USB_COUNT7_RX_BLSIZE_Pos: u32 = 15;
pub const USB_COUNT7_RX_BLSIZE_Msk: u32 = 32768;
pub const USB_COUNT7_RX_BLSIZE: u32 = 32768;
pub const USB_COUNT0_RX_0_COUNT0_RX_0: u32 = 1023;
pub const USB_COUNT0_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT0_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT0_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT0_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT0_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT0_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT0_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT0_RX_1_COUNT0_RX_1: u32 = 67043328;
pub const USB_COUNT0_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT0_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT0_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT0_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT0_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT0_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT0_RX_1_BLSIZE_1: u32 = 2147483648;
pub const USB_COUNT1_RX_0_COUNT1_RX_0: u32 = 1023;
pub const USB_COUNT1_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT1_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT1_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT1_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT1_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT1_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT1_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT1_RX_1_COUNT1_RX_1: u32 = 67043328;
pub const USB_COUNT1_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT1_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT1_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT1_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT1_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT1_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT1_RX_1_BLSIZE_1: u32 = 2147483648;
pub const USB_COUNT2_RX_0_COUNT2_RX_0: u32 = 1023;
pub const USB_COUNT2_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT2_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT2_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT2_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT2_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT2_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT2_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT2_RX_1_COUNT2_RX_1: u32 = 67043328;
pub const USB_COUNT2_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT2_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT2_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT2_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT2_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT2_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT2_RX_1_BLSIZE_1: u32 = 2147483648;
pub const USB_COUNT3_RX_0_COUNT3_RX_0: u32 = 1023;
pub const USB_COUNT3_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT3_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT3_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT3_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT3_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT3_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT3_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT3_RX_1_COUNT3_RX_1: u32 = 67043328;
pub const USB_COUNT3_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT3_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT3_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT3_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT3_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT3_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT3_RX_1_BLSIZE_1: u32 = 2147483648;
pub const USB_COUNT4_RX_0_COUNT4_RX_0: u32 = 1023;
pub const USB_COUNT4_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT4_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT4_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT4_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT4_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT4_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT4_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT4_RX_1_COUNT4_RX_1: u32 = 67043328;
pub const USB_COUNT4_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT4_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT4_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT4_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT4_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT4_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT4_RX_1_BLSIZE_1: u32 = 2147483648;
pub const USB_COUNT5_RX_0_COUNT5_RX_0: u32 = 1023;
pub const USB_COUNT5_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT5_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT5_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT5_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT5_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT5_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT5_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT5_RX_1_COUNT5_RX_1: u32 = 67043328;
pub const USB_COUNT5_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT5_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT5_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT5_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT5_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT5_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT5_RX_1_BLSIZE_1: u32 = 2147483648;
pub const USB_COUNT6_RX_0_COUNT6_RX_0: u32 = 1023;
pub const USB_COUNT6_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT6_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT6_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT6_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT6_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT6_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT6_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT6_RX_1_COUNT6_RX_1: u32 = 67043328;
pub const USB_COUNT6_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT6_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT6_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT6_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT6_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT6_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT6_RX_1_BLSIZE_1: u32 = 2147483648;
pub const USB_COUNT7_RX_0_COUNT7_RX_0: u32 = 1023;
pub const USB_COUNT7_RX_0_NUM_BLOCK_0: u32 = 31744;
pub const USB_COUNT7_RX_0_NUM_BLOCK_0_0: u32 = 1024;
pub const USB_COUNT7_RX_0_NUM_BLOCK_0_1: u32 = 2048;
pub const USB_COUNT7_RX_0_NUM_BLOCK_0_2: u32 = 4096;
pub const USB_COUNT7_RX_0_NUM_BLOCK_0_3: u32 = 8192;
pub const USB_COUNT7_RX_0_NUM_BLOCK_0_4: u32 = 16384;
pub const USB_COUNT7_RX_0_BLSIZE_0: u32 = 32768;
pub const USB_COUNT7_RX_1_COUNT7_RX_1: u32 = 67043328;
pub const USB_COUNT7_RX_1_NUM_BLOCK_1: u32 = 2080374784;
pub const USB_COUNT7_RX_1_NUM_BLOCK_1_0: u32 = 67108864;
pub const USB_COUNT7_RX_1_NUM_BLOCK_1_1: u32 = 134217728;
pub const USB_COUNT7_RX_1_NUM_BLOCK_1_2: u32 = 268435456;
pub const USB_COUNT7_RX_1_NUM_BLOCK_1_3: u32 = 536870912;
pub const USB_COUNT7_RX_1_NUM_BLOCK_1_4: u32 = 1073741824;
pub const USB_COUNT7_RX_1_BLSIZE_1: u32 = 2147483648;
pub const UCPD_CFG1_HBITCLKDIV_Pos: u32 = 0;
pub const UCPD_CFG1_HBITCLKDIV_Msk: u32 = 63;
pub const UCPD_CFG1_HBITCLKDIV: u32 = 63;
pub const UCPD_CFG1_HBITCLKDIV_0: u32 = 1;
pub const UCPD_CFG1_HBITCLKDIV_1: u32 = 2;
pub const UCPD_CFG1_HBITCLKDIV_2: u32 = 4;
pub const UCPD_CFG1_HBITCLKDIV_3: u32 = 8;
pub const UCPD_CFG1_HBITCLKDIV_4: u32 = 16;
pub const UCPD_CFG1_HBITCLKDIV_5: u32 = 32;
pub const UCPD_CFG1_IFRGAP_Pos: u32 = 6;
pub const UCPD_CFG1_IFRGAP_Msk: u32 = 1984;
pub const UCPD_CFG1_IFRGAP: u32 = 1984;
pub const UCPD_CFG1_IFRGAP_0: u32 = 64;
pub const UCPD_CFG1_IFRGAP_1: u32 = 128;
pub const UCPD_CFG1_IFRGAP_2: u32 = 256;
pub const UCPD_CFG1_IFRGAP_3: u32 = 512;
pub const UCPD_CFG1_IFRGAP_4: u32 = 1024;
pub const UCPD_CFG1_TRANSWIN_Pos: u32 = 11;
pub const UCPD_CFG1_TRANSWIN_Msk: u32 = 63488;
pub const UCPD_CFG1_TRANSWIN: u32 = 63488;
pub const UCPD_CFG1_TRANSWIN_0: u32 = 2048;
pub const UCPD_CFG1_TRANSWIN_1: u32 = 4096;
pub const UCPD_CFG1_TRANSWIN_2: u32 = 8192;
pub const UCPD_CFG1_TRANSWIN_3: u32 = 16384;
pub const UCPD_CFG1_TRANSWIN_4: u32 = 32768;
pub const UCPD_CFG1_PSC_UCPDCLK_Pos: u32 = 17;
pub const UCPD_CFG1_PSC_UCPDCLK_Msk: u32 = 917504;
pub const UCPD_CFG1_PSC_UCPDCLK: u32 = 917504;
pub const UCPD_CFG1_PSC_UCPDCLK_0: u32 = 131072;
pub const UCPD_CFG1_PSC_UCPDCLK_1: u32 = 262144;
pub const UCPD_CFG1_PSC_UCPDCLK_2: u32 = 524288;
pub const UCPD_CFG1_RXORDSETEN_Pos: u32 = 20;
pub const UCPD_CFG1_RXORDSETEN_Msk: u32 = 535822336;
pub const UCPD_CFG1_RXORDSETEN: u32 = 535822336;
pub const UCPD_CFG1_RXORDSETEN_0: u32 = 1048576;
pub const UCPD_CFG1_RXORDSETEN_1: u32 = 2097152;
pub const UCPD_CFG1_RXORDSETEN_2: u32 = 4194304;
pub const UCPD_CFG1_RXORDSETEN_3: u32 = 8388608;
pub const UCPD_CFG1_RXORDSETEN_4: u32 = 16777216;
pub const UCPD_CFG1_RXORDSETEN_5: u32 = 33554432;
pub const UCPD_CFG1_RXORDSETEN_6: u32 = 67108864;
pub const UCPD_CFG1_RXORDSETEN_7: u32 = 134217728;
pub const UCPD_CFG1_RXORDSETEN_8: u32 = 268435456;
pub const UCPD_CFG1_TXDMAEN_Pos: u32 = 29;
pub const UCPD_CFG1_TXDMAEN_Msk: u32 = 536870912;
pub const UCPD_CFG1_TXDMAEN: u32 = 536870912;
pub const UCPD_CFG1_RXDMAEN_Pos: u32 = 30;
pub const UCPD_CFG1_RXDMAEN_Msk: u32 = 1073741824;
pub const UCPD_CFG1_RXDMAEN: u32 = 1073741824;
pub const UCPD_CFG1_UCPDEN_Pos: u32 = 31;
pub const UCPD_CFG1_UCPDEN_Msk: u32 = 2147483648;
pub const UCPD_CFG1_UCPDEN: u32 = 2147483648;
pub const UCPD_CFG2_RXFILTDIS_Pos: u32 = 0;
pub const UCPD_CFG2_RXFILTDIS_Msk: u32 = 1;
pub const UCPD_CFG2_RXFILTDIS: u32 = 1;
pub const UCPD_CFG2_RXFILT2N3_Pos: u32 = 1;
pub const UCPD_CFG2_RXFILT2N3_Msk: u32 = 2;
pub const UCPD_CFG2_RXFILT2N3: u32 = 2;
pub const UCPD_CFG2_FORCECLK_Pos: u32 = 2;
pub const UCPD_CFG2_FORCECLK_Msk: u32 = 4;
pub const UCPD_CFG2_FORCECLK: u32 = 4;
pub const UCPD_CFG2_WUPEN_Pos: u32 = 3;
pub const UCPD_CFG2_WUPEN_Msk: u32 = 8;
pub const UCPD_CFG2_WUPEN: u32 = 8;
pub const UCPD_CR_TXMODE_Pos: u32 = 0;
pub const UCPD_CR_TXMODE_Msk: u32 = 3;
pub const UCPD_CR_TXMODE: u32 = 3;
pub const UCPD_CR_TXMODE_0: u32 = 1;
pub const UCPD_CR_TXMODE_1: u32 = 2;
pub const UCPD_CR_TXSEND_Pos: u32 = 2;
pub const UCPD_CR_TXSEND_Msk: u32 = 4;
pub const UCPD_CR_TXSEND: u32 = 4;
pub const UCPD_CR_TXHRST_Pos: u32 = 3;
pub const UCPD_CR_TXHRST_Msk: u32 = 8;
pub const UCPD_CR_TXHRST: u32 = 8;
pub const UCPD_CR_RXMODE_Pos: u32 = 4;
pub const UCPD_CR_RXMODE_Msk: u32 = 16;
pub const UCPD_CR_RXMODE: u32 = 16;
pub const UCPD_CR_PHYRXEN_Pos: u32 = 5;
pub const UCPD_CR_PHYRXEN_Msk: u32 = 32;
pub const UCPD_CR_PHYRXEN: u32 = 32;
pub const UCPD_CR_PHYCCSEL_Pos: u32 = 6;
pub const UCPD_CR_PHYCCSEL_Msk: u32 = 64;
pub const UCPD_CR_PHYCCSEL: u32 = 64;
pub const UCPD_CR_ANASUBMODE_Pos: u32 = 7;
pub const UCPD_CR_ANASUBMODE_Msk: u32 = 384;
pub const UCPD_CR_ANASUBMODE: u32 = 384;
pub const UCPD_CR_ANASUBMODE_0: u32 = 128;
pub const UCPD_CR_ANASUBMODE_1: u32 = 256;
pub const UCPD_CR_ANAMODE_Pos: u32 = 9;
pub const UCPD_CR_ANAMODE_Msk: u32 = 512;
pub const UCPD_CR_ANAMODE: u32 = 512;
pub const UCPD_CR_CCENABLE_Pos: u32 = 10;
pub const UCPD_CR_CCENABLE_Msk: u32 = 3072;
pub const UCPD_CR_CCENABLE: u32 = 3072;
pub const UCPD_CR_CCENABLE_0: u32 = 1024;
pub const UCPD_CR_CCENABLE_1: u32 = 2048;
pub const UCPD_CR_FRSRXEN_Pos: u32 = 16;
pub const UCPD_CR_FRSRXEN_Msk: u32 = 65536;
pub const UCPD_CR_FRSRXEN: u32 = 65536;
pub const UCPD_CR_FRSTX_Pos: u32 = 17;
pub const UCPD_CR_FRSTX_Msk: u32 = 131072;
pub const UCPD_CR_FRSTX: u32 = 131072;
pub const UCPD_CR_RDCH_Pos: u32 = 18;
pub const UCPD_CR_RDCH_Msk: u32 = 262144;
pub const UCPD_CR_RDCH: u32 = 262144;
pub const UCPD_CR_CC1TCDIS_Pos: u32 = 20;
pub const UCPD_CR_CC1TCDIS_Msk: u32 = 1048576;
pub const UCPD_CR_CC1TCDIS: u32 = 1048576;
pub const UCPD_CR_CC2TCDIS_Pos: u32 = 21;
pub const UCPD_CR_CC2TCDIS_Msk: u32 = 2097152;
pub const UCPD_CR_CC2TCDIS: u32 = 2097152;
pub const UCPD_IMR_TXISIE_Pos: u32 = 0;
pub const UCPD_IMR_TXISIE_Msk: u32 = 1;
pub const UCPD_IMR_TXISIE: u32 = 1;
pub const UCPD_IMR_TXMSGDISCIE_Pos: u32 = 1;
pub const UCPD_IMR_TXMSGDISCIE_Msk: u32 = 2;
pub const UCPD_IMR_TXMSGDISCIE: u32 = 2;
pub const UCPD_IMR_TXMSGSENTIE_Pos: u32 = 2;
pub const UCPD_IMR_TXMSGSENTIE_Msk: u32 = 4;
pub const UCPD_IMR_TXMSGSENTIE: u32 = 4;
pub const UCPD_IMR_TXMSGABTIE_Pos: u32 = 3;
pub const UCPD_IMR_TXMSGABTIE_Msk: u32 = 8;
pub const UCPD_IMR_TXMSGABTIE: u32 = 8;
pub const UCPD_IMR_HRSTDISCIE_Pos: u32 = 4;
pub const UCPD_IMR_HRSTDISCIE_Msk: u32 = 16;
pub const UCPD_IMR_HRSTDISCIE: u32 = 16;
pub const UCPD_IMR_HRSTSENTIE_Pos: u32 = 5;
pub const UCPD_IMR_HRSTSENTIE_Msk: u32 = 32;
pub const UCPD_IMR_HRSTSENTIE: u32 = 32;
pub const UCPD_IMR_TXUNDIE_Pos: u32 = 6;
pub const UCPD_IMR_TXUNDIE_Msk: u32 = 64;
pub const UCPD_IMR_TXUNDIE: u32 = 64;
pub const UCPD_IMR_RXNEIE_Pos: u32 = 8;
pub const UCPD_IMR_RXNEIE_Msk: u32 = 256;
pub const UCPD_IMR_RXNEIE: u32 = 256;
pub const UCPD_IMR_RXORDDETIE_Pos: u32 = 9;
pub const UCPD_IMR_RXORDDETIE_Msk: u32 = 512;
pub const UCPD_IMR_RXORDDETIE: u32 = 512;
pub const UCPD_IMR_RXHRSTDETIE_Pos: u32 = 10;
pub const UCPD_IMR_RXHRSTDETIE_Msk: u32 = 1024;
pub const UCPD_IMR_RXHRSTDETIE: u32 = 1024;
pub const UCPD_IMR_RXOVRIE_Pos: u32 = 11;
pub const UCPD_IMR_RXOVRIE_Msk: u32 = 2048;
pub const UCPD_IMR_RXOVRIE: u32 = 2048;
pub const UCPD_IMR_RXMSGENDIE_Pos: u32 = 12;
pub const UCPD_IMR_RXMSGENDIE_Msk: u32 = 4096;
pub const UCPD_IMR_RXMSGENDIE: u32 = 4096;
pub const UCPD_IMR_TYPECEVT1IE_Pos: u32 = 14;
pub const UCPD_IMR_TYPECEVT1IE_Msk: u32 = 16384;
pub const UCPD_IMR_TYPECEVT1IE: u32 = 16384;
pub const UCPD_IMR_TYPECEVT2IE_Pos: u32 = 15;
pub const UCPD_IMR_TYPECEVT2IE_Msk: u32 = 32768;
pub const UCPD_IMR_TYPECEVT2IE: u32 = 32768;
pub const UCPD_IMR_FRSEVTIE_Pos: u32 = 20;
pub const UCPD_IMR_FRSEVTIE_Msk: u32 = 1048576;
pub const UCPD_IMR_FRSEVTIE: u32 = 1048576;
pub const UCPD_SR_TXIS_Pos: u32 = 0;
pub const UCPD_SR_TXIS_Msk: u32 = 1;
pub const UCPD_SR_TXIS: u32 = 1;
pub const UCPD_SR_TXMSGDISC_Pos: u32 = 1;
pub const UCPD_SR_TXMSGDISC_Msk: u32 = 2;
pub const UCPD_SR_TXMSGDISC: u32 = 2;
pub const UCPD_SR_TXMSGSENT_Pos: u32 = 2;
pub const UCPD_SR_TXMSGSENT_Msk: u32 = 4;
pub const UCPD_SR_TXMSGSENT: u32 = 4;
pub const UCPD_SR_TXMSGABT_Pos: u32 = 3;
pub const UCPD_SR_TXMSGABT_Msk: u32 = 8;
pub const UCPD_SR_TXMSGABT: u32 = 8;
pub const UCPD_SR_HRSTDISC_Pos: u32 = 4;
pub const UCPD_SR_HRSTDISC_Msk: u32 = 16;
pub const UCPD_SR_HRSTDISC: u32 = 16;
pub const UCPD_SR_HRSTSENT_Pos: u32 = 5;
pub const UCPD_SR_HRSTSENT_Msk: u32 = 32;
pub const UCPD_SR_HRSTSENT: u32 = 32;
pub const UCPD_SR_TXUND_Pos: u32 = 6;
pub const UCPD_SR_TXUND_Msk: u32 = 64;
pub const UCPD_SR_TXUND: u32 = 64;
pub const UCPD_SR_RXNE_Pos: u32 = 8;
pub const UCPD_SR_RXNE_Msk: u32 = 256;
pub const UCPD_SR_RXNE: u32 = 256;
pub const UCPD_SR_RXORDDET_Pos: u32 = 9;
pub const UCPD_SR_RXORDDET_Msk: u32 = 512;
pub const UCPD_SR_RXORDDET: u32 = 512;
pub const UCPD_SR_RXHRSTDET_Pos: u32 = 10;
pub const UCPD_SR_RXHRSTDET_Msk: u32 = 1024;
pub const UCPD_SR_RXHRSTDET: u32 = 1024;
pub const UCPD_SR_RXOVR_Pos: u32 = 11;
pub const UCPD_SR_RXOVR_Msk: u32 = 2048;
pub const UCPD_SR_RXOVR: u32 = 2048;
pub const UCPD_SR_RXMSGEND_Pos: u32 = 12;
pub const UCPD_SR_RXMSGEND_Msk: u32 = 4096;
pub const UCPD_SR_RXMSGEND: u32 = 4096;
pub const UCPD_SR_RXERR_Pos: u32 = 13;
pub const UCPD_SR_RXERR_Msk: u32 = 8192;
pub const UCPD_SR_RXERR: u32 = 8192;
pub const UCPD_SR_TYPECEVT1_Pos: u32 = 14;
pub const UCPD_SR_TYPECEVT1_Msk: u32 = 16384;
pub const UCPD_SR_TYPECEVT1: u32 = 16384;
pub const UCPD_SR_TYPECEVT2_Pos: u32 = 15;
pub const UCPD_SR_TYPECEVT2_Msk: u32 = 32768;
pub const UCPD_SR_TYPECEVT2: u32 = 32768;
pub const UCPD_SR_TYPEC_VSTATE_CC1_Pos: u32 = 16;
pub const UCPD_SR_TYPEC_VSTATE_CC1_Msk: u32 = 196608;
pub const UCPD_SR_TYPEC_VSTATE_CC1: u32 = 196608;
pub const UCPD_SR_TYPEC_VSTATE_CC1_0: u32 = 65536;
pub const UCPD_SR_TYPEC_VSTATE_CC1_1: u32 = 131072;
pub const UCPD_SR_TYPEC_VSTATE_CC2_Pos: u32 = 18;
pub const UCPD_SR_TYPEC_VSTATE_CC2_Msk: u32 = 786432;
pub const UCPD_SR_TYPEC_VSTATE_CC2: u32 = 786432;
pub const UCPD_SR_TYPEC_VSTATE_CC2_0: u32 = 262144;
pub const UCPD_SR_TYPEC_VSTATE_CC2_1: u32 = 524288;
pub const UCPD_SR_FRSEVT_Pos: u32 = 20;
pub const UCPD_SR_FRSEVT_Msk: u32 = 1048576;
pub const UCPD_SR_FRSEVT: u32 = 1048576;
pub const UCPD_ICR_TXMSGDISCCF_Pos: u32 = 1;
pub const UCPD_ICR_TXMSGDISCCF_Msk: u32 = 2;
pub const UCPD_ICR_TXMSGDISCCF: u32 = 2;
pub const UCPD_ICR_TXMSGSENTCF_Pos: u32 = 2;
pub const UCPD_ICR_TXMSGSENTCF_Msk: u32 = 4;
pub const UCPD_ICR_TXMSGSENTCF: u32 = 4;
pub const UCPD_ICR_TXMSGABTCF_Pos: u32 = 3;
pub const UCPD_ICR_TXMSGABTCF_Msk: u32 = 8;
pub const UCPD_ICR_TXMSGABTCF: u32 = 8;
pub const UCPD_ICR_HRSTDISCCF_Pos: u32 = 4;
pub const UCPD_ICR_HRSTDISCCF_Msk: u32 = 16;
pub const UCPD_ICR_HRSTDISCCF: u32 = 16;
pub const UCPD_ICR_HRSTSENTCF_Pos: u32 = 5;
pub const UCPD_ICR_HRSTSENTCF_Msk: u32 = 32;
pub const UCPD_ICR_HRSTSENTCF: u32 = 32;
pub const UCPD_ICR_TXUNDCF_Pos: u32 = 6;
pub const UCPD_ICR_TXUNDCF_Msk: u32 = 64;
pub const UCPD_ICR_TXUNDCF: u32 = 64;
pub const UCPD_ICR_RXORDDETCF_Pos: u32 = 9;
pub const UCPD_ICR_RXORDDETCF_Msk: u32 = 512;
pub const UCPD_ICR_RXORDDETCF: u32 = 512;
pub const UCPD_ICR_RXHRSTDETCF_Pos: u32 = 10;
pub const UCPD_ICR_RXHRSTDETCF_Msk: u32 = 1024;
pub const UCPD_ICR_RXHRSTDETCF: u32 = 1024;
pub const UCPD_ICR_RXOVRCF_Pos: u32 = 11;
pub const UCPD_ICR_RXOVRCF_Msk: u32 = 2048;
pub const UCPD_ICR_RXOVRCF: u32 = 2048;
pub const UCPD_ICR_RXMSGENDCF_Pos: u32 = 12;
pub const UCPD_ICR_RXMSGENDCF_Msk: u32 = 4096;
pub const UCPD_ICR_RXMSGENDCF: u32 = 4096;
pub const UCPD_ICR_TYPECEVT1CF_Pos: u32 = 14;
pub const UCPD_ICR_TYPECEVT1CF_Msk: u32 = 16384;
pub const UCPD_ICR_TYPECEVT1CF: u32 = 16384;
pub const UCPD_ICR_TYPECEVT2CF_Pos: u32 = 15;
pub const UCPD_ICR_TYPECEVT2CF_Msk: u32 = 32768;
pub const UCPD_ICR_TYPECEVT2CF: u32 = 32768;
pub const UCPD_ICR_FRSEVTCF_Pos: u32 = 20;
pub const UCPD_ICR_FRSEVTCF_Msk: u32 = 1048576;
pub const UCPD_ICR_FRSEVTCF: u32 = 1048576;
pub const UCPD_TX_ORDSET_TXORDSET_Pos: u32 = 0;
pub const UCPD_TX_ORDSET_TXORDSET_Msk: u32 = 1048575;
pub const UCPD_TX_ORDSET_TXORDSET: u32 = 1048575;
pub const UCPD_TX_PAYSZ_TXPAYSZ_Pos: u32 = 0;
pub const UCPD_TX_PAYSZ_TXPAYSZ_Msk: u32 = 1023;
pub const UCPD_TX_PAYSZ_TXPAYSZ: u32 = 1023;
pub const UCPD_TXDR_TXDATA_Pos: u32 = 0;
pub const UCPD_TXDR_TXDATA_Msk: u32 = 255;
pub const UCPD_TXDR_TXDATA: u32 = 255;
pub const UCPD_RX_ORDSET_RXORDSET_Pos: u32 = 0;
pub const UCPD_RX_ORDSET_RXORDSET_Msk: u32 = 7;
pub const UCPD_RX_ORDSET_RXORDSET: u32 = 7;
pub const UCPD_RX_ORDSET_RXORDSET_0: u32 = 1;
pub const UCPD_RX_ORDSET_RXORDSET_1: u32 = 2;
pub const UCPD_RX_ORDSET_RXORDSET_2: u32 = 4;
pub const UCPD_RX_ORDSET_RXSOP3OF4_Pos: u32 = 3;
pub const UCPD_RX_ORDSET_RXSOP3OF4_Msk: u32 = 8;
pub const UCPD_RX_ORDSET_RXSOP3OF4: u32 = 8;
pub const UCPD_RX_ORDSET_RXSOPKINVALID_Pos: u32 = 4;
pub const UCPD_RX_ORDSET_RXSOPKINVALID_Msk: u32 = 112;
pub const UCPD_RX_ORDSET_RXSOPKINVALID: u32 = 112;
pub const UCPD_RX_PAYSZ_RXPAYSZ_Pos: u32 = 0;
pub const UCPD_RX_PAYSZ_RXPAYSZ_Msk: u32 = 1023;
pub const UCPD_RX_PAYSZ_RXPAYSZ: u32 = 1023;
pub const UCPD_RXDR_RXDATA_Pos: u32 = 0;
pub const UCPD_RXDR_RXDATA_Msk: u32 = 255;
pub const UCPD_RXDR_RXDATA: u32 = 255;
pub const UCPD_RX_ORDEXT1_RXSOPX1_Pos: u32 = 0;
pub const UCPD_RX_ORDEXT1_RXSOPX1_Msk: u32 = 1048575;
pub const UCPD_RX_ORDEXT1_RXSOPX1: u32 = 1048575;
pub const UCPD_RX_ORDEXT2_RXSOPX2_Pos: u32 = 0;
pub const UCPD_RX_ORDEXT2_RXSOPX2_Msk: u32 = 1048575;
pub const UCPD_RX_ORDEXT2_RXSOPX2: u32 = 1048575;
pub const WWDG_CR_T_Pos: u32 = 0;
pub const WWDG_CR_T_Msk: u32 = 127;
pub const WWDG_CR_T: u32 = 127;
pub const WWDG_CR_T_0: u32 = 1;
pub const WWDG_CR_T_1: u32 = 2;
pub const WWDG_CR_T_2: u32 = 4;
pub const WWDG_CR_T_3: u32 = 8;
pub const WWDG_CR_T_4: u32 = 16;
pub const WWDG_CR_T_5: u32 = 32;
pub const WWDG_CR_T_6: u32 = 64;
pub const WWDG_CR_WDGA_Pos: u32 = 7;
pub const WWDG_CR_WDGA_Msk: u32 = 128;
pub const WWDG_CR_WDGA: u32 = 128;
pub const WWDG_CFR_W_Pos: u32 = 0;
pub const WWDG_CFR_W_Msk: u32 = 127;
pub const WWDG_CFR_W: u32 = 127;
pub const WWDG_CFR_W_0: u32 = 1;
pub const WWDG_CFR_W_1: u32 = 2;
pub const WWDG_CFR_W_2: u32 = 4;
pub const WWDG_CFR_W_3: u32 = 8;
pub const WWDG_CFR_W_4: u32 = 16;
pub const WWDG_CFR_W_5: u32 = 32;
pub const WWDG_CFR_W_6: u32 = 64;
pub const WWDG_CFR_WDGTB_Pos: u32 = 11;
pub const WWDG_CFR_WDGTB_Msk: u32 = 14336;
pub const WWDG_CFR_WDGTB: u32 = 14336;
pub const WWDG_CFR_WDGTB_0: u32 = 2048;
pub const WWDG_CFR_WDGTB_1: u32 = 4096;
pub const WWDG_CFR_WDGTB_2: u32 = 8192;
pub const WWDG_CFR_EWI_Pos: u32 = 9;
pub const WWDG_CFR_EWI_Msk: u32 = 512;
pub const WWDG_CFR_EWI: u32 = 512;
pub const WWDG_SR_EWIF_Pos: u32 = 0;
pub const WWDG_SR_EWIF_Msk: u32 = 1;
pub const WWDG_SR_EWIF: u32 = 1;
pub const DAC_WAVE_NONE: u32 = 0;
pub const DAC_WAVE_NOISE: u32 = 64;
pub const DAC_WAVE_TRIANGLE: u32 = 128;
pub const DAC_WAVEGENERATION_NONE: u32 = 0;
pub const DAC_WAVEGENERATION_NOISE: u32 = 64;
pub const DAC_WAVEGENERATION_TRIANGLE: u32 = 128;
pub const ETH_MMCCR: u32 = 256;
pub const ETH_MMCRIR: u32 = 260;
pub const ETH_MMCTIR: u32 = 264;
pub const ETH_MMCRIMR: u32 = 268;
pub const ETH_MMCTIMR: u32 = 272;
pub const ETH_MMCTGFSCCR: u32 = 332;
pub const ETH_MMCTGFMSCCR: u32 = 336;
pub const ETH_MMCTGFCR: u32 = 360;
pub const ETH_MMCRFCECR: u32 = 404;
pub const ETH_MMCRFAECR: u32 = 408;
pub const ETH_MMCRGUFCR: u32 = 452;
pub const ETH_MAC_TXFIFO_FULL: u32 = 33554432;
pub const ETH_MAC_TXFIFONOT_EMPTY: u32 = 16777216;
pub const ETH_MAC_TXFIFO_WRITE_ACTIVE: u32 = 4194304;
pub const ETH_MAC_TXFIFO_IDLE: u32 = 0;
pub const ETH_MAC_TXFIFO_READ: u32 = 1048576;
pub const ETH_MAC_TXFIFO_WAITING: u32 = 2097152;
pub const ETH_MAC_TXFIFO_WRITING: u32 = 3145728;
pub const ETH_MAC_TRANSMISSION_PAUSE: u32 = 524288;
pub const ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE: u32 = 0;
pub const ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING: u32 = 131072;
pub const ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF: u32 = 262144;
pub const ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING: u32 = 393216;
pub const ETH_MAC_MII_TRANSMIT_ACTIVE: u32 = 65536;
pub const ETH_MAC_RXFIFO_EMPTY: u32 = 0;
pub const ETH_MAC_RXFIFO_BELOW_THRESHOLD: u32 = 256;
pub const ETH_MAC_RXFIFO_ABOVE_THRESHOLD: u32 = 512;
pub const ETH_MAC_RXFIFO_FULL: u32 = 768;
pub const ETH_MAC_READCONTROLLER_IDLE: u32 = 0;
pub const ETH_MAC_READCONTROLLER_READING_DATA: u32 = 32;
pub const ETH_MAC_READCONTROLLER_READING_STATUS: u32 = 64;
pub const ETH_MAC_READCONTROLLER_FLUSHING: u32 = 96;
pub const ETH_MAC_RXFIFO_WRITE_ACTIVE: u32 = 16;
pub const ETH_MAC_SMALL_FIFO_NOTACTIVE: u32 = 0;
pub const ETH_MAC_SMALL_FIFO_READ_ACTIVE: u32 = 2;
pub const ETH_MAC_SMALL_FIFO_WRITE_ACTIVE: u32 = 4;
pub const ETH_MAC_SMALL_FIFO_RW_ACTIVE: u32 = 6;
pub const ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE: u32 = 1;
pub const HAL_MAX_DELAY: u32 = 4294967295;
pub const RCC_DBP_TIMEOUT_VALUE: u32 = 2;
pub const RCC_LSE_TIMEOUT_VALUE: u32 = 5000;
pub const RCC_OSCILLATORTYPE_NONE: u32 = 0;
pub const RCC_OSCILLATORTYPE_HSE: u32 = 1;
pub const RCC_OSCILLATORTYPE_HSI: u32 = 2;
pub const RCC_OSCILLATORTYPE_LSE: u32 = 4;
pub const RCC_OSCILLATORTYPE_LSI: u32 = 8;
pub const RCC_OSCILLATORTYPE_HSI48: u32 = 32;
pub const RCC_HSE_OFF: u32 = 0;
pub const RCC_HSE_ON: u32 = 65536;
pub const RCC_HSE_BYPASS: u32 = 327680;
pub const RCC_LSE_OFF: u32 = 0;
pub const RCC_LSE_ON: u32 = 1;
pub const RCC_LSE_BYPASS: u32 = 5;
pub const RCC_HSI_OFF: u32 = 0;
pub const RCC_HSI_ON: u32 = 256;
pub const RCC_HSICALIBRATION_DEFAULT: u32 = 64;
pub const RCC_LSI_OFF: u32 = 0;
pub const RCC_LSI_ON: u32 = 1;
pub const RCC_HSI48_OFF: u32 = 0;
pub const RCC_HSI48_ON: u32 = 1;
pub const RCC_PLL_NONE: u32 = 0;
pub const RCC_PLL_OFF: u32 = 1;
pub const RCC_PLL_ON: u32 = 2;
pub const RCC_PLLM_DIV1: u32 = 1;
pub const RCC_PLLM_DIV2: u32 = 2;
pub const RCC_PLLM_DIV3: u32 = 3;
pub const RCC_PLLM_DIV4: u32 = 4;
pub const RCC_PLLM_DIV5: u32 = 5;
pub const RCC_PLLM_DIV6: u32 = 6;
pub const RCC_PLLM_DIV7: u32 = 7;
pub const RCC_PLLM_DIV8: u32 = 8;
pub const RCC_PLLM_DIV9: u32 = 9;
pub const RCC_PLLM_DIV10: u32 = 10;
pub const RCC_PLLM_DIV11: u32 = 11;
pub const RCC_PLLM_DIV12: u32 = 12;
pub const RCC_PLLM_DIV13: u32 = 13;
pub const RCC_PLLM_DIV14: u32 = 14;
pub const RCC_PLLM_DIV15: u32 = 15;
pub const RCC_PLLM_DIV16: u32 = 16;
pub const RCC_PLLP_DIV2: u32 = 2;
pub const RCC_PLLP_DIV3: u32 = 3;
pub const RCC_PLLP_DIV4: u32 = 4;
pub const RCC_PLLP_DIV5: u32 = 5;
pub const RCC_PLLP_DIV6: u32 = 6;
pub const RCC_PLLP_DIV7: u32 = 7;
pub const RCC_PLLP_DIV8: u32 = 8;
pub const RCC_PLLP_DIV9: u32 = 9;
pub const RCC_PLLP_DIV10: u32 = 10;
pub const RCC_PLLP_DIV11: u32 = 11;
pub const RCC_PLLP_DIV12: u32 = 12;
pub const RCC_PLLP_DIV13: u32 = 13;
pub const RCC_PLLP_DIV14: u32 = 14;
pub const RCC_PLLP_DIV15: u32 = 15;
pub const RCC_PLLP_DIV16: u32 = 16;
pub const RCC_PLLP_DIV17: u32 = 17;
pub const RCC_PLLP_DIV18: u32 = 18;
pub const RCC_PLLP_DIV19: u32 = 19;
pub const RCC_PLLP_DIV20: u32 = 20;
pub const RCC_PLLP_DIV21: u32 = 21;
pub const RCC_PLLP_DIV22: u32 = 22;
pub const RCC_PLLP_DIV23: u32 = 23;
pub const RCC_PLLP_DIV24: u32 = 24;
pub const RCC_PLLP_DIV25: u32 = 25;
pub const RCC_PLLP_DIV26: u32 = 26;
pub const RCC_PLLP_DIV27: u32 = 27;
pub const RCC_PLLP_DIV28: u32 = 28;
pub const RCC_PLLP_DIV29: u32 = 29;
pub const RCC_PLLP_DIV30: u32 = 30;
pub const RCC_PLLP_DIV31: u32 = 31;
pub const RCC_PLLQ_DIV2: u32 = 2;
pub const RCC_PLLQ_DIV4: u32 = 4;
pub const RCC_PLLQ_DIV6: u32 = 6;
pub const RCC_PLLQ_DIV8: u32 = 8;
pub const RCC_PLLR_DIV2: u32 = 2;
pub const RCC_PLLR_DIV4: u32 = 4;
pub const RCC_PLLR_DIV6: u32 = 6;
pub const RCC_PLLR_DIV8: u32 = 8;
pub const RCC_PLLSOURCE_NONE: u32 = 0;
pub const RCC_PLLSOURCE_HSI: u32 = 2;
pub const RCC_PLLSOURCE_HSE: u32 = 3;
pub const RCC_PLL_ADCCLK: u32 = 65536;
pub const RCC_PLL_48M1CLK: u32 = 1048576;
pub const RCC_PLL_SYSCLK: u32 = 16777216;
pub const RCC_CLOCKTYPE_SYSCLK: u32 = 1;
pub const RCC_CLOCKTYPE_HCLK: u32 = 2;
pub const RCC_CLOCKTYPE_PCLK1: u32 = 4;
pub const RCC_CLOCKTYPE_PCLK2: u32 = 8;
pub const RCC_SYSCLKSOURCE_HSI: u32 = 1;
pub const RCC_SYSCLKSOURCE_HSE: u32 = 2;
pub const RCC_SYSCLKSOURCE_PLLCLK: u32 = 3;
pub const RCC_SYSCLKSOURCE_STATUS_HSI: u32 = 4;
pub const RCC_SYSCLKSOURCE_STATUS_HSE: u32 = 8;
pub const RCC_SYSCLKSOURCE_STATUS_PLLCLK: u32 = 12;
pub const RCC_SYSCLK_DIV1: u32 = 0;
pub const RCC_SYSCLK_DIV2: u32 = 128;
pub const RCC_SYSCLK_DIV4: u32 = 144;
pub const RCC_SYSCLK_DIV8: u32 = 160;
pub const RCC_SYSCLK_DIV16: u32 = 176;
pub const RCC_SYSCLK_DIV64: u32 = 192;
pub const RCC_SYSCLK_DIV128: u32 = 208;
pub const RCC_SYSCLK_DIV256: u32 = 224;
pub const RCC_SYSCLK_DIV512: u32 = 240;
pub const RCC_HCLK_DIV1: u32 = 0;
pub const RCC_HCLK_DIV2: u32 = 1024;
pub const RCC_HCLK_DIV4: u32 = 1280;
pub const RCC_HCLK_DIV8: u32 = 1536;
pub const RCC_HCLK_DIV16: u32 = 1792;
pub const RCC_RTCCLKSOURCE_NONE: u32 = 0;
pub const RCC_RTCCLKSOURCE_LSE: u32 = 256;
pub const RCC_RTCCLKSOURCE_LSI: u32 = 512;
pub const RCC_RTCCLKSOURCE_HSE_DIV32: u32 = 768;
pub const RCC_MCO_GPIOPORT_POS: u32 = 16;
pub const RCC_MCO_GPIOPORT_MASK: u32 = 983040;
pub const RCC_MCO_GPIOAF_POS: u32 = 20;
pub const RCC_MCO_GPIOAF_MASK: u32 = 267386880;
pub const RCC_MCO_INDEX_POS: u32 = 28;
pub const RCC_MCO_INDEX_MASK: u32 = 268435456;
pub const RCC_MCO1_INDEX: u32 = 0;
pub const RCC_MCO1SOURCE_NOCLOCK: u32 = 0;
pub const RCC_MCO1SOURCE_SYSCLK: u32 = 16777216;
pub const RCC_MCO1SOURCE_HSI: u32 = 50331648;
pub const RCC_MCO1SOURCE_HSE: u32 = 67108864;
pub const RCC_MCO1SOURCE_PLLCLK: u32 = 83886080;
pub const RCC_MCO1SOURCE_LSI: u32 = 100663296;
pub const RCC_MCO1SOURCE_LSE: u32 = 117440512;
pub const RCC_MCO1SOURCE_HSI48: u32 = 134217728;
pub const RCC_MCODIV_1: u32 = 0;
pub const RCC_MCODIV_2: u32 = 268435456;
pub const RCC_MCODIV_4: u32 = 536870912;
pub const RCC_MCODIV_8: u32 = 805306368;
pub const RCC_MCODIV_16: u32 = 1073741824;
pub const RCC_IT_LSIRDY: u32 = 1;
pub const RCC_IT_LSERDY: u32 = 2;
pub const RCC_IT_HSIRDY: u32 = 8;
pub const RCC_IT_HSERDY: u32 = 16;
pub const RCC_IT_PLLRDY: u32 = 32;
pub const RCC_IT_CSS: u32 = 256;
pub const RCC_IT_LSECSS: u32 = 512;
pub const RCC_IT_HSI48RDY: u32 = 1024;
pub const RCC_LSEDRIVE_LOW: u32 = 0;
pub const RCC_LSEDRIVE_MEDIUMLOW: u32 = 8;
pub const RCC_LSEDRIVE_MEDIUMHIGH: u32 = 16;
pub const RCC_LSEDRIVE_HIGH: u32 = 24;
pub const CR_REG_INDEX: u32 = 1;
pub const BDCR_REG_INDEX: u32 = 2;
pub const CSR_REG_INDEX: u32 = 3;
pub const CRRCR_REG_INDEX: u32 = 4;
pub const RCC_FLAG_MASK: u32 = 31;
pub const RCC_CLOCKTYPE_ALL: u32 = 15;
pub const RCC_LSCOSOURCE_LSI: u32 = 0;
pub const RCC_LSCOSOURCE_LSE: u32 = 33554432;
pub const RCC_PERIPHCLK_USART1: u32 = 1;
pub const RCC_PERIPHCLK_USART2: u32 = 2;
pub const RCC_PERIPHCLK_USART3: u32 = 4;
pub const RCC_PERIPHCLK_UART4: u32 = 8;
pub const RCC_PERIPHCLK_LPUART1: u32 = 32;
pub const RCC_PERIPHCLK_I2C1: u32 = 64;
pub const RCC_PERIPHCLK_I2C2: u32 = 128;
pub const RCC_PERIPHCLK_I2C3: u32 = 256;
pub const RCC_PERIPHCLK_LPTIM1: u32 = 512;
pub const RCC_PERIPHCLK_SAI1: u32 = 1024;
pub const RCC_PERIPHCLK_I2S: u32 = 2048;
pub const RCC_PERIPHCLK_FDCAN: u32 = 4096;
pub const RCC_PERIPHCLK_USB: u32 = 8192;
pub const RCC_PERIPHCLK_RNG: u32 = 16384;
pub const RCC_PERIPHCLK_ADC12: u32 = 32768;
pub const RCC_PERIPHCLK_RTC: u32 = 524288;
pub const RCC_USART1CLKSOURCE_PCLK2: u32 = 0;
pub const RCC_USART1CLKSOURCE_SYSCLK: u32 = 1;
pub const RCC_USART1CLKSOURCE_HSI: u32 = 2;
pub const RCC_USART1CLKSOURCE_LSE: u32 = 3;
pub const RCC_USART2CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_USART2CLKSOURCE_SYSCLK: u32 = 4;
pub const RCC_USART2CLKSOURCE_HSI: u32 = 8;
pub const RCC_USART2CLKSOURCE_LSE: u32 = 12;
pub const RCC_USART3CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_USART3CLKSOURCE_SYSCLK: u32 = 16;
pub const RCC_USART3CLKSOURCE_HSI: u32 = 32;
pub const RCC_USART3CLKSOURCE_LSE: u32 = 48;
pub const RCC_UART4CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_UART4CLKSOURCE_SYSCLK: u32 = 64;
pub const RCC_UART4CLKSOURCE_HSI: u32 = 128;
pub const RCC_UART4CLKSOURCE_LSE: u32 = 192;
pub const RCC_LPUART1CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_LPUART1CLKSOURCE_SYSCLK: u32 = 1024;
pub const RCC_LPUART1CLKSOURCE_HSI: u32 = 2048;
pub const RCC_LPUART1CLKSOURCE_LSE: u32 = 3072;
pub const RCC_I2C1CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_I2C1CLKSOURCE_SYSCLK: u32 = 4096;
pub const RCC_I2C1CLKSOURCE_HSI: u32 = 8192;
pub const RCC_I2C2CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_I2C2CLKSOURCE_SYSCLK: u32 = 16384;
pub const RCC_I2C2CLKSOURCE_HSI: u32 = 32768;
pub const RCC_I2C3CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_I2C3CLKSOURCE_SYSCLK: u32 = 65536;
pub const RCC_I2C3CLKSOURCE_HSI: u32 = 131072;
pub const RCC_LPTIM1CLKSOURCE_PCLK1: u32 = 0;
pub const RCC_LPTIM1CLKSOURCE_LSI: u32 = 262144;
pub const RCC_LPTIM1CLKSOURCE_HSI: u32 = 524288;
pub const RCC_LPTIM1CLKSOURCE_LSE: u32 = 786432;
pub const RCC_SAI1CLKSOURCE_SYSCLK: u32 = 0;
pub const RCC_SAI1CLKSOURCE_PLL: u32 = 1048576;
pub const RCC_SAI1CLKSOURCE_EXT: u32 = 2097152;
pub const RCC_SAI1CLKSOURCE_HSI: u32 = 3145728;
pub const RCC_I2SCLKSOURCE_SYSCLK: u32 = 0;
pub const RCC_I2SCLKSOURCE_PLL: u32 = 4194304;
pub const RCC_I2SCLKSOURCE_EXT: u32 = 8388608;
pub const RCC_I2SCLKSOURCE_HSI: u32 = 12582912;
pub const RCC_FDCANCLKSOURCE_HSE: u32 = 0;
pub const RCC_FDCANCLKSOURCE_PLL: u32 = 16777216;
pub const RCC_FDCANCLKSOURCE_PCLK1: u32 = 33554432;
pub const RCC_RNGCLKSOURCE_HSI48: u32 = 0;
pub const RCC_RNGCLKSOURCE_PLL: u32 = 134217728;
pub const RCC_USBCLKSOURCE_HSI48: u32 = 0;
pub const RCC_USBCLKSOURCE_PLL: u32 = 134217728;
pub const RCC_ADC12CLKSOURCE_NONE: u32 = 0;
pub const RCC_ADC12CLKSOURCE_PLL: u32 = 268435456;
pub const RCC_ADC12CLKSOURCE_SYSCLK: u32 = 536870912;
pub const RCC_EXTI_LINE_LSECSS: u32 = 524288;
pub const RCC_CRS_NONE: u32 = 0;
pub const RCC_CRS_TIMEOUT: u32 = 1;
pub const RCC_CRS_SYNCOK: u32 = 2;
pub const RCC_CRS_SYNCWARN: u32 = 4;
pub const RCC_CRS_SYNCERR: u32 = 8;
pub const RCC_CRS_SYNCMISS: u32 = 16;
pub const RCC_CRS_TRIMOVF: u32 = 32;
pub const RCC_CRS_SYNC_SOURCE_GPIO: u32 = 0;
pub const RCC_CRS_SYNC_SOURCE_LSE: u32 = 268435456;
pub const RCC_CRS_SYNC_SOURCE_USB: u32 = 536870912;
pub const RCC_CRS_SYNC_DIV1: u32 = 0;
pub const RCC_CRS_SYNC_DIV2: u32 = 16777216;
pub const RCC_CRS_SYNC_DIV4: u32 = 33554432;
pub const RCC_CRS_SYNC_DIV8: u32 = 50331648;
pub const RCC_CRS_SYNC_DIV16: u32 = 67108864;
pub const RCC_CRS_SYNC_DIV32: u32 = 83886080;
pub const RCC_CRS_SYNC_DIV64: u32 = 100663296;
pub const RCC_CRS_SYNC_DIV128: u32 = 117440512;
pub const RCC_CRS_SYNC_POLARITY_RISING: u32 = 0;
pub const RCC_CRS_SYNC_POLARITY_FALLING: u32 = 2147483648;
pub const RCC_CRS_RELOADVALUE_DEFAULT: u32 = 47999;
pub const RCC_CRS_ERRORLIMIT_DEFAULT: u32 = 34;
pub const RCC_CRS_HSI48CALIBRATION_DEFAULT: u32 = 32;
pub const RCC_CRS_FREQERRORDIR_UP: u32 = 0;
pub const RCC_CRS_FREQERRORDIR_DOWN: u32 = 32768;
pub const RCC_CRS_IT_SYNCOK: u32 = 1;
pub const RCC_CRS_IT_SYNCWARN: u32 = 2;
pub const RCC_CRS_IT_ERR: u32 = 4;
pub const RCC_CRS_IT_ESYNC: u32 = 8;
pub const RCC_CRS_IT_SYNCERR: u32 = 4;
pub const RCC_CRS_IT_SYNCMISS: u32 = 4;
pub const RCC_CRS_IT_TRIMOVF: u32 = 4;
pub const RCC_CRS_FLAG_SYNCOK: u32 = 1;
pub const RCC_CRS_FLAG_SYNCWARN: u32 = 2;
pub const RCC_CRS_FLAG_ERR: u32 = 4;
pub const RCC_CRS_FLAG_ESYNC: u32 = 8;
pub const RCC_CRS_FLAG_SYNCERR: u32 = 256;
pub const RCC_CRS_FLAG_SYNCMISS: u32 = 512;
pub const RCC_CRS_FLAG_TRIMOVF: u32 = 1024;
pub const RCC_CRS_IT_ERROR_MASK: u32 = 4;
pub const RCC_CRS_FLAG_ERROR_MASK: u32 = 1792;
pub const GPIO_PIN_MASK: u32 = 65535;
pub const GPIO_SPEED_FREQ_LOW: u32 = 0;
pub const GPIO_SPEED_FREQ_MEDIUM: u32 = 1;
pub const GPIO_SPEED_FREQ_HIGH: u32 = 2;
pub const GPIO_SPEED_FREQ_VERY_HIGH: u32 = 3;
pub const GPIO_NOPULL: u32 = 0;
pub const GPIO_PULLUP: u32 = 1;
pub const GPIO_PULLDOWN: u32 = 2;
pub const GPIO_MODE_Pos: u32 = 0;
pub const GPIO_MODE: u32 = 3;
pub const MODE_INPUT: u32 = 0;
pub const MODE_OUTPUT: u32 = 1;
pub const MODE_AF: u32 = 2;
pub const MODE_ANALOG: u32 = 3;
pub const OUTPUT_TYPE_Pos: u32 = 4;
pub const OUTPUT_TYPE: u32 = 16;
pub const OUTPUT_PP: u32 = 0;
pub const OUTPUT_OD: u32 = 16;
pub const EXTI_MODE_Pos: u32 = 16;
pub const EXTI_MODE: u32 = 196608;
pub const EXTI_IT: u32 = 65536;
pub const EXTI_EVT: u32 = 131072;
pub const TRIGGER_MODE_Pos: u32 = 20;
pub const TRIGGER_MODE: u32 = 7340032;
pub const TRIGGER_RISING: u32 = 1048576;
pub const TRIGGER_FALLING: u32 = 2097152;
pub const HAL_DMA_ERROR_NONE: u32 = 0;
pub const HAL_DMA_ERROR_TE: u32 = 1;
pub const HAL_DMA_ERROR_NO_XFER: u32 = 4;
pub const HAL_DMA_ERROR_TIMEOUT: u32 = 32;
pub const HAL_DMA_ERROR_NOT_SUPPORTED: u32 = 256;
pub const HAL_DMA_ERROR_SYNC: u32 = 512;
pub const HAL_DMA_ERROR_REQGEN: u32 = 1024;
pub const DMA_REQUEST_MEM2MEM: u32 = 0;
pub const DMA_REQUEST_GENERATOR0: u32 = 1;
pub const DMA_REQUEST_GENERATOR1: u32 = 2;
pub const DMA_REQUEST_GENERATOR2: u32 = 3;
pub const DMA_REQUEST_GENERATOR3: u32 = 4;
pub const DMA_REQUEST_ADC1: u32 = 5;
pub const DMA_REQUEST_DAC1_CHANNEL1: u32 = 6;
pub const DMA_REQUEST_DAC1_CHANNEL2: u32 = 7;
pub const DMA_REQUEST_TIM6_UP: u32 = 8;
pub const DMA_REQUEST_TIM7_UP: u32 = 9;
pub const DMA_REQUEST_SPI1_RX: u32 = 10;
pub const DMA_REQUEST_SPI1_TX: u32 = 11;
pub const DMA_REQUEST_SPI2_RX: u32 = 12;
pub const DMA_REQUEST_SPI2_TX: u32 = 13;
pub const DMA_REQUEST_SPI3_RX: u32 = 14;
pub const DMA_REQUEST_SPI3_TX: u32 = 15;
pub const DMA_REQUEST_I2C1_RX: u32 = 16;
pub const DMA_REQUEST_I2C1_TX: u32 = 17;
pub const DMA_REQUEST_I2C2_RX: u32 = 18;
pub const DMA_REQUEST_I2C2_TX: u32 = 19;
pub const DMA_REQUEST_I2C3_RX: u32 = 20;
pub const DMA_REQUEST_I2C3_TX: u32 = 21;
pub const DMA_REQUEST_USART1_RX: u32 = 24;
pub const DMA_REQUEST_USART1_TX: u32 = 25;
pub const DMA_REQUEST_USART2_RX: u32 = 26;
pub const DMA_REQUEST_USART2_TX: u32 = 27;
pub const DMA_REQUEST_USART3_RX: u32 = 28;
pub const DMA_REQUEST_USART3_TX: u32 = 29;
pub const DMA_REQUEST_UART4_RX: u32 = 30;
pub const DMA_REQUEST_UART4_TX: u32 = 31;
pub const DMA_REQUEST_LPUART1_RX: u32 = 34;
pub const DMA_REQUEST_LPUART1_TX: u32 = 35;
pub const DMA_REQUEST_ADC2: u32 = 36;
pub const DMA_REQUEST_TIM1_CH1: u32 = 42;
pub const DMA_REQUEST_TIM1_CH2: u32 = 43;
pub const DMA_REQUEST_TIM1_CH3: u32 = 44;
pub const DMA_REQUEST_TIM1_CH4: u32 = 45;
pub const DMA_REQUEST_TIM1_UP: u32 = 46;
pub const DMA_REQUEST_TIM1_TRIG: u32 = 47;
pub const DMA_REQUEST_TIM1_COM: u32 = 48;
pub const DMA_REQUEST_TIM8_CH1: u32 = 49;
pub const DMA_REQUEST_TIM8_CH2: u32 = 50;
pub const DMA_REQUEST_TIM8_CH3: u32 = 51;
pub const DMA_REQUEST_TIM8_CH4: u32 = 52;
pub const DMA_REQUEST_TIM8_UP: u32 = 53;
pub const DMA_REQUEST_TIM8_TRIG: u32 = 54;
pub const DMA_REQUEST_TIM8_COM: u32 = 55;
pub const DMA_REQUEST_TIM2_CH1: u32 = 56;
pub const DMA_REQUEST_TIM2_CH2: u32 = 57;
pub const DMA_REQUEST_TIM2_CH3: u32 = 58;
pub const DMA_REQUEST_TIM2_CH4: u32 = 59;
pub const DMA_REQUEST_TIM2_UP: u32 = 60;
pub const DMA_REQUEST_TIM3_CH1: u32 = 61;
pub const DMA_REQUEST_TIM3_CH2: u32 = 62;
pub const DMA_REQUEST_TIM3_CH3: u32 = 63;
pub const DMA_REQUEST_TIM3_CH4: u32 = 64;
pub const DMA_REQUEST_TIM3_UP: u32 = 65;
pub const DMA_REQUEST_TIM3_TRIG: u32 = 66;
pub const DMA_REQUEST_TIM4_CH1: u32 = 67;
pub const DMA_REQUEST_TIM4_CH2: u32 = 68;
pub const DMA_REQUEST_TIM4_CH3: u32 = 69;
pub const DMA_REQUEST_TIM4_CH4: u32 = 70;
pub const DMA_REQUEST_TIM4_UP: u32 = 71;
pub const DMA_REQUEST_TIM15_CH1: u32 = 78;
pub const DMA_REQUEST_TIM15_UP: u32 = 79;
pub const DMA_REQUEST_TIM15_TRIG: u32 = 80;
pub const DMA_REQUEST_TIM15_COM: u32 = 81;
pub const DMA_REQUEST_TIM16_CH1: u32 = 82;
pub const DMA_REQUEST_TIM16_UP: u32 = 83;
pub const DMA_REQUEST_TIM17_CH1: u32 = 84;
pub const DMA_REQUEST_TIM17_UP: u32 = 85;
pub const DMA_REQUEST_AES_IN: u32 = 91;
pub const DMA_REQUEST_AES_OUT: u32 = 92;
pub const DMA_REQUEST_DAC3_CHANNEL1: u32 = 102;
pub const DMA_REQUEST_DAC3_CHANNEL2: u32 = 103;
pub const DMA_REQUEST_SAI1_A: u32 = 108;
pub const DMA_REQUEST_SAI1_B: u32 = 109;
pub const DMA_REQUEST_FMAC_READ: u32 = 110;
pub const DMA_REQUEST_FMAC_WRITE: u32 = 111;
pub const DMA_REQUEST_CORDIC_READ: u32 = 112;
pub const DMA_REQUEST_CORDIC_WRITE: u32 = 113;
pub const DMA_REQUEST_UCPD1_RX: u32 = 114;
pub const DMA_REQUEST_UCPD1_TX: u32 = 115;
pub const DMA_PERIPH_TO_MEMORY: u32 = 0;
pub const DMA_MEMORY_TO_PERIPH: u32 = 16;
pub const DMA_MEMORY_TO_MEMORY: u32 = 16384;
pub const DMA_PINC_ENABLE: u32 = 64;
pub const DMA_PINC_DISABLE: u32 = 0;
pub const DMA_MINC_ENABLE: u32 = 128;
pub const DMA_MINC_DISABLE: u32 = 0;
pub const DMA_PDATAALIGN_BYTE: u32 = 0;
pub const DMA_PDATAALIGN_HALFWORD: u32 = 256;
pub const DMA_PDATAALIGN_WORD: u32 = 512;
pub const DMA_MDATAALIGN_BYTE: u32 = 0;
pub const DMA_MDATAALIGN_HALFWORD: u32 = 1024;
pub const DMA_MDATAALIGN_WORD: u32 = 2048;
pub const DMA_NORMAL: u32 = 0;
pub const DMA_CIRCULAR: u32 = 32;
pub const DMA_PRIORITY_LOW: u32 = 0;
pub const DMA_PRIORITY_MEDIUM: u32 = 4096;
pub const DMA_PRIORITY_HIGH: u32 = 8192;
pub const DMA_PRIORITY_VERY_HIGH: u32 = 12288;
pub const DMA_IT_TC: u32 = 2;
pub const DMA_IT_HT: u32 = 4;
pub const DMA_IT_TE: u32 = 8;
pub const DMA_FLAG_GL1: u32 = 1;
pub const DMA_FLAG_TC1: u32 = 2;
pub const DMA_FLAG_HT1: u32 = 4;
pub const DMA_FLAG_TE1: u32 = 8;
pub const DMA_FLAG_GL2: u32 = 16;
pub const DMA_FLAG_TC2: u32 = 32;
pub const DMA_FLAG_HT2: u32 = 64;
pub const DMA_FLAG_TE2: u32 = 128;
pub const DMA_FLAG_GL3: u32 = 256;
pub const DMA_FLAG_TC3: u32 = 512;
pub const DMA_FLAG_HT3: u32 = 1024;
pub const DMA_FLAG_TE3: u32 = 2048;
pub const DMA_FLAG_GL4: u32 = 4096;
pub const DMA_FLAG_TC4: u32 = 8192;
pub const DMA_FLAG_HT4: u32 = 16384;
pub const DMA_FLAG_TE4: u32 = 32768;
pub const DMA_FLAG_GL5: u32 = 65536;
pub const DMA_FLAG_TC5: u32 = 131072;
pub const DMA_FLAG_HT5: u32 = 262144;
pub const DMA_FLAG_TE5: u32 = 524288;
pub const DMA_FLAG_GL6: u32 = 1048576;
pub const DMA_FLAG_TC6: u32 = 2097152;
pub const DMA_FLAG_HT6: u32 = 4194304;
pub const DMA_FLAG_TE6: u32 = 8388608;
pub const HAL_DMAMUX1_SYNC_EXTI0: u32 = 0;
pub const HAL_DMAMUX1_SYNC_EXTI1: u32 = 1;
pub const HAL_DMAMUX1_SYNC_EXTI2: u32 = 2;
pub const HAL_DMAMUX1_SYNC_EXTI3: u32 = 3;
pub const HAL_DMAMUX1_SYNC_EXTI4: u32 = 4;
pub const HAL_DMAMUX1_SYNC_EXTI5: u32 = 5;
pub const HAL_DMAMUX1_SYNC_EXTI6: u32 = 6;
pub const HAL_DMAMUX1_SYNC_EXTI7: u32 = 7;
pub const HAL_DMAMUX1_SYNC_EXTI8: u32 = 8;
pub const HAL_DMAMUX1_SYNC_EXTI9: u32 = 9;
pub const HAL_DMAMUX1_SYNC_EXTI10: u32 = 10;
pub const HAL_DMAMUX1_SYNC_EXTI11: u32 = 11;
pub const HAL_DMAMUX1_SYNC_EXTI12: u32 = 12;
pub const HAL_DMAMUX1_SYNC_EXTI13: u32 = 13;
pub const HAL_DMAMUX1_SYNC_EXTI14: u32 = 14;
pub const HAL_DMAMUX1_SYNC_EXTI15: u32 = 15;
pub const HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT: u32 = 16;
pub const HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT: u32 = 17;
pub const HAL_DMAMUX1_SYNC_DMAMUX1_CH2_EVT: u32 = 18;
pub const HAL_DMAMUX1_SYNC_DMAMUX1_CH3_EVT: u32 = 19;
pub const HAL_DMAMUX1_SYNC_LPTIM1_OUT: u32 = 20;
pub const HAL_DMAMUX_SYNC_NO_EVENT: u32 = 0;
pub const HAL_DMAMUX1_REQ_GEN_EXTI0: u32 = 0;
pub const HAL_DMAMUX1_REQ_GEN_EXTI1: u32 = 1;
pub const HAL_DMAMUX1_REQ_GEN_EXTI2: u32 = 2;
pub const HAL_DMAMUX1_REQ_GEN_EXTI3: u32 = 3;
pub const HAL_DMAMUX1_REQ_GEN_EXTI4: u32 = 4;
pub const HAL_DMAMUX1_REQ_GEN_EXTI5: u32 = 5;
pub const HAL_DMAMUX1_REQ_GEN_EXTI6: u32 = 6;
pub const HAL_DMAMUX1_REQ_GEN_EXTI7: u32 = 7;
pub const HAL_DMAMUX1_REQ_GEN_EXTI8: u32 = 8;
pub const HAL_DMAMUX1_REQ_GEN_EXTI9: u32 = 9;
pub const HAL_DMAMUX1_REQ_GEN_EXTI10: u32 = 10;
pub const HAL_DMAMUX1_REQ_GEN_EXTI11: u32 = 11;
pub const HAL_DMAMUX1_REQ_GEN_EXTI12: u32 = 12;
pub const HAL_DMAMUX1_REQ_GEN_EXTI13: u32 = 13;
pub const HAL_DMAMUX1_REQ_GEN_EXTI14: u32 = 14;
pub const HAL_DMAMUX1_REQ_GEN_EXTI15: u32 = 15;
pub const HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT: u32 = 16;
pub const HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT: u32 = 17;
pub const HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT: u32 = 18;
pub const HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH3_EVT: u32 = 19;
pub const HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT: u32 = 20;
pub const HAL_DMAMUX_REQ_GEN_NO_EVENT: u32 = 0;
pub const HAL_DMAMUX_REQ_GEN_RISING: u32 = 131072;
pub const HAL_DMAMUX_REQ_GEN_FALLING: u32 = 262144;
pub const HAL_DMAMUX_REQ_GEN_RISING_FALLING: u32 = 393216;
pub const NVIC_PRIORITYGROUP_0: u32 = 7;
pub const NVIC_PRIORITYGROUP_1: u32 = 6;
pub const NVIC_PRIORITYGROUP_2: u32 = 5;
pub const NVIC_PRIORITYGROUP_3: u32 = 4;
pub const NVIC_PRIORITYGROUP_4: u32 = 3;
pub const SYSTICK_CLKSOURCE_HCLK_DIV8: u32 = 0;
pub const SYSTICK_CLKSOURCE_HCLK: u32 = 4;
pub const MPU_HFNMI_PRIVDEF_NONE: u32 = 0;
pub const MPU_HARDFAULT_NMI: u32 = 2;
pub const MPU_PRIVILEGED_DEFAULT: u32 = 4;
pub const MPU_HFNMI_PRIVDEF: u32 = 6;
pub const ADC_SQR1_REGOFFSET: u32 = 0;
pub const ADC_SQR2_REGOFFSET: u32 = 256;
pub const ADC_SQR3_REGOFFSET: u32 = 512;
pub const ADC_SQR4_REGOFFSET: u32 = 768;
pub const ADC_REG_SQRX_REGOFFSET_MASK: u32 = 768;
pub const ADC_SQRX_REGOFFSET_POS: u32 = 8;
pub const ADC_REG_RANK_1_SQRX_BITOFFSET_POS: u32 = 6;
pub const ADC_REG_RANK_2_SQRX_BITOFFSET_POS: u32 = 12;
pub const ADC_REG_RANK_3_SQRX_BITOFFSET_POS: u32 = 18;
pub const ADC_REG_RANK_4_SQRX_BITOFFSET_POS: u32 = 24;
pub const ADC_REG_RANK_5_SQRX_BITOFFSET_POS: u32 = 0;
pub const ADC_REG_RANK_6_SQRX_BITOFFSET_POS: u32 = 6;
pub const ADC_REG_RANK_7_SQRX_BITOFFSET_POS: u32 = 12;
pub const ADC_REG_RANK_8_SQRX_BITOFFSET_POS: u32 = 18;
pub const ADC_REG_RANK_9_SQRX_BITOFFSET_POS: u32 = 24;
pub const ADC_REG_RANK_10_SQRX_BITOFFSET_POS: u32 = 0;
pub const ADC_REG_RANK_11_SQRX_BITOFFSET_POS: u32 = 6;
pub const ADC_REG_RANK_12_SQRX_BITOFFSET_POS: u32 = 12;
pub const ADC_REG_RANK_13_SQRX_BITOFFSET_POS: u32 = 18;
pub const ADC_REG_RANK_14_SQRX_BITOFFSET_POS: u32 = 24;
pub const ADC_REG_RANK_15_SQRX_BITOFFSET_POS: u32 = 0;
pub const ADC_REG_RANK_16_SQRX_BITOFFSET_POS: u32 = 6;
pub const ADC_JDR1_REGOFFSET: u32 = 0;
pub const ADC_JDR2_REGOFFSET: u32 = 256;
pub const ADC_JDR3_REGOFFSET: u32 = 512;
pub const ADC_JDR4_REGOFFSET: u32 = 768;
pub const ADC_INJ_JDRX_REGOFFSET_MASK: u32 = 768;
pub const ADC_JDRX_REGOFFSET_POS: u32 = 8;
pub const ADC_INJ_RANK_1_JSQR_BITOFFSET_POS: u32 = 9;
pub const ADC_INJ_RANK_2_JSQR_BITOFFSET_POS: u32 = 15;
pub const ADC_INJ_RANK_3_JSQR_BITOFFSET_POS: u32 = 21;
pub const ADC_INJ_RANK_4_JSQR_BITOFFSET_POS: u32 = 27;
pub const ADC_REG_TRIG_EXT_EDGE_DEFAULT: u32 = 1024;
pub const ADC_REG_TRIG_EXTSEL_BITOFFSET_POS: u32 = 5;
pub const ADC_REG_TRIG_EXTEN_BITOFFSET_POS: u32 = 10;
pub const ADC_INJ_TRIG_EXT_EDGE_DEFAULT: u32 = 128;
pub const ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS: u32 = 2;
pub const ADC_INJ_TRIG_EXTEN_BITOFFSET_POS: u32 = 7;
pub const ADC_CHANNEL_ID_NUMBER_MASK: u32 = 2080374784;
pub const ADC_CHANNEL_ID_BITFIELD_MASK: u32 = 524287;
pub const ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS: u32 = 26;
pub const ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0: u32 = 31;
pub const ADC_CHANNEL_ID_INTERNAL_CH: u32 = 2147483648;
pub const ADC_CHANNEL_ID_INTERNAL_CH_2: u32 = 524288;
pub const ADC_CHANNEL_ID_INTERNAL_CH_MASK: u32 = 2148007936;
pub const ADC_SMPR1_REGOFFSET: u32 = 0;
pub const ADC_SMPR2_REGOFFSET: u32 = 33554432;
pub const ADC_CHANNEL_SMPRX_REGOFFSET_MASK: u32 = 33554432;
pub const ADC_SMPRX_REGOFFSET_POS: u32 = 25;
pub const ADC_CHANNEL_SMPx_BITOFFSET_MASK: u32 = 32505856;
pub const ADC_CHANNEL_SMPx_BITOFFSET_POS: u32 = 20;
pub const ADC_CHANNEL_0_NUMBER: u32 = 0;
pub const ADC_CHANNEL_1_NUMBER: u32 = 67108864;
pub const ADC_CHANNEL_2_NUMBER: u32 = 134217728;
pub const ADC_CHANNEL_3_NUMBER: u32 = 201326592;
pub const ADC_CHANNEL_4_NUMBER: u32 = 268435456;
pub const ADC_CHANNEL_5_NUMBER: u32 = 335544320;
pub const ADC_CHANNEL_6_NUMBER: u32 = 402653184;
pub const ADC_CHANNEL_7_NUMBER: u32 = 469762048;
pub const ADC_CHANNEL_8_NUMBER: u32 = 536870912;
pub const ADC_CHANNEL_9_NUMBER: u32 = 603979776;
pub const ADC_CHANNEL_10_NUMBER: u32 = 671088640;
pub const ADC_CHANNEL_11_NUMBER: u32 = 738197504;
pub const ADC_CHANNEL_12_NUMBER: u32 = 805306368;
pub const ADC_CHANNEL_13_NUMBER: u32 = 872415232;
pub const ADC_CHANNEL_14_NUMBER: u32 = 939524096;
pub const ADC_CHANNEL_15_NUMBER: u32 = 1006632960;
pub const ADC_CHANNEL_16_NUMBER: u32 = 1073741824;
pub const ADC_CHANNEL_17_NUMBER: u32 = 1140850688;
pub const ADC_CHANNEL_18_NUMBER: u32 = 1207959552;
pub const ADC_CHANNEL_0_BITFIELD: u32 = 1;
pub const ADC_CHANNEL_1_BITFIELD: u32 = 2;
pub const ADC_CHANNEL_2_BITFIELD: u32 = 4;
pub const ADC_CHANNEL_3_BITFIELD: u32 = 8;
pub const ADC_CHANNEL_4_BITFIELD: u32 = 16;
pub const ADC_CHANNEL_5_BITFIELD: u32 = 32;
pub const ADC_CHANNEL_6_BITFIELD: u32 = 64;
pub const ADC_CHANNEL_7_BITFIELD: u32 = 128;
pub const ADC_CHANNEL_8_BITFIELD: u32 = 256;
pub const ADC_CHANNEL_9_BITFIELD: u32 = 512;
pub const ADC_CHANNEL_10_BITFIELD: u32 = 1024;
pub const ADC_CHANNEL_11_BITFIELD: u32 = 2048;
pub const ADC_CHANNEL_12_BITFIELD: u32 = 4096;
pub const ADC_CHANNEL_13_BITFIELD: u32 = 8192;
pub const ADC_CHANNEL_14_BITFIELD: u32 = 16384;
pub const ADC_CHANNEL_15_BITFIELD: u32 = 32768;
pub const ADC_CHANNEL_16_BITFIELD: u32 = 65536;
pub const ADC_CHANNEL_17_BITFIELD: u32 = 131072;
pub const ADC_CHANNEL_18_BITFIELD: u32 = 262144;
pub const ADC_CHANNEL_0_SMP: u32 = 0;
pub const ADC_CHANNEL_1_SMP: u32 = 3145728;
pub const ADC_CHANNEL_2_SMP: u32 = 6291456;
pub const ADC_CHANNEL_3_SMP: u32 = 9437184;
pub const ADC_CHANNEL_4_SMP: u32 = 12582912;
pub const ADC_CHANNEL_5_SMP: u32 = 15728640;
pub const ADC_CHANNEL_6_SMP: u32 = 18874368;
pub const ADC_CHANNEL_7_SMP: u32 = 22020096;
pub const ADC_CHANNEL_8_SMP: u32 = 25165824;
pub const ADC_CHANNEL_9_SMP: u32 = 28311552;
pub const ADC_CHANNEL_10_SMP: u32 = 33554432;
pub const ADC_CHANNEL_11_SMP: u32 = 36700160;
pub const ADC_CHANNEL_12_SMP: u32 = 39845888;
pub const ADC_CHANNEL_13_SMP: u32 = 42991616;
pub const ADC_CHANNEL_14_SMP: u32 = 46137344;
pub const ADC_CHANNEL_15_SMP: u32 = 49283072;
pub const ADC_CHANNEL_16_SMP: u32 = 52428800;
pub const ADC_CHANNEL_17_SMP: u32 = 55574528;
pub const ADC_CHANNEL_18_SMP: u32 = 58720256;
pub const ADC_SINGLEDIFF_CALIB_START_MASK: u32 = 1073741824;
pub const ADC_SINGLEDIFF_CALIB_FACTOR_MASK: u32 = 8323199;
pub const ADC_SINGLEDIFF_CHANNEL_MASK: u32 = 524287;
pub const ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK: u32 = 24;
pub const ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK: u32 = 65536;
pub const ADC_SINGLEDIFF_CALIB_F_BIT_D_POS: u32 = 16;
pub const ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4: u32 = 12;
pub const ADC_AWD_CR1_REGOFFSET: u32 = 0;
pub const ADC_AWD_CR2_REGOFFSET: u32 = 1048576;
pub const ADC_AWD_CR3_REGOFFSET: u32 = 2097152;
pub const ADC_AWD_CR12_REGOFFSETGAP_MASK: u32 = 1;
pub const ADC_AWD_CR12_REGOFFSETGAP_VAL: u32 = 36;
pub const ADC_AWD_CRX_REGOFFSET_MASK: u32 = 3145728;
pub const ADC_AWD_CR1_CHANNEL_MASK: u32 = 2109734912;
pub const ADC_AWD_CR23_CHANNEL_MASK: u32 = 524287;
pub const ADC_AWD_CR_ALL_CHANNEL_MASK: u32 = 2110259199;
pub const ADC_AWD_CRX_REGOFFSET_POS: u32 = 20;
pub const ADC_AWD_TR1_REGOFFSET: u32 = 0;
pub const ADC_AWD_TR2_REGOFFSET: u32 = 1048576;
pub const ADC_AWD_TR3_REGOFFSET: u32 = 2097152;
pub const ADC_AWD_TRX_REGOFFSET_MASK: u32 = 3145728;
pub const ADC_AWD_TRX_REGOFFSET_POS: u32 = 20;
pub const ADC_AWD_TRX_BIT_HIGH_MASK: u32 = 65536;
pub const ADC_AWD_TRX_BIT_HIGH_POS: u32 = 16;
pub const ADC_AWD_TRX_BIT_HIGH_SHIFT4: u32 = 12;
pub const ADC_OFR1_REGOFFSET: u32 = 0;
pub const ADC_OFR2_REGOFFSET: u32 = 1;
pub const ADC_OFR3_REGOFFSET: u32 = 2;
pub const ADC_OFR4_REGOFFSET: u32 = 3;
pub const ADC_OFRx_REGOFFSET_MASK: u32 = 3;
pub const ADC_CFGR_RES_BITOFFSET_POS: u32 = 3;
pub const ADC_CFGR_AWD1SGL_BITOFFSET_POS: u32 = 22;
pub const ADC_CFGR_AWD1EN_BITOFFSET_POS: u32 = 23;
pub const ADC_CFGR_JAWD1EN_BITOFFSET_POS: u32 = 24;
pub const ADC_TR1_HT1_BITOFFSET_POS: u32 = 16;
pub const ADC_CR_BITS_PROPERTY_RS: u32 = 2147483711;
pub const VREFINT_CAL_VREF: u32 = 3000;
pub const TEMPSENSOR_CAL1_TEMP: u32 = 30;
pub const TEMPSENSOR_CAL2_TEMP: u32 = 130;
pub const TEMPSENSOR_CAL_VREFANALOG: u32 = 3000;
pub const LL_ADC_FLAG_ADRDY: u32 = 1;
pub const LL_ADC_FLAG_EOC: u32 = 4;
pub const LL_ADC_FLAG_EOS: u32 = 8;
pub const LL_ADC_FLAG_OVR: u32 = 16;
pub const LL_ADC_FLAG_EOSMP: u32 = 2;
pub const LL_ADC_FLAG_JEOC: u32 = 32;
pub const LL_ADC_FLAG_JEOS: u32 = 64;
pub const LL_ADC_FLAG_JQOVF: u32 = 1024;
pub const LL_ADC_FLAG_AWD1: u32 = 128;
pub const LL_ADC_FLAG_AWD2: u32 = 256;
pub const LL_ADC_FLAG_AWD3: u32 = 512;
pub const LL_ADC_FLAG_ADRDY_MST: u32 = 1;
pub const LL_ADC_FLAG_ADRDY_SLV: u32 = 65536;
pub const LL_ADC_FLAG_EOC_MST: u32 = 4;
pub const LL_ADC_FLAG_EOC_SLV: u32 = 262144;
pub const LL_ADC_FLAG_EOS_MST: u32 = 8;
pub const LL_ADC_FLAG_EOS_SLV: u32 = 524288;
pub const LL_ADC_FLAG_OVR_MST: u32 = 16;
pub const LL_ADC_FLAG_OVR_SLV: u32 = 1048576;
pub const LL_ADC_FLAG_EOSMP_MST: u32 = 2;
pub const LL_ADC_FLAG_EOSMP_SLV: u32 = 131072;
pub const LL_ADC_FLAG_JEOC_MST: u32 = 32;
pub const LL_ADC_FLAG_JEOC_SLV: u32 = 2097152;
pub const LL_ADC_FLAG_JEOS_MST: u32 = 64;
pub const LL_ADC_FLAG_JEOS_SLV: u32 = 4194304;
pub const LL_ADC_FLAG_JQOVF_MST: u32 = 1024;
pub const LL_ADC_FLAG_JQOVF_SLV: u32 = 67108864;
pub const LL_ADC_FLAG_AWD1_MST: u32 = 128;
pub const LL_ADC_FLAG_AWD1_SLV: u32 = 8388608;
pub const LL_ADC_FLAG_AWD2_MST: u32 = 256;
pub const LL_ADC_FLAG_AWD2_SLV: u32 = 16777216;
pub const LL_ADC_FLAG_AWD3_MST: u32 = 512;
pub const LL_ADC_FLAG_AWD3_SLV: u32 = 33554432;
pub const LL_ADC_IT_ADRDY: u32 = 1;
pub const LL_ADC_IT_EOC: u32 = 4;
pub const LL_ADC_IT_EOS: u32 = 8;
pub const LL_ADC_IT_OVR: u32 = 16;
pub const LL_ADC_IT_EOSMP: u32 = 2;
pub const LL_ADC_IT_JEOC: u32 = 32;
pub const LL_ADC_IT_JEOS: u32 = 64;
pub const LL_ADC_IT_JQOVF: u32 = 1024;
pub const LL_ADC_IT_AWD1: u32 = 128;
pub const LL_ADC_IT_AWD2: u32 = 256;
pub const LL_ADC_IT_AWD3: u32 = 512;
pub const LL_ADC_DMA_REG_REGULAR_DATA: u32 = 0;
pub const LL_ADC_DMA_REG_REGULAR_DATA_MULTI: u32 = 1;
pub const LL_ADC_CLOCK_SYNC_PCLK_DIV1: u32 = 65536;
pub const LL_ADC_CLOCK_SYNC_PCLK_DIV2: u32 = 131072;
pub const LL_ADC_CLOCK_SYNC_PCLK_DIV4: u32 = 196608;
pub const LL_ADC_CLOCK_ASYNC_DIV1: u32 = 0;
pub const LL_ADC_CLOCK_ASYNC_DIV2: u32 = 262144;
pub const LL_ADC_CLOCK_ASYNC_DIV4: u32 = 524288;
pub const LL_ADC_CLOCK_ASYNC_DIV6: u32 = 786432;
pub const LL_ADC_CLOCK_ASYNC_DIV8: u32 = 1048576;
pub const LL_ADC_CLOCK_ASYNC_DIV10: u32 = 1310720;
pub const LL_ADC_CLOCK_ASYNC_DIV12: u32 = 1572864;
pub const LL_ADC_CLOCK_ASYNC_DIV16: u32 = 1835008;
pub const LL_ADC_CLOCK_ASYNC_DIV32: u32 = 2097152;
pub const LL_ADC_CLOCK_ASYNC_DIV64: u32 = 2359296;
pub const LL_ADC_CLOCK_ASYNC_DIV128: u32 = 2621440;
pub const LL_ADC_CLOCK_ASYNC_DIV256: u32 = 2883584;
pub const LL_ADC_PATH_INTERNAL_NONE: u32 = 0;
pub const LL_ADC_PATH_INTERNAL_VREFINT: u32 = 4194304;
pub const LL_ADC_PATH_INTERNAL_TEMPSENSOR: u32 = 8388608;
pub const LL_ADC_PATH_INTERNAL_VBAT: u32 = 16777216;
pub const LL_ADC_RESOLUTION_12B: u32 = 0;
pub const LL_ADC_RESOLUTION_10B: u32 = 8;
pub const LL_ADC_RESOLUTION_8B: u32 = 16;
pub const LL_ADC_RESOLUTION_6B: u32 = 24;
pub const LL_ADC_DATA_ALIGN_RIGHT: u32 = 0;
pub const LL_ADC_DATA_ALIGN_LEFT: u32 = 32768;
pub const LL_ADC_LP_MODE_NONE: u32 = 0;
pub const LL_ADC_LP_AUTOWAIT: u32 = 16384;
pub const LL_ADC_OFFSET_1: u32 = 0;
pub const LL_ADC_OFFSET_2: u32 = 1;
pub const LL_ADC_OFFSET_3: u32 = 2;
pub const LL_ADC_OFFSET_4: u32 = 3;
pub const LL_ADC_OFFSET_DISABLE: u32 = 0;
pub const LL_ADC_OFFSET_ENABLE: u32 = 2147483648;
pub const LL_ADC_OFFSET_SIGN_NEGATIVE: u32 = 0;
pub const LL_ADC_OFFSET_SIGN_POSITIVE: u32 = 16777216;
pub const LL_ADC_OFFSET_SATURATION_DISABLE: u32 = 0;
pub const LL_ADC_OFFSET_SATURATION_ENABLE: u32 = 33554432;
pub const LL_ADC_GROUP_REGULAR: u32 = 1;
pub const LL_ADC_GROUP_INJECTED: u32 = 2;
pub const LL_ADC_GROUP_REGULAR_INJECTED: u32 = 3;
pub const LL_ADC_CHANNEL_0: u32 = 1;
pub const LL_ADC_CHANNEL_1: u32 = 70254594;
pub const LL_ADC_CHANNEL_2: u32 = 140509188;
pub const LL_ADC_CHANNEL_3: u32 = 210763784;
pub const LL_ADC_CHANNEL_4: u32 = 281018384;
pub const LL_ADC_CHANNEL_5: u32 = 351272992;
pub const LL_ADC_CHANNEL_6: u32 = 421527616;
pub const LL_ADC_CHANNEL_7: u32 = 491782272;
pub const LL_ADC_CHANNEL_8: u32 = 562036992;
pub const LL_ADC_CHANNEL_9: u32 = 632291840;
pub const LL_ADC_CHANNEL_10: u32 = 704644096;
pub const LL_ADC_CHANNEL_11: u32 = 774899712;
pub const LL_ADC_CHANNEL_12: u32 = 845156352;
pub const LL_ADC_CHANNEL_13: u32 = 915415040;
pub const LL_ADC_CHANNEL_14: u32 = 985677824;
pub const LL_ADC_CHANNEL_15: u32 = 1055948800;
pub const LL_ADC_CHANNEL_16: u32 = 1126236160;
pub const LL_ADC_CHANNEL_17: u32 = 1196556288;
pub const LL_ADC_CHANNEL_18: u32 = 1266941952;
pub const LL_ADC_CHANNEL_VREFINT: u32 = 3414425600;
pub const LL_ADC_CHANNEL_TEMPSENSOR_ADC1: u32 = 3273719808;
pub const LL_ADC_CHANNEL_TEMPSENSOR_ADC5: u32 = 2428502032;
pub const LL_ADC_CHANNEL_VBAT: u32 = 3344039936;
pub const LL_ADC_CHANNEL_VOPAMP1: u32 = 3062898688;
pub const LL_ADC_CHANNEL_VOPAMP2: u32 = 3274244096;
pub const LL_ADC_CHANNEL_VOPAMP3_ADC2: u32 = 3414949888;
pub const LL_ADC_CHANNEL_VOPAMP3_ADC3: u32 = 3063422976;
pub const LL_ADC_CHANNEL_VOPAMP4: u32 = 2498756640;
pub const LL_ADC_CHANNEL_VOPAMP5: u32 = 2358247432;
pub const LL_ADC_CHANNEL_VOPAMP6: u32 = 3344564224;
pub const LL_ADC_REG_TRIG_SOFTWARE: u32 = 0;
pub const LL_ADC_REG_TRIG_EXT_TIM1_TRGO: u32 = 1312;
pub const LL_ADC_REG_TRIG_EXT_TIM1_TRGO2: u32 = 1344;
pub const LL_ADC_REG_TRIG_EXT_TIM1_CH1: u32 = 1024;
pub const LL_ADC_REG_TRIG_EXT_TIM1_CH2: u32 = 1056;
pub const LL_ADC_REG_TRIG_EXT_TIM1_CH3: u32 = 1088;
pub const LL_ADC_REG_TRIG_EXT_TIM2_TRGO: u32 = 1376;
pub const LL_ADC_REG_TRIG_EXT_TIM2_CH1: u32 = 1504;
pub const LL_ADC_REG_TRIG_EXT_TIM2_CH2: u32 = 1120;
pub const LL_ADC_REG_TRIG_EXT_TIM2_CH3: u32 = 1056;
pub const LL_ADC_REG_TRIG_EXT_TIM3_TRGO: u32 = 1152;
pub const LL_ADC_REG_TRIG_EXT_TIM3_CH1: u32 = 1024;
pub const LL_ADC_REG_TRIG_EXT_TIM3_CH4: u32 = 1504;
pub const LL_ADC_REG_TRIG_EXT_TIM4_TRGO: u32 = 1408;
pub const LL_ADC_REG_TRIG_EXT_TIM4_CH1: u32 = 1216;
pub const LL_ADC_REG_TRIG_EXT_TIM4_CH4: u32 = 1184;
pub const LL_ADC_REG_TRIG_EXT_TIM6_TRGO: u32 = 1440;
pub const LL_ADC_REG_TRIG_EXT_TIM7_TRGO: u32 = 1984;
pub const LL_ADC_REG_TRIG_EXT_TIM8_TRGO: u32 = 1248;
pub const LL_ADC_REG_TRIG_EXT_TIM8_TRGO2: u32 = 1280;
pub const LL_ADC_REG_TRIG_EXT_TIM8_CH1: u32 = 1120;
pub const LL_ADC_REG_TRIG_EXT_TIM15_TRGO: u32 = 1472;
pub const LL_ADC_REG_TRIG_EXT_TIM20_TRGO: u32 = 1536;
pub const LL_ADC_REG_TRIG_EXT_TIM20_TRGO2: u32 = 1568;
pub const LL_ADC_REG_TRIG_EXT_TIM20_CH1: u32 = 1600;
pub const LL_ADC_REG_TRIG_EXT_TIM20_CH2: u32 = 1632;
pub const LL_ADC_REG_TRIG_EXT_TIM20_CH3: u32 = 1664;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG1: u32 = 1696;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG2: u32 = 1632;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG3: u32 = 1728;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG4: u32 = 1664;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG5: u32 = 1760;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG6: u32 = 1792;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG7: u32 = 1824;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG8: u32 = 1856;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG9: u32 = 1888;
pub const LL_ADC_REG_TRIG_EXT_HRTIM_TRG10: u32 = 1920;
pub const LL_ADC_REG_TRIG_EXT_EXTI_LINE11: u32 = 1216;
pub const LL_ADC_REG_TRIG_EXT_EXTI_LINE2: u32 = 1184;
pub const LL_ADC_REG_TRIG_EXT_LPTIM_OUT: u32 = 1952;
pub const LL_ADC_REG_TRIG_EXT_RISING: u32 = 1024;
pub const LL_ADC_REG_TRIG_EXT_FALLING: u32 = 2048;
pub const LL_ADC_REG_TRIG_EXT_RISINGFALLING: u32 = 3072;
pub const LL_ADC_REG_SAMPLING_MODE_NORMAL: u32 = 0;
pub const LL_ADC_REG_SAMPLING_MODE_BULB: u32 = 67108864;
pub const LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED: u32 = 134217728;
pub const LL_ADC_REG_CONV_SINGLE: u32 = 0;
pub const LL_ADC_REG_CONV_CONTINUOUS: u32 = 8192;
pub const LL_ADC_REG_DMA_TRANSFER_NONE: u32 = 0;
pub const LL_ADC_REG_DMA_TRANSFER_LIMITED: u32 = 1;
pub const LL_ADC_REG_DMA_TRANSFER_UNLIMITED: u32 = 3;
pub const LL_ADC_SAMPLINGTIME_COMMON_DEFAULT: u32 = 0;
pub const LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5: u32 = 2147483648;
pub const LL_ADC_REG_OVR_DATA_PRESERVED: u32 = 0;
pub const LL_ADC_REG_OVR_DATA_OVERWRITTEN: u32 = 4096;
pub const LL_ADC_REG_SEQ_SCAN_DISABLE: u32 = 0;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS: u32 = 1;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS: u32 = 2;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS: u32 = 3;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS: u32 = 4;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS: u32 = 5;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS: u32 = 6;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS: u32 = 7;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS: u32 = 8;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS: u32 = 9;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS: u32 = 10;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS: u32 = 11;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS: u32 = 12;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS: u32 = 13;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS: u32 = 14;
pub const LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS: u32 = 15;
pub const LL_ADC_REG_SEQ_DISCONT_DISABLE: u32 = 0;
pub const LL_ADC_REG_SEQ_DISCONT_1RANK: u32 = 65536;
pub const LL_ADC_REG_SEQ_DISCONT_2RANKS: u32 = 196608;
pub const LL_ADC_REG_SEQ_DISCONT_3RANKS: u32 = 327680;
pub const LL_ADC_REG_SEQ_DISCONT_4RANKS: u32 = 458752;
pub const LL_ADC_REG_SEQ_DISCONT_5RANKS: u32 = 589824;
pub const LL_ADC_REG_SEQ_DISCONT_6RANKS: u32 = 720896;
pub const LL_ADC_REG_SEQ_DISCONT_7RANKS: u32 = 851968;
pub const LL_ADC_REG_SEQ_DISCONT_8RANKS: u32 = 983040;
pub const LL_ADC_REG_RANK_1: u32 = 6;
pub const LL_ADC_REG_RANK_2: u32 = 12;
pub const LL_ADC_REG_RANK_3: u32 = 18;
pub const LL_ADC_REG_RANK_4: u32 = 24;
pub const LL_ADC_REG_RANK_5: u32 = 256;
pub const LL_ADC_REG_RANK_6: u32 = 262;
pub const LL_ADC_REG_RANK_7: u32 = 268;
pub const LL_ADC_REG_RANK_8: u32 = 274;
pub const LL_ADC_REG_RANK_9: u32 = 280;
pub const LL_ADC_REG_RANK_10: u32 = 512;
pub const LL_ADC_REG_RANK_11: u32 = 518;
pub const LL_ADC_REG_RANK_12: u32 = 524;
pub const LL_ADC_REG_RANK_13: u32 = 530;
pub const LL_ADC_REG_RANK_14: u32 = 536;
pub const LL_ADC_REG_RANK_15: u32 = 768;
pub const LL_ADC_REG_RANK_16: u32 = 774;
pub const LL_ADC_INJ_TRIG_SOFTWARE: u32 = 0;
pub const LL_ADC_INJ_TRIG_EXT_TIM1_TRGO: u32 = 128;
pub const LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2: u32 = 160;
pub const LL_ADC_INJ_TRIG_EXT_TIM1_CH3: u32 = 172;
pub const LL_ADC_INJ_TRIG_EXT_TIM1_CH4: u32 = 132;
pub const LL_ADC_INJ_TRIG_EXT_TIM2_TRGO: u32 = 136;
pub const LL_ADC_INJ_TRIG_EXT_TIM2_CH1: u32 = 140;
pub const LL_ADC_INJ_TRIG_EXT_TIM3_TRGO: u32 = 176;
pub const LL_ADC_INJ_TRIG_EXT_TIM3_CH1: u32 = 180;
pub const LL_ADC_INJ_TRIG_EXT_TIM3_CH3: u32 = 172;
pub const LL_ADC_INJ_TRIG_EXT_TIM3_CH4: u32 = 144;
pub const LL_ADC_INJ_TRIG_EXT_TIM4_TRGO: u32 = 148;
pub const LL_ADC_INJ_TRIG_EXT_TIM4_CH3: u32 = 144;
pub const LL_ADC_INJ_TRIG_EXT_TIM4_CH4: u32 = 152;
pub const LL_ADC_INJ_TRIG_EXT_TIM6_TRGO: u32 = 184;
pub const LL_ADC_INJ_TRIG_EXT_TIM7_TRGO: u32 = 248;
pub const LL_ADC_INJ_TRIG_EXT_TIM8_TRGO: u32 = 164;
pub const LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2: u32 = 168;
pub const LL_ADC_INJ_TRIG_EXT_TIM8_CH2: u32 = 140;
pub const LL_ADC_INJ_TRIG_EXT_TIM8_CH4: u32 = 156;
pub const LL_ADC_INJ_TRIG_EXT_TIM15_TRGO: u32 = 188;
pub const LL_ADC_INJ_TRIG_EXT_TIM16_CH1: u32 = 236;
pub const LL_ADC_INJ_TRIG_EXT_TIM20_TRGO: u32 = 192;
pub const LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2: u32 = 196;
pub const LL_ADC_INJ_TRIG_EXT_TIM20_CH2: u32 = 200;
pub const LL_ADC_INJ_TRIG_EXT_TIM20_CH4: u32 = 200;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1: u32 = 236;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2: u32 = 204;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3: u32 = 240;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4: u32 = 208;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5: u32 = 212;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6: u32 = 216;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7: u32 = 220;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8: u32 = 224;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9: u32 = 228;
pub const LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10: u32 = 232;
pub const LL_ADC_INJ_TRIG_EXT_EXTI_LINE3: u32 = 180;
pub const LL_ADC_INJ_TRIG_EXT_EXTI_LINE15: u32 = 152;
pub const LL_ADC_INJ_TRIG_EXT_LPTIM_OUT: u32 = 244;
pub const LL_ADC_INJ_TRIG_EXT_RISING: u32 = 128;
pub const LL_ADC_INJ_TRIG_EXT_FALLING: u32 = 256;
pub const LL_ADC_INJ_TRIG_EXT_RISINGFALLING: u32 = 384;
pub const LL_ADC_INJ_TRIG_INDEPENDENT: u32 = 0;
pub const LL_ADC_INJ_TRIG_FROM_GRP_REGULAR: u32 = 33554432;
pub const LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE: u32 = 0;
pub const LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY: u32 = 2097152;
pub const LL_ADC_INJ_QUEUE_DISABLE: u32 = 2147483648;
pub const LL_ADC_INJ_SEQ_SCAN_DISABLE: u32 = 0;
pub const LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS: u32 = 1;
pub const LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS: u32 = 2;
pub const LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS: u32 = 3;
pub const LL_ADC_INJ_SEQ_DISCONT_DISABLE: u32 = 0;
pub const LL_ADC_INJ_SEQ_DISCONT_1RANK: u32 = 1048576;
pub const LL_ADC_INJ_RANK_1: u32 = 9;
pub const LL_ADC_INJ_RANK_2: u32 = 271;
pub const LL_ADC_INJ_RANK_3: u32 = 533;
pub const LL_ADC_INJ_RANK_4: u32 = 795;
pub const LL_ADC_SAMPLINGTIME_2CYCLES_5: u32 = 0;
pub const LL_ADC_SAMPLINGTIME_6CYCLES_5: u32 = 1;
pub const LL_ADC_SAMPLINGTIME_12CYCLES_5: u32 = 2;
pub const LL_ADC_SAMPLINGTIME_24CYCLES_5: u32 = 3;
pub const LL_ADC_SAMPLINGTIME_47CYCLES_5: u32 = 4;
pub const LL_ADC_SAMPLINGTIME_92CYCLES_5: u32 = 5;
pub const LL_ADC_SAMPLINGTIME_247CYCLES_5: u32 = 6;
pub const LL_ADC_SAMPLINGTIME_640CYCLES_5: u32 = 7;
pub const LL_ADC_SINGLE_ENDED: u32 = 127;
pub const LL_ADC_DIFFERENTIAL_ENDED: u32 = 1082064896;
pub const LL_ADC_BOTH_SINGLE_DIFF_ENDED: u32 = 1082065023;
pub const LL_ADC_AWD1: u32 = 2109734912;
pub const LL_ADC_AWD2: u32 = 1572863;
pub const LL_ADC_AWD3: u32 = 2621439;
pub const LL_ADC_AWD_DISABLE: u32 = 0;
pub const LL_ADC_AWD_ALL_CHANNELS_REG: u32 = 8912895;
pub const LL_ADC_AWD_ALL_CHANNELS_INJ: u32 = 17301503;
pub const LL_ADC_AWD_ALL_CHANNELS_REG_INJ: u32 = 25690111;
pub const LL_ADC_AWD_THRESHOLD_HIGH: u32 = 268369920;
pub const LL_ADC_AWD_THRESHOLD_LOW: u32 = 4095;
pub const LL_ADC_AWD_THRESHOLDS_HIGH_LOW: u32 = 268374015;
pub const LL_ADC_AWD_FILTERING_NONE: u32 = 0;
pub const LL_ADC_AWD_FILTERING_2SAMPLES: u32 = 4096;
pub const LL_ADC_AWD_FILTERING_3SAMPLES: u32 = 8192;
pub const LL_ADC_AWD_FILTERING_4SAMPLES: u32 = 12288;
pub const LL_ADC_AWD_FILTERING_5SAMPLES: u32 = 16384;
pub const LL_ADC_AWD_FILTERING_6SAMPLES: u32 = 20480;
pub const LL_ADC_AWD_FILTERING_7SAMPLES: u32 = 24576;
pub const LL_ADC_AWD_FILTERING_8SAMPLES: u32 = 28672;
pub const LL_ADC_OVS_DISABLE: u32 = 0;
pub const LL_ADC_OVS_GRP_REGULAR_CONTINUED: u32 = 1;
pub const LL_ADC_OVS_GRP_REGULAR_RESUMED: u32 = 1025;
pub const LL_ADC_OVS_GRP_INJECTED: u32 = 2;
pub const LL_ADC_OVS_GRP_INJ_REG_RESUMED: u32 = 3;
pub const LL_ADC_OVS_REG_CONT: u32 = 0;
pub const LL_ADC_OVS_REG_DISCONT: u32 = 512;
pub const LL_ADC_OVS_RATIO_2: u32 = 0;
pub const LL_ADC_OVS_RATIO_4: u32 = 4;
pub const LL_ADC_OVS_RATIO_8: u32 = 8;
pub const LL_ADC_OVS_RATIO_16: u32 = 12;
pub const LL_ADC_OVS_RATIO_32: u32 = 16;
pub const LL_ADC_OVS_RATIO_64: u32 = 20;
pub const LL_ADC_OVS_RATIO_128: u32 = 24;
pub const LL_ADC_OVS_RATIO_256: u32 = 28;
pub const LL_ADC_OVS_SHIFT_NONE: u32 = 0;
pub const LL_ADC_OVS_SHIFT_RIGHT_1: u32 = 32;
pub const LL_ADC_OVS_SHIFT_RIGHT_2: u32 = 64;
pub const LL_ADC_OVS_SHIFT_RIGHT_3: u32 = 96;
pub const LL_ADC_OVS_SHIFT_RIGHT_4: u32 = 128;
pub const LL_ADC_OVS_SHIFT_RIGHT_5: u32 = 160;
pub const LL_ADC_OVS_SHIFT_RIGHT_6: u32 = 192;
pub const LL_ADC_OVS_SHIFT_RIGHT_7: u32 = 224;
pub const LL_ADC_OVS_SHIFT_RIGHT_8: u32 = 256;
pub const LL_ADC_MULTI_INDEPENDENT: u32 = 0;
pub const LL_ADC_MULTI_DUAL_REG_SIMULT: u32 = 6;
pub const LL_ADC_MULTI_DUAL_REG_INTERL: u32 = 7;
pub const LL_ADC_MULTI_DUAL_INJ_SIMULT: u32 = 5;
pub const LL_ADC_MULTI_DUAL_INJ_ALTERN: u32 = 9;
pub const LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM: u32 = 1;
pub const LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT: u32 = 2;
pub const LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM: u32 = 3;
pub const LL_ADC_MULTI_REG_DMA_EACH_ADC: u32 = 0;
pub const LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B: u32 = 32768;
pub const LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B: u32 = 49152;
pub const LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B: u32 = 40960;
pub const LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B: u32 = 57344;
pub const LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE: u32 = 0;
pub const LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES: u32 = 256;
pub const LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES: u32 = 512;
pub const LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES: u32 = 768;
pub const LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES: u32 = 1024;
pub const LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES: u32 = 1280;
pub const LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES: u32 = 1536;
pub const LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES: u32 = 1792;
pub const LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES: u32 = 2048;
pub const LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES: u32 = 2304;
pub const LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES: u32 = 2560;
pub const LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES: u32 = 2816;
pub const LL_ADC_MULTI_MASTER: u32 = 65535;
pub const LL_ADC_MULTI_SLAVE: u32 = 4294901760;
pub const LL_ADC_MULTI_MASTER_SLAVE: u32 = 4294967295;
pub const LL_ADC_DELAY_INTERNAL_REGUL_STAB_US: u32 = 20;
pub const LL_ADC_DELAY_VREFINT_STAB_US: u32 = 12;
pub const LL_ADC_DELAY_TEMPSENSOR_STAB_US: u32 = 120;
pub const LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES: u32 = 4;
pub const HAL_ADC_STATE_RESET: u32 = 0;
pub const HAL_ADC_STATE_READY: u32 = 1;
pub const HAL_ADC_STATE_BUSY_INTERNAL: u32 = 2;
pub const HAL_ADC_STATE_TIMEOUT: u32 = 4;
pub const HAL_ADC_STATE_ERROR_INTERNAL: u32 = 16;
pub const HAL_ADC_STATE_ERROR_CONFIG: u32 = 32;
pub const HAL_ADC_STATE_ERROR_DMA: u32 = 64;
pub const HAL_ADC_STATE_REG_BUSY: u32 = 256;
pub const HAL_ADC_STATE_REG_EOC: u32 = 512;
pub const HAL_ADC_STATE_REG_OVR: u32 = 1024;
pub const HAL_ADC_STATE_REG_EOSMP: u32 = 2048;
pub const HAL_ADC_STATE_INJ_BUSY: u32 = 4096;
pub const HAL_ADC_STATE_INJ_EOC: u32 = 8192;
pub const HAL_ADC_STATE_INJ_JQOVF: u32 = 16384;
pub const HAL_ADC_STATE_AWD1: u32 = 65536;
pub const HAL_ADC_STATE_AWD2: u32 = 131072;
pub const HAL_ADC_STATE_AWD3: u32 = 262144;
pub const HAL_ADC_STATE_MULTIMODE_SLAVE: u32 = 1048576;
pub const HAL_ADC_ERROR_NONE: u32 = 0;
pub const HAL_ADC_ERROR_INTERNAL: u32 = 1;
pub const HAL_ADC_ERROR_OVR: u32 = 2;
pub const HAL_ADC_ERROR_DMA: u32 = 4;
pub const HAL_ADC_ERROR_JQOVF: u32 = 8;
pub const ADC_CLOCK_SYNC_PCLK_DIV1: u32 = 65536;
pub const ADC_CLOCK_SYNC_PCLK_DIV2: u32 = 131072;
pub const ADC_CLOCK_SYNC_PCLK_DIV4: u32 = 196608;
pub const ADC_CLOCK_ASYNC_DIV1: u32 = 0;
pub const ADC_CLOCK_ASYNC_DIV2: u32 = 262144;
pub const ADC_CLOCK_ASYNC_DIV4: u32 = 524288;
pub const ADC_CLOCK_ASYNC_DIV6: u32 = 786432;
pub const ADC_CLOCK_ASYNC_DIV8: u32 = 1048576;
pub const ADC_CLOCK_ASYNC_DIV10: u32 = 1310720;
pub const ADC_CLOCK_ASYNC_DIV12: u32 = 1572864;
pub const ADC_CLOCK_ASYNC_DIV16: u32 = 1835008;
pub const ADC_CLOCK_ASYNC_DIV32: u32 = 2097152;
pub const ADC_CLOCK_ASYNC_DIV64: u32 = 2359296;
pub const ADC_CLOCK_ASYNC_DIV128: u32 = 2621440;
pub const ADC_CLOCK_ASYNC_DIV256: u32 = 2883584;
pub const ADC_RESOLUTION_12B: u32 = 0;
pub const ADC_RESOLUTION_10B: u32 = 8;
pub const ADC_RESOLUTION_8B: u32 = 16;
pub const ADC_RESOLUTION_6B: u32 = 24;
pub const ADC_DATAALIGN_RIGHT: u32 = 0;
pub const ADC_DATAALIGN_LEFT: u32 = 32768;
pub const ADC_SCAN_DISABLE: u32 = 0;
pub const ADC_SCAN_ENABLE: u32 = 1;
pub const ADC_SOFTWARE_START: u32 = 0;
pub const ADC_EXTERNALTRIG_T1_TRGO: u32 = 1312;
pub const ADC_EXTERNALTRIG_T1_TRGO2: u32 = 1344;
pub const ADC_EXTERNALTRIG_T1_CC1: u32 = 1024;
pub const ADC_EXTERNALTRIG_T1_CC2: u32 = 1056;
pub const ADC_EXTERNALTRIG_T1_CC3: u32 = 1088;
pub const ADC_EXTERNALTRIG_T2_TRGO: u32 = 1376;
pub const ADC_EXTERNALTRIG_T2_CC1: u32 = 1504;
pub const ADC_EXTERNALTRIG_T2_CC2: u32 = 1120;
pub const ADC_EXTERNALTRIG_T2_CC3: u32 = 1056;
pub const ADC_EXTERNALTRIG_T3_TRGO: u32 = 1152;
pub const ADC_EXTERNALTRIG_T3_CC1: u32 = 1024;
pub const ADC_EXTERNALTRIG_T3_CC4: u32 = 1504;
pub const ADC_EXTERNALTRIG_T4_TRGO: u32 = 1408;
pub const ADC_EXTERNALTRIG_T4_CC1: u32 = 1216;
pub const ADC_EXTERNALTRIG_T4_CC4: u32 = 1184;
pub const ADC_EXTERNALTRIG_T6_TRGO: u32 = 1440;
pub const ADC_EXTERNALTRIG_T7_TRGO: u32 = 1984;
pub const ADC_EXTERNALTRIG_T8_TRGO: u32 = 1248;
pub const ADC_EXTERNALTRIG_T8_TRGO2: u32 = 1280;
pub const ADC_EXTERNALTRIG_T8_CC1: u32 = 1120;
pub const ADC_EXTERNALTRIG_T15_TRGO: u32 = 1472;
pub const ADC_EXTERNALTRIG_T20_TRGO: u32 = 1536;
pub const ADC_EXTERNALTRIG_T20_TRGO2: u32 = 1568;
pub const ADC_EXTERNALTRIG_T20_CC1: u32 = 1600;
pub const ADC_EXTERNALTRIG_T20_CC2: u32 = 1632;
pub const ADC_EXTERNALTRIG_T20_CC3: u32 = 1664;
pub const ADC_EXTERNALTRIG_HRTIM_TRG1: u32 = 1696;
pub const ADC_EXTERNALTRIG_HRTIM_TRG2: u32 = 1632;
pub const ADC_EXTERNALTRIG_HRTIM_TRG3: u32 = 1728;
pub const ADC_EXTERNALTRIG_HRTIM_TRG4: u32 = 1664;
pub const ADC_EXTERNALTRIG_HRTIM_TRG5: u32 = 1760;
pub const ADC_EXTERNALTRIG_HRTIM_TRG6: u32 = 1792;
pub const ADC_EXTERNALTRIG_HRTIM_TRG7: u32 = 1824;
pub const ADC_EXTERNALTRIG_HRTIM_TRG8: u32 = 1856;
pub const ADC_EXTERNALTRIG_HRTIM_TRG9: u32 = 1888;
pub const ADC_EXTERNALTRIG_HRTIM_TRG10: u32 = 1920;
pub const ADC_EXTERNALTRIG_EXT_IT2: u32 = 1184;
pub const ADC_EXTERNALTRIG_EXT_IT11: u32 = 1216;
pub const ADC_EXTERNALTRIG_LPTIM_OUT: u32 = 1952;
pub const ADC_EXTERNALTRIGCONVEDGE_NONE: u32 = 0;
pub const ADC_EXTERNALTRIGCONVEDGE_RISING: u32 = 1024;
pub const ADC_EXTERNALTRIGCONVEDGE_FALLING: u32 = 2048;
pub const ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING: u32 = 3072;
pub const ADC_SAMPLING_MODE_NORMAL: u32 = 0;
pub const ADC_SAMPLING_MODE_BULB: u32 = 67108864;
pub const ADC_SAMPLING_MODE_TRIGGER_CONTROLED: u32 = 134217728;
pub const ADC_EOC_SINGLE_CONV: u32 = 4;
pub const ADC_EOC_SEQ_CONV: u32 = 8;
pub const ADC_OVR_DATA_PRESERVED: u32 = 0;
pub const ADC_OVR_DATA_OVERWRITTEN: u32 = 4096;
pub const ADC_REGULAR_RANK_1: u32 = 6;
pub const ADC_REGULAR_RANK_2: u32 = 12;
pub const ADC_REGULAR_RANK_3: u32 = 18;
pub const ADC_REGULAR_RANK_4: u32 = 24;
pub const ADC_REGULAR_RANK_5: u32 = 256;
pub const ADC_REGULAR_RANK_6: u32 = 262;
pub const ADC_REGULAR_RANK_7: u32 = 268;
pub const ADC_REGULAR_RANK_8: u32 = 274;
pub const ADC_REGULAR_RANK_9: u32 = 280;
pub const ADC_REGULAR_RANK_10: u32 = 512;
pub const ADC_REGULAR_RANK_11: u32 = 518;
pub const ADC_REGULAR_RANK_12: u32 = 524;
pub const ADC_REGULAR_RANK_13: u32 = 530;
pub const ADC_REGULAR_RANK_14: u32 = 536;
pub const ADC_REGULAR_RANK_15: u32 = 768;
pub const ADC_REGULAR_RANK_16: u32 = 774;
pub const ADC_SAMPLETIME_2CYCLES_5: u32 = 0;
pub const ADC_SAMPLETIME_6CYCLES_5: u32 = 1;
pub const ADC_SAMPLETIME_12CYCLES_5: u32 = 2;
pub const ADC_SAMPLETIME_24CYCLES_5: u32 = 3;
pub const ADC_SAMPLETIME_47CYCLES_5: u32 = 4;
pub const ADC_SAMPLETIME_92CYCLES_5: u32 = 5;
pub const ADC_SAMPLETIME_247CYCLES_5: u32 = 6;
pub const ADC_SAMPLETIME_640CYCLES_5: u32 = 7;
pub const ADC_SAMPLETIME_3CYCLES_5: u32 = 2147483648;
pub const ADC_CHANNEL_0: u32 = 1;
pub const ADC_CHANNEL_1: u32 = 70254594;
pub const ADC_CHANNEL_2: u32 = 140509188;
pub const ADC_CHANNEL_3: u32 = 210763784;
pub const ADC_CHANNEL_4: u32 = 281018384;
pub const ADC_CHANNEL_5: u32 = 351272992;
pub const ADC_CHANNEL_6: u32 = 421527616;
pub const ADC_CHANNEL_7: u32 = 491782272;
pub const ADC_CHANNEL_8: u32 = 562036992;
pub const ADC_CHANNEL_9: u32 = 632291840;
pub const ADC_CHANNEL_10: u32 = 704644096;
pub const ADC_CHANNEL_11: u32 = 774899712;
pub const ADC_CHANNEL_12: u32 = 845156352;
pub const ADC_CHANNEL_13: u32 = 915415040;
pub const ADC_CHANNEL_14: u32 = 985677824;
pub const ADC_CHANNEL_15: u32 = 1055948800;
pub const ADC_CHANNEL_16: u32 = 1126236160;
pub const ADC_CHANNEL_17: u32 = 1196556288;
pub const ADC_CHANNEL_18: u32 = 1266941952;
pub const ADC_CHANNEL_VREFINT: u32 = 3414425600;
pub const ADC_CHANNEL_TEMPSENSOR_ADC1: u32 = 3273719808;
pub const ADC_CHANNEL_TEMPSENSOR_ADC5: u32 = 2428502032;
pub const ADC_CHANNEL_VBAT: u32 = 3344039936;
pub const ADC_CHANNEL_VOPAMP1: u32 = 3062898688;
pub const ADC_CHANNEL_VOPAMP2: u32 = 3274244096;
pub const ADC_CHANNEL_VOPAMP3_ADC2: u32 = 3414949888;
pub const ADC_CHANNEL_VOPAMP3_ADC3: u32 = 3063422976;
pub const ADC_CHANNEL_VOPAMP4: u32 = 2498756640;
pub const ADC_CHANNEL_VOPAMP5: u32 = 2358247432;
pub const ADC_CHANNEL_VOPAMP6: u32 = 3344564224;
pub const ADC_ANALOGWATCHDOG_1: u32 = 2109734912;
pub const ADC_ANALOGWATCHDOG_2: u32 = 1572863;
pub const ADC_ANALOGWATCHDOG_3: u32 = 2621439;
pub const ADC_AWD_FILTERING_NONE: u32 = 0;
pub const ADC_AWD_FILTERING_2SAMPLES: u32 = 4096;
pub const ADC_AWD_FILTERING_3SAMPLES: u32 = 8192;
pub const ADC_AWD_FILTERING_4SAMPLES: u32 = 12288;
pub const ADC_AWD_FILTERING_5SAMPLES: u32 = 16384;
pub const ADC_AWD_FILTERING_6SAMPLES: u32 = 20480;
pub const ADC_AWD_FILTERING_7SAMPLES: u32 = 24576;
pub const ADC_AWD_FILTERING_8SAMPLES: u32 = 28672;
pub const ADC_ANALOGWATCHDOG_NONE: u32 = 0;
pub const ADC_ANALOGWATCHDOG_SINGLE_REG: u32 = 12582912;
pub const ADC_ANALOGWATCHDOG_SINGLE_INJEC: u32 = 20971520;
pub const ADC_ANALOGWATCHDOG_SINGLE_REGINJEC: u32 = 29360128;
pub const ADC_ANALOGWATCHDOG_ALL_REG: u32 = 8388608;
pub const ADC_ANALOGWATCHDOG_ALL_INJEC: u32 = 16777216;
pub const ADC_ANALOGWATCHDOG_ALL_REGINJEC: u32 = 25165824;
pub const ADC_OVERSAMPLING_RATIO_2: u32 = 0;
pub const ADC_OVERSAMPLING_RATIO_4: u32 = 4;
pub const ADC_OVERSAMPLING_RATIO_8: u32 = 8;
pub const ADC_OVERSAMPLING_RATIO_16: u32 = 12;
pub const ADC_OVERSAMPLING_RATIO_32: u32 = 16;
pub const ADC_OVERSAMPLING_RATIO_64: u32 = 20;
pub const ADC_OVERSAMPLING_RATIO_128: u32 = 24;
pub const ADC_OVERSAMPLING_RATIO_256: u32 = 28;
pub const ADC_RIGHTBITSHIFT_NONE: u32 = 0;
pub const ADC_RIGHTBITSHIFT_1: u32 = 32;
pub const ADC_RIGHTBITSHIFT_2: u32 = 64;
pub const ADC_RIGHTBITSHIFT_3: u32 = 96;
pub const ADC_RIGHTBITSHIFT_4: u32 = 128;
pub const ADC_RIGHTBITSHIFT_5: u32 = 160;
pub const ADC_RIGHTBITSHIFT_6: u32 = 192;
pub const ADC_RIGHTBITSHIFT_7: u32 = 224;
pub const ADC_RIGHTBITSHIFT_8: u32 = 256;
pub const ADC_TRIGGEREDMODE_SINGLE_TRIGGER: u32 = 0;
pub const ADC_TRIGGEREDMODE_MULTI_TRIGGER: u32 = 512;
pub const ADC_REGOVERSAMPLING_CONTINUED_MODE: u32 = 1;
pub const ADC_REGOVERSAMPLING_RESUMED_MODE: u32 = 1025;
pub const ADC_IT_RDY: u32 = 1;
pub const ADC_IT_EOSMP: u32 = 2;
pub const ADC_IT_EOC: u32 = 4;
pub const ADC_IT_EOS: u32 = 8;
pub const ADC_IT_OVR: u32 = 16;
pub const ADC_IT_JEOC: u32 = 32;
pub const ADC_IT_JEOS: u32 = 64;
pub const ADC_IT_AWD1: u32 = 128;
pub const ADC_IT_AWD2: u32 = 256;
pub const ADC_IT_AWD3: u32 = 512;
pub const ADC_IT_JQOVF: u32 = 1024;
pub const ADC_IT_AWD: u32 = 128;
pub const ADC_FLAG_RDY: u32 = 1;
pub const ADC_FLAG_EOSMP: u32 = 2;
pub const ADC_FLAG_EOC: u32 = 4;
pub const ADC_FLAG_EOS: u32 = 8;
pub const ADC_FLAG_OVR: u32 = 16;
pub const ADC_FLAG_JEOC: u32 = 32;
pub const ADC_FLAG_JEOS: u32 = 64;
pub const ADC_FLAG_AWD1: u32 = 128;
pub const ADC_FLAG_AWD2: u32 = 256;
pub const ADC_FLAG_AWD3: u32 = 512;
pub const ADC_FLAG_JQOVF: u32 = 1024;
pub const ADC_STOP_CONVERSION_TIMEOUT: u32 = 5;
pub const ADC_TEMPSENSOR_DELAY_US: u32 = 120;
pub const ADC_INJECTED_SOFTWARE_START: u32 = 0;
pub const ADC_EXTERNALTRIGINJEC_T1_TRGO: u32 = 128;
pub const ADC_EXTERNALTRIGINJEC_T1_TRGO2: u32 = 160;
pub const ADC_EXTERNALTRIGINJEC_T1_CC3: u32 = 172;
pub const ADC_EXTERNALTRIGINJEC_T1_CC4: u32 = 132;
pub const ADC_EXTERNALTRIGINJEC_T2_TRGO: u32 = 136;
pub const ADC_EXTERNALTRIGINJEC_T2_CC1: u32 = 140;
pub const ADC_EXTERNALTRIGINJEC_T3_TRGO: u32 = 176;
pub const ADC_EXTERNALTRIGINJEC_T3_CC1: u32 = 180;
pub const ADC_EXTERNALTRIGINJEC_T3_CC3: u32 = 172;
pub const ADC_EXTERNALTRIGINJEC_T3_CC4: u32 = 144;
pub const ADC_EXTERNALTRIGINJEC_T4_TRGO: u32 = 148;
pub const ADC_EXTERNALTRIGINJEC_T4_CC3: u32 = 144;
pub const ADC_EXTERNALTRIGINJEC_T4_CC4: u32 = 152;
pub const ADC_EXTERNALTRIGINJEC_T6_TRGO: u32 = 184;
pub const ADC_EXTERNALTRIGINJEC_T7_TRGO: u32 = 248;
pub const ADC_EXTERNALTRIGINJEC_T8_TRGO: u32 = 164;
pub const ADC_EXTERNALTRIGINJEC_T8_TRGO2: u32 = 168;
pub const ADC_EXTERNALTRIGINJEC_T8_CC2: u32 = 140;
pub const ADC_EXTERNALTRIGINJEC_T8_CC4: u32 = 156;
pub const ADC_EXTERNALTRIGINJEC_T15_TRGO: u32 = 188;
pub const ADC_EXTERNALTRIGINJEC_T16_CC1: u32 = 236;
pub const ADC_EXTERNALTRIGINJEC_T20_TRGO: u32 = 192;
pub const ADC_EXTERNALTRIGINJEC_T20_TRGO2: u32 = 196;
pub const ADC_EXTERNALTRIGINJEC_T20_CC2: u32 = 200;
pub const ADC_EXTERNALTRIGINJEC_T20_CC4: u32 = 200;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG1: u32 = 236;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG2: u32 = 204;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG3: u32 = 240;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG4: u32 = 208;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG5: u32 = 212;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG6: u32 = 216;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG7: u32 = 220;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG8: u32 = 224;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG9: u32 = 228;
pub const ADC_EXTERNALTRIGINJEC_HRTIM_TRG10: u32 = 232;
pub const ADC_EXTERNALTRIGINJEC_EXT_IT3: u32 = 180;
pub const ADC_EXTERNALTRIGINJEC_EXT_IT15: u32 = 152;
pub const ADC_EXTERNALTRIGINJEC_LPTIM_OUT: u32 = 244;
pub const ADC_EXTERNALTRIGINJECCONV_EDGE_NONE: u32 = 0;
pub const ADC_EXTERNALTRIGINJECCONV_EDGE_RISING: u32 = 128;
pub const ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING: u32 = 256;
pub const ADC_EXTERNALTRIGINJECCONV_EDGE_RISINGFALLING: u32 = 384;
pub const ADC_SINGLE_ENDED: u32 = 127;
pub const ADC_DIFFERENTIAL_ENDED: u32 = 1082064896;
pub const ADC_OFFSET_1: u32 = 0;
pub const ADC_OFFSET_2: u32 = 1;
pub const ADC_OFFSET_3: u32 = 2;
pub const ADC_OFFSET_4: u32 = 3;
pub const ADC_OFFSET_SIGN_NEGATIVE: u32 = 0;
pub const ADC_OFFSET_SIGN_POSITIVE: u32 = 16777216;
pub const ADC_INJECTED_RANK_1: u32 = 9;
pub const ADC_INJECTED_RANK_2: u32 = 271;
pub const ADC_INJECTED_RANK_3: u32 = 533;
pub const ADC_INJECTED_RANK_4: u32 = 795;
pub const ADC_MODE_INDEPENDENT: u32 = 0;
pub const ADC_DUALMODE_REGSIMULT: u32 = 6;
pub const ADC_DUALMODE_INTERL: u32 = 7;
pub const ADC_DUALMODE_INJECSIMULT: u32 = 5;
pub const ADC_DUALMODE_ALTERTRIG: u32 = 9;
pub const ADC_DUALMODE_REGSIMULT_INJECSIMULT: u32 = 1;
pub const ADC_DUALMODE_REGSIMULT_ALTERTRIG: u32 = 2;
pub const ADC_DUALMODE_REGINTERL_INJECSIMULT: u32 = 3;
pub const ADC_DMAACCESSMODE_DISABLED: u32 = 0;
pub const ADC_DMAACCESSMODE_12_10_BITS: u32 = 32768;
pub const ADC_DMAACCESSMODE_8_6_BITS: u32 = 49152;
pub const ADC_TWOSAMPLINGDELAY_1CYCLE: u32 = 0;
pub const ADC_TWOSAMPLINGDELAY_2CYCLES: u32 = 256;
pub const ADC_TWOSAMPLINGDELAY_3CYCLES: u32 = 512;
pub const ADC_TWOSAMPLINGDELAY_4CYCLES: u32 = 768;
pub const ADC_TWOSAMPLINGDELAY_5CYCLES: u32 = 1024;
pub const ADC_TWOSAMPLINGDELAY_6CYCLES: u32 = 1280;
pub const ADC_TWOSAMPLINGDELAY_7CYCLES: u32 = 1536;
pub const ADC_TWOSAMPLINGDELAY_8CYCLES: u32 = 1792;
pub const ADC_TWOSAMPLINGDELAY_9CYCLES: u32 = 2048;
pub const ADC_TWOSAMPLINGDELAY_10CYCLES: u32 = 2304;
pub const ADC_TWOSAMPLINGDELAY_11CYCLES: u32 = 2560;
pub const ADC_TWOSAMPLINGDELAY_12CYCLES: u32 = 2816;
pub const ADC_REGULAR_GROUP: u32 = 1;
pub const ADC_INJECTED_GROUP: u32 = 2;
pub const ADC_REGULAR_INJECTED_GROUP: u32 = 3;
pub const ADC_CFGR_FIELDS: u32 = 2147483643;
pub const ADC_SMPR1_FIELDS: u32 = 3221225471;
pub const ADC_CFGR_FIELDS_2: u32 = 16386;
pub const EXTI_MODE_NONE: u32 = 0;
pub const EXTI_MODE_INTERRUPT: u32 = 1;
pub const EXTI_MODE_EVENT: u32 = 2;
pub const EXTI_TRIGGER_NONE: u32 = 0;
pub const EXTI_TRIGGER_RISING: u32 = 1;
pub const EXTI_TRIGGER_FALLING: u32 = 2;
pub const EXTI_TRIGGER_RISING_FALLING: u32 = 3;
pub const EXTI_GPIOA: u32 = 0;
pub const EXTI_GPIOB: u32 = 1;
pub const EXTI_GPIOC: u32 = 2;
pub const EXTI_GPIOD: u32 = 3;
pub const EXTI_GPIOE: u32 = 4;
pub const EXTI_GPIOF: u32 = 5;
pub const EXTI_GPIOG: u32 = 6;
pub const EXTI_PROPERTY_SHIFT: u32 = 24;
pub const EXTI_DIRECT: u32 = 16777216;
pub const EXTI_CONFIG: u32 = 33554432;
pub const EXTI_GPIO: u32 = 100663296;
pub const EXTI_RESERVED: u32 = 134217728;
pub const EXTI_PROPERTY_MASK: u32 = 117440512;
pub const EXTI_REG_SHIFT: u32 = 16;
pub const EXTI_REG1: u32 = 0;
pub const EXTI_REG2: u32 = 65536;
pub const EXTI_REG_MASK: u32 = 65536;
pub const EXTI_PIN_MASK: u32 = 31;
pub const EXTI_MODE_MASK: u32 = 3;
pub const EXTI_TRIGGER_MASK: u32 = 3;
pub const EXTI_LINE_NB: u32 = 44;
pub const HAL_FLASH_ERROR_NONE: u32 = 0;
pub const FLASH_TYPEERASE_PAGES: u32 = 0;
pub const FLASH_TYPEERASE_MASSERASE: u32 = 1;
pub const FLASH_BANK_1: u32 = 1;
pub const FLASH_BANK_BOTH: u32 = 1;
pub const FLASH_TYPEPROGRAM_DOUBLEWORD: u32 = 0;
pub const FLASH_TYPEPROGRAM_FAST: u32 = 1;
pub const FLASH_TYPEPROGRAM_FAST_AND_LAST: u32 = 2;
pub const OPTIONBYTE_WRP: u32 = 1;
pub const OPTIONBYTE_RDP: u32 = 2;
pub const OPTIONBYTE_USER: u32 = 4;
pub const OPTIONBYTE_PCROP: u32 = 8;
pub const OPTIONBYTE_BOOT_LOCK: u32 = 16;
pub const OPTIONBYTE_SEC: u32 = 32;
pub const OB_WRPAREA_BANK1_AREAA: u32 = 0;
pub const OB_WRPAREA_BANK1_AREAB: u32 = 1;
pub const OB_BOOT_LOCK_DISABLE: u32 = 0;
pub const OB_BOOT_LOCK_ENABLE: u32 = 65536;
pub const OB_RDP_LEVEL_0: u32 = 170;
pub const OB_RDP_LEVEL_1: u32 = 187;
pub const OB_RDP_LEVEL_2: u32 = 204;
pub const OB_USER_BOR_LEV: u32 = 1;
pub const OB_USER_nRST_STOP: u32 = 2;
pub const OB_USER_nRST_STDBY: u32 = 4;
pub const OB_USER_IWDG_SW: u32 = 8;
pub const OB_USER_IWDG_STOP: u32 = 16;
pub const OB_USER_IWDG_STDBY: u32 = 32;
pub const OB_USER_WWDG_SW: u32 = 64;
pub const OB_USER_nBOOT1: u32 = 512;
pub const OB_USER_SRAM_PE: u32 = 1024;
pub const OB_USER_CCMSRAM_RST: u32 = 2048;
pub const OB_USER_nRST_SHDW: u32 = 4096;
pub const OB_USER_nSWBOOT0: u32 = 8192;
pub const OB_USER_nBOOT0: u32 = 16384;
pub const OB_USER_NRST_MODE: u32 = 32768;
pub const OB_USER_IRHEN: u32 = 65536;
pub const OB_BOR_LEVEL_0: u32 = 0;
pub const OB_BOR_LEVEL_1: u32 = 256;
pub const OB_BOR_LEVEL_2: u32 = 512;
pub const OB_BOR_LEVEL_3: u32 = 768;
pub const OB_BOR_LEVEL_4: u32 = 1024;
pub const OB_STOP_RST: u32 = 0;
pub const OB_STOP_NORST: u32 = 4096;
pub const OB_STANDBY_RST: u32 = 0;
pub const OB_STANDBY_NORST: u32 = 8192;
pub const OB_SHUTDOWN_RST: u32 = 0;
pub const OB_SHUTDOWN_NORST: u32 = 16384;
pub const OB_IWDG_HW: u32 = 0;
pub const OB_IWDG_SW: u32 = 65536;
pub const OB_IWDG_STOP_FREEZE: u32 = 0;
pub const OB_IWDG_STOP_RUN: u32 = 131072;
pub const OB_IWDG_STDBY_FREEZE: u32 = 0;
pub const OB_IWDG_STDBY_RUN: u32 = 262144;
pub const OB_WWDG_HW: u32 = 0;
pub const OB_WWDG_SW: u32 = 524288;
pub const OB_BOOT1_SRAM: u32 = 0;
pub const OB_BOOT1_SYSTEM: u32 = 8388608;
pub const OB_SRAM_PARITY_ENABLE: u32 = 0;
pub const OB_SRAM_PARITY_DISABLE: u32 = 16777216;
pub const OB_CCMSRAM_RST_ERASE: u32 = 0;
pub const OB_CCMSRAM_RST_NOT_ERASE: u32 = 33554432;
pub const OB_BOOT0_FROM_OB: u32 = 0;
pub const OB_BOOT0_FROM_PIN: u32 = 67108864;
pub const OB_nBOOT0_RESET: u32 = 0;
pub const OB_nBOOT0_SET: u32 = 134217728;
pub const OB_NRST_MODE_INPUT_ONLY: u32 = 268435456;
pub const OB_NRST_MODE_GPIO: u32 = 536870912;
pub const OB_NRST_MODE_INPUT_OUTPUT: u32 = 805306368;
pub const OB_IRH_DISABLE: u32 = 0;
pub const OB_IRH_ENABLE: u32 = 1073741824;
pub const OB_PCROP_RDP_NOT_ERASE: u32 = 0;
pub const OB_PCROP_RDP_ERASE: u32 = 2147483648;
pub const FLASH_LATENCY_0: u32 = 0;
pub const FLASH_LATENCY_1: u32 = 1;
pub const FLASH_LATENCY_2: u32 = 2;
pub const FLASH_LATENCY_3: u32 = 3;
pub const FLASH_LATENCY_4: u32 = 4;
pub const FLASH_LATENCY_5: u32 = 5;
pub const FLASH_LATENCY_6: u32 = 6;
pub const FLASH_LATENCY_7: u32 = 7;
pub const FLASH_LATENCY_8: u32 = 8;
pub const FLASH_LATENCY_9: u32 = 9;
pub const FLASH_LATENCY_10: u32 = 10;
pub const FLASH_LATENCY_11: u32 = 11;
pub const FLASH_LATENCY_12: u32 = 12;
pub const FLASH_LATENCY_13: u32 = 13;
pub const FLASH_LATENCY_14: u32 = 14;
pub const FLASH_LATENCY_15: u32 = 15;
pub const FLASH_KEY1: u32 = 1164378403;
pub const FLASH_KEY2: u32 = 3455027627;
pub const FLASH_PDKEY1: u32 = 68494903;
pub const FLASH_PDKEY2: u32 = 4210818301;
pub const FLASH_OPTKEY1: u32 = 135866939;
pub const FLASH_OPTKEY2: u32 = 1281191551;
pub const FLASH_FLAG_EOP: u32 = 1;
pub const FLASH_FLAG_OPERR: u32 = 2;
pub const FLASH_FLAG_PROGERR: u32 = 8;
pub const FLASH_FLAG_WRPERR: u32 = 16;
pub const FLASH_FLAG_PGAERR: u32 = 32;
pub const FLASH_FLAG_SIZERR: u32 = 64;
pub const FLASH_FLAG_PGSERR: u32 = 128;
pub const FLASH_FLAG_MISERR: u32 = 256;
pub const FLASH_FLAG_FASTERR: u32 = 512;
pub const FLASH_FLAG_RDERR: u32 = 16384;
pub const FLASH_FLAG_OPTVERR: u32 = 32768;
pub const FLASH_FLAG_BSY: u32 = 65536;
pub const FLASH_FLAG_ECCC: u32 = 1073741824;
pub const FLASH_FLAG_ECCD: u32 = 2147483648;
pub const FLASH_FLAG_SR_ERRORS: u32 = 50170;
pub const FLASH_FLAG_ECCR_ERRORS: u32 = 3221225472;
pub const FLASH_FLAG_ALL_ERRORS: u32 = 3221275642;
pub const FLASH_IT_EOP: u32 = 16777216;
pub const FLASH_IT_OPERR: u32 = 33554432;
pub const FLASH_IT_RDERR: u32 = 67108864;
pub const FLASH_IT_ECCC: u32 = 1;
pub const FLASH_SIZE_DATA_REGISTER: u32 = 536835552;
pub const FLASH_PAGE_SIZE: u32 = 2048;
pub const FLASH_TIMEOUT_VALUE: u32 = 1000;
pub const PWR_PVDLEVEL_0: u32 = 0;
pub const PWR_PVDLEVEL_1: u32 = 2;
pub const PWR_PVDLEVEL_2: u32 = 4;
pub const PWR_PVDLEVEL_3: u32 = 6;
pub const PWR_PVDLEVEL_4: u32 = 8;
pub const PWR_PVDLEVEL_5: u32 = 10;
pub const PWR_PVDLEVEL_6: u32 = 12;
pub const PWR_PVDLEVEL_7: u32 = 14;
pub const PWR_LOWPOWERREGULATOR_ON: u32 = 16384;
pub const PWR_WUP_POLARITY_SHIFT: u32 = 5;
pub const PWR_WAKEUP_PIN1: u32 = 1;
pub const PWR_WAKEUP_PIN2: u32 = 2;
pub const PWR_WAKEUP_PIN3: u32 = 4;
pub const PWR_WAKEUP_PIN4: u32 = 8;
pub const PWR_WAKEUP_PIN5: u32 = 16;
pub const PWR_WAKEUP_PIN1_HIGH: u32 = 1;
pub const PWR_WAKEUP_PIN2_HIGH: u32 = 2;
pub const PWR_WAKEUP_PIN3_HIGH: u32 = 4;
pub const PWR_WAKEUP_PIN4_HIGH: u32 = 8;
pub const PWR_WAKEUP_PIN5_HIGH: u32 = 16;
pub const PWR_PVM_1: u32 = 16;
pub const PWR_PVM_2: u32 = 32;
pub const PWR_PVM_3: u32 = 64;
pub const PWR_PVM_4: u32 = 128;
pub const PWR_PVM_MODE_NORMAL: u32 = 0;
pub const PWR_PVM_MODE_IT_RISING: u32 = 65537;
pub const PWR_PVM_MODE_IT_FALLING: u32 = 65538;
pub const PWR_PVM_MODE_IT_RISING_FALLING: u32 = 65539;
pub const PWR_PVM_MODE_EVENT_RISING: u32 = 131073;
pub const PWR_PVM_MODE_EVENT_FALLING: u32 = 131074;
pub const PWR_PVM_MODE_EVENT_RISING_FALLING: u32 = 131075;
pub const PWR_REGULATOR_VOLTAGE_SCALE1: u32 = 512;
pub const PWR_REGULATOR_VOLTAGE_SCALE2: u32 = 1024;
pub const PWR_BATTERY_CHARGING_RESISTOR_5: u32 = 0;
pub const PWR_BATTERY_CHARGING_RESISTOR_1_5: u32 = 512;
pub const PWR_BATTERY_CHARGING_DISABLE: u32 = 0;
pub const PWR_BATTERY_CHARGING_ENABLE: u32 = 256;
pub const PWR_GPIO_BIT_0: u32 = 1;
pub const PWR_GPIO_BIT_1: u32 = 2;
pub const PWR_GPIO_BIT_2: u32 = 4;
pub const PWR_GPIO_BIT_3: u32 = 8;
pub const PWR_GPIO_BIT_4: u32 = 16;
pub const PWR_GPIO_BIT_5: u32 = 32;
pub const PWR_GPIO_BIT_6: u32 = 64;
pub const PWR_GPIO_BIT_7: u32 = 128;
pub const PWR_GPIO_BIT_8: u32 = 256;
pub const PWR_GPIO_BIT_9: u32 = 512;
pub const PWR_GPIO_BIT_10: u32 = 1024;
pub const PWR_GPIO_BIT_11: u32 = 2048;
pub const PWR_GPIO_BIT_12: u32 = 4096;
pub const PWR_GPIO_BIT_13: u32 = 8192;
pub const PWR_GPIO_BIT_14: u32 = 16384;
pub const PWR_GPIO_BIT_15: u32 = 32768;
pub const PWR_GPIO_A: u32 = 0;
pub const PWR_GPIO_B: u32 = 1;
pub const PWR_GPIO_C: u32 = 2;
pub const PWR_GPIO_D: u32 = 3;
pub const PWR_GPIO_E: u32 = 4;
pub const PWR_GPIO_F: u32 = 5;
pub const PWR_GPIO_G: u32 = 6;
pub const PWR_EXTI_LINE_PVM1: u32 = 8;
pub const PWR_EXTI_LINE_PVM2: u32 = 16;
pub const PWR_EXTI_LINE_PVM3: u32 = 32;
pub const PWR_EXTI_LINE_PVM4: u32 = 64;
pub const PWR_EVENT_LINE_PVM1: u32 = 8;
pub const PWR_EVENT_LINE_PVM2: u32 = 16;
pub const PWR_EVENT_LINE_PVM3: u32 = 32;
pub const PWR_EVENT_LINE_PVM4: u32 = 64;
pub const PWR_FLAG_WUF1: u32 = 32;
pub const PWR_FLAG_WUF2: u32 = 33;
pub const PWR_FLAG_WUF3: u32 = 34;
pub const PWR_FLAG_WUF4: u32 = 35;
pub const PWR_FLAG_WUF5: u32 = 36;
pub const PWR_FLAG_WU: u32 = 31;
pub const PWR_FLAG_SB: u32 = 40;
pub const PWR_FLAG_WUFI: u32 = 47;
pub const PWR_FLAG_REGLPS: u32 = 72;
pub const PWR_FLAG_REGLPF: u32 = 73;
pub const PWR_FLAG_VOSF: u32 = 74;
pub const PWR_FLAG_PVDO: u32 = 75;
pub const PWR_FLAG_PVMO1: u32 = 76;
pub const PWR_FLAG_PVMO2: u32 = 77;
pub const PWR_FLAG_PVMO3: u32 = 78;
pub const PWR_FLAG_PVMO4: u32 = 79;
pub const HAL_UART_STATE_RESET: u32 = 0;
pub const HAL_UART_STATE_READY: u32 = 32;
pub const HAL_UART_STATE_BUSY: u32 = 36;
pub const HAL_UART_STATE_BUSY_TX: u32 = 33;
pub const HAL_UART_STATE_BUSY_RX: u32 = 34;
pub const HAL_UART_STATE_BUSY_TX_RX: u32 = 35;
pub const HAL_UART_STATE_TIMEOUT: u32 = 160;
pub const HAL_UART_STATE_ERROR: u32 = 224;
pub const HAL_UART_ERROR_NONE: u32 = 0;
pub const HAL_UART_ERROR_PE: u32 = 1;
pub const HAL_UART_ERROR_NE: u32 = 2;
pub const HAL_UART_ERROR_FE: u32 = 4;
pub const HAL_UART_ERROR_ORE: u32 = 8;
pub const HAL_UART_ERROR_DMA: u32 = 16;
pub const HAL_UART_ERROR_RTO: u32 = 32;
pub const UART_STOPBITS_0_5: u32 = 4096;
pub const UART_STOPBITS_1: u32 = 0;
pub const UART_STOPBITS_1_5: u32 = 12288;
pub const UART_STOPBITS_2: u32 = 8192;
pub const UART_PARITY_NONE: u32 = 0;
pub const UART_PARITY_EVEN: u32 = 1024;
pub const UART_PARITY_ODD: u32 = 1536;
pub const UART_HWCONTROL_NONE: u32 = 0;
pub const UART_HWCONTROL_RTS: u32 = 256;
pub const UART_HWCONTROL_CTS: u32 = 512;
pub const UART_HWCONTROL_RTS_CTS: u32 = 768;
pub const UART_MODE_RX: u32 = 4;
pub const UART_MODE_TX: u32 = 8;
pub const UART_MODE_TX_RX: u32 = 12;
pub const UART_STATE_DISABLE: u32 = 0;
pub const UART_STATE_ENABLE: u32 = 1;
pub const UART_OVERSAMPLING_16: u32 = 0;
pub const UART_OVERSAMPLING_8: u32 = 32768;
pub const UART_ONE_BIT_SAMPLE_DISABLE: u32 = 0;
pub const UART_ONE_BIT_SAMPLE_ENABLE: u32 = 2048;
pub const UART_PRESCALER_DIV1: u32 = 0;
pub const UART_PRESCALER_DIV2: u32 = 1;
pub const UART_PRESCALER_DIV4: u32 = 2;
pub const UART_PRESCALER_DIV6: u32 = 3;
pub const UART_PRESCALER_DIV8: u32 = 4;
pub const UART_PRESCALER_DIV10: u32 = 5;
pub const UART_PRESCALER_DIV12: u32 = 6;
pub const UART_PRESCALER_DIV16: u32 = 7;
pub const UART_PRESCALER_DIV32: u32 = 8;
pub const UART_PRESCALER_DIV64: u32 = 9;
pub const UART_PRESCALER_DIV128: u32 = 10;
pub const UART_PRESCALER_DIV256: u32 = 11;
pub const UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT: u32 = 0;
pub const UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE: u32 = 2097152;
pub const UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME: u32 = 4194304;
pub const UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME: u32 = 6291456;
pub const UART_RECEIVER_TIMEOUT_DISABLE: u32 = 0;
pub const UART_RECEIVER_TIMEOUT_ENABLE: u32 = 8388608;
pub const UART_LIN_DISABLE: u32 = 0;
pub const UART_LIN_ENABLE: u32 = 16384;
pub const UART_LINBREAKDETECTLENGTH_10B: u32 = 0;
pub const UART_LINBREAKDETECTLENGTH_11B: u32 = 32;
pub const UART_DMA_TX_DISABLE: u32 = 0;
pub const UART_DMA_TX_ENABLE: u32 = 128;
pub const UART_DMA_RX_DISABLE: u32 = 0;
pub const UART_DMA_RX_ENABLE: u32 = 64;
pub const UART_HALF_DUPLEX_DISABLE: u32 = 0;
pub const UART_HALF_DUPLEX_ENABLE: u32 = 8;
pub const UART_WAKEUPMETHOD_IDLELINE: u32 = 0;
pub const UART_WAKEUPMETHOD_ADDRESSMARK: u32 = 2048;
pub const UART_AUTOBAUD_REQUEST: u32 = 1;
pub const UART_SENDBREAK_REQUEST: u32 = 2;
pub const UART_MUTE_MODE_REQUEST: u32 = 4;
pub const UART_RXDATA_FLUSH_REQUEST: u32 = 8;
pub const UART_TXDATA_FLUSH_REQUEST: u32 = 16;
pub const UART_ADVFEATURE_NO_INIT: u32 = 0;
pub const UART_ADVFEATURE_TXINVERT_INIT: u32 = 1;
pub const UART_ADVFEATURE_RXINVERT_INIT: u32 = 2;
pub const UART_ADVFEATURE_DATAINVERT_INIT: u32 = 4;
pub const UART_ADVFEATURE_SWAP_INIT: u32 = 8;
pub const UART_ADVFEATURE_RXOVERRUNDISABLE_INIT: u32 = 16;
pub const UART_ADVFEATURE_DMADISABLEONERROR_INIT: u32 = 32;
pub const UART_ADVFEATURE_AUTOBAUDRATE_INIT: u32 = 64;
pub const UART_ADVFEATURE_MSBFIRST_INIT: u32 = 128;
pub const UART_ADVFEATURE_TXINV_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_TXINV_ENABLE: u32 = 131072;
pub const UART_ADVFEATURE_RXINV_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_RXINV_ENABLE: u32 = 65536;
pub const UART_ADVFEATURE_DATAINV_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_DATAINV_ENABLE: u32 = 262144;
pub const UART_ADVFEATURE_SWAP_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_SWAP_ENABLE: u32 = 32768;
pub const UART_ADVFEATURE_OVERRUN_ENABLE: u32 = 0;
pub const UART_ADVFEATURE_OVERRUN_DISABLE: u32 = 4096;
pub const UART_ADVFEATURE_AUTOBAUDRATE_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_AUTOBAUDRATE_ENABLE: u32 = 1048576;
pub const UART_ADVFEATURE_DMA_ENABLEONRXERROR: u32 = 0;
pub const UART_ADVFEATURE_DMA_DISABLEONRXERROR: u32 = 8192;
pub const UART_ADVFEATURE_MSBFIRST_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_MSBFIRST_ENABLE: u32 = 524288;
pub const UART_ADVFEATURE_STOPMODE_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_STOPMODE_ENABLE: u32 = 2;
pub const UART_ADVFEATURE_MUTEMODE_DISABLE: u32 = 0;
pub const UART_ADVFEATURE_MUTEMODE_ENABLE: u32 = 8192;
pub const UART_CR2_ADDRESS_LSB_POS: u32 = 24;
pub const UART_WAKEUP_ON_ADDRESS: u32 = 0;
pub const UART_WAKEUP_ON_STARTBIT: u32 = 2097152;
pub const UART_WAKEUP_ON_READDATA_NONEMPTY: u32 = 3145728;
pub const UART_DE_POLARITY_HIGH: u32 = 0;
pub const UART_DE_POLARITY_LOW: u32 = 32768;
pub const UART_CR1_DEAT_ADDRESS_LSB_POS: u32 = 21;
pub const UART_CR1_DEDT_ADDRESS_LSB_POS: u32 = 16;
pub const UART_IT_MASK: u32 = 31;
pub const HAL_UART_TIMEOUT_VALUE: u32 = 33554431;
pub const UART_FLAG_TXFT: u32 = 134217728;
pub const UART_FLAG_RXFT: u32 = 67108864;
pub const UART_FLAG_RXFF: u32 = 16777216;
pub const UART_FLAG_TXFE: u32 = 8388608;
pub const UART_FLAG_REACK: u32 = 4194304;
pub const UART_FLAG_TEACK: u32 = 2097152;
pub const UART_FLAG_WUF: u32 = 1048576;
pub const UART_FLAG_RWU: u32 = 524288;
pub const UART_FLAG_SBKF: u32 = 262144;
pub const UART_FLAG_CMF: u32 = 131072;
pub const UART_FLAG_BUSY: u32 = 65536;
pub const UART_FLAG_ABRF: u32 = 32768;
pub const UART_FLAG_ABRE: u32 = 16384;
pub const UART_FLAG_RTOF: u32 = 2048;
pub const UART_FLAG_CTS: u32 = 1024;
pub const UART_FLAG_CTSIF: u32 = 512;
pub const UART_FLAG_LBDF: u32 = 256;
pub const UART_FLAG_TXE: u32 = 128;
pub const UART_FLAG_TXFNF: u32 = 128;
pub const UART_FLAG_TC: u32 = 64;
pub const UART_FLAG_RXNE: u32 = 32;
pub const UART_FLAG_RXFNE: u32 = 32;
pub const UART_FLAG_IDLE: u32 = 16;
pub const UART_FLAG_ORE: u32 = 8;
pub const UART_FLAG_NE: u32 = 4;
pub const UART_FLAG_FE: u32 = 2;
pub const UART_FLAG_PE: u32 = 1;
pub const UART_IT_PE: u32 = 40;
pub const UART_IT_TXE: u32 = 1831;
pub const UART_IT_TXFNF: u32 = 1831;
pub const UART_IT_TC: u32 = 1574;
pub const UART_IT_RXNE: u32 = 1317;
pub const UART_IT_RXFNE: u32 = 1317;
pub const UART_IT_IDLE: u32 = 1060;
pub const UART_IT_LBD: u32 = 2118;
pub const UART_IT_CTS: u32 = 2410;
pub const UART_IT_CM: u32 = 4398;
pub const UART_IT_WUF: u32 = 5238;
pub const UART_IT_RXFF: u32 = 6207;
pub const UART_IT_TXFE: u32 = 5950;
pub const UART_IT_RXFT: u32 = 6780;
pub const UART_IT_TXFT: u32 = 7031;
pub const UART_IT_RTO: u32 = 2874;
pub const UART_IT_ERR: u32 = 96;
pub const UART_IT_ORE: u32 = 768;
pub const UART_IT_NE: u32 = 512;
pub const UART_IT_FE: u32 = 256;
pub const UART_CLEAR_PEF: u32 = 1;
pub const UART_CLEAR_FEF: u32 = 2;
pub const UART_CLEAR_NEF: u32 = 4;
pub const UART_CLEAR_OREF: u32 = 8;
pub const UART_CLEAR_IDLEF: u32 = 16;
pub const UART_CLEAR_TXFECF: u32 = 32;
pub const UART_CLEAR_TCF: u32 = 64;
pub const UART_CLEAR_LBDF: u32 = 256;
pub const UART_CLEAR_CTSF: u32 = 512;
pub const UART_CLEAR_CMF: u32 = 131072;
pub const UART_CLEAR_WUF: u32 = 1048576;
pub const UART_CLEAR_RTOF: u32 = 2048;
pub const HAL_UART_RECEPTION_STANDARD: u32 = 0;
pub const HAL_UART_RECEPTION_TOIDLE: u32 = 1;
pub const HAL_UART_RECEPTION_TORTO: u32 = 2;
pub const HAL_UART_RECEPTION_TOCHARMATCH: u32 = 3;
pub const UART_WORDLENGTH_7B: u32 = 268435456;
pub const UART_WORDLENGTH_8B: u32 = 0;
pub const UART_WORDLENGTH_9B: u32 = 4096;
pub const UART_ADDRESS_DETECT_4B: u32 = 0;
pub const UART_ADDRESS_DETECT_7B: u32 = 16;
pub const UART_FIFOMODE_DISABLE: u32 = 0;
pub const UART_FIFOMODE_ENABLE: u32 = 536870912;
pub const UART_TXFIFO_THRESHOLD_1_8: u32 = 0;
pub const UART_TXFIFO_THRESHOLD_1_4: u32 = 536870912;
pub const UART_TXFIFO_THRESHOLD_1_2: u32 = 1073741824;
pub const UART_TXFIFO_THRESHOLD_3_4: u32 = 1610612736;
pub const UART_TXFIFO_THRESHOLD_7_8: u32 = 2147483648;
pub const UART_TXFIFO_THRESHOLD_8_8: u32 = 2684354560;
pub const UART_RXFIFO_THRESHOLD_1_8: u32 = 0;
pub const UART_RXFIFO_THRESHOLD_1_4: u32 = 33554432;
pub const UART_RXFIFO_THRESHOLD_1_2: u32 = 67108864;
pub const UART_RXFIFO_THRESHOLD_3_4: u32 = 100663296;
pub const UART_RXFIFO_THRESHOLD_7_8: u32 = 134217728;
pub const UART_RXFIFO_THRESHOLD_8_8: u32 = 167772160;
pub const HAL_TICK_FREQ_10HZ: u32 = 100;
pub const HAL_TICK_FREQ_100HZ: u32 = 10;
pub const HAL_TICK_FREQ_1KHZ: u32 = 1;
pub const HAL_TICK_FREQ_DEFAULT: u32 = 1;
pub const SYSCFG_BOOT_MAINFLASH: u32 = 0;
pub const SYSCFG_IT_FPU_IOC: u32 = 67108864;
pub const SYSCFG_IT_FPU_DZC: u32 = 134217728;
pub const SYSCFG_IT_FPU_UFC: u32 = 268435456;
pub const SYSCFG_IT_FPU_OFC: u32 = 536870912;
pub const SYSCFG_IT_FPU_IDC: u32 = 1073741824;
pub const SYSCFG_IT_FPU_IXC: u32 = 2147483648;
pub const SYSCFG_CCMSRAMWRP_PAGE0: u32 = 1;
pub const SYSCFG_CCMSRAMWRP_PAGE1: u32 = 2;
pub const SYSCFG_CCMSRAMWRP_PAGE2: u32 = 4;
pub const SYSCFG_CCMSRAMWRP_PAGE3: u32 = 8;
pub const SYSCFG_CCMSRAMWRP_PAGE4: u32 = 16;
pub const SYSCFG_CCMSRAMWRP_PAGE5: u32 = 32;
pub const SYSCFG_CCMSRAMWRP_PAGE6: u32 = 64;
pub const SYSCFG_CCMSRAMWRP_PAGE7: u32 = 128;
pub const SYSCFG_CCMSRAMWRP_PAGE8: u32 = 256;
pub const SYSCFG_CCMSRAMWRP_PAGE9: u32 = 512;
pub const SYSCFG_VREFBUF_VOLTAGE_SCALE0: u32 = 0;
pub const SYSCFG_VREFBUF_VOLTAGE_SCALE1: u32 = 16;
pub const SYSCFG_VREFBUF_VOLTAGE_SCALE2: u32 = 32;
pub const SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: u32 = 0;
pub const SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: u32 = 2;
pub const SYSCFG_FLAG_SRAM_PE: u32 = 256;
pub const SYSCFG_FLAG_CCMSRAM_BUSY: u32 = 2;
pub const SYSCFG_FASTMODEPLUS_PB6: u32 = 65536;
pub const SYSCFG_FASTMODEPLUS_PB7: u32 = 131072;
pub const SYSCFG_FASTMODEPLUS_PB8: u32 = 262144;
pub const SYSCFG_FASTMODEPLUS_PB9: u32 = 524288;
#[doc = "< 2 Cortex-M4 Non Maskable Interrupt"]
pub const IRQn_Type_NonMaskableInt_IRQn: IRQn_Type = -14;
#[doc = "< 3 Cortex-M4 Hard Fault Interrupt"]
pub const IRQn_Type_HardFault_IRQn: IRQn_Type = -13;
#[doc = "< 4 Cortex-M4 Memory Management Interrupt"]
pub const IRQn_Type_MemoryManagement_IRQn: IRQn_Type = -12;
#[doc = "< 5 Cortex-M4 Bus Fault Interrupt"]
pub const IRQn_Type_BusFault_IRQn: IRQn_Type = -11;
#[doc = "< 6 Cortex-M4 Usage Fault Interrupt"]
pub const IRQn_Type_UsageFault_IRQn: IRQn_Type = -10;
#[doc = "< 11 Cortex-M4 SV Call Interrupt"]
pub const IRQn_Type_SVCall_IRQn: IRQn_Type = -5;
#[doc = "< 12 Cortex-M4 Debug Monitor Interrupt"]
pub const IRQn_Type_DebugMonitor_IRQn: IRQn_Type = -4;
#[doc = "< 14 Cortex-M4 Pend SV Interrupt"]
pub const IRQn_Type_PendSV_IRQn: IRQn_Type = -2;
#[doc = "< 15 Cortex-M4 System Tick Interrupt"]
pub const IRQn_Type_SysTick_IRQn: IRQn_Type = -1;
#[doc = "< Window WatchDog Interrupt"]
pub const IRQn_Type_WWDG_IRQn: IRQn_Type = 0;
#[doc = "< PVD/PVM1/PVM2/PVM3/PVM4 through EXTI Line detection Interrupts"]
pub const IRQn_Type_PVD_PVM_IRQn: IRQn_Type = 1;
#[doc = "< RTC Tamper and TimeStamp and RCC LSE CSS interrupts through the EXTI"]
pub const IRQn_Type_RTC_TAMP_LSECSS_IRQn: IRQn_Type = 2;
#[doc = "< RTC Wakeup interrupt through the EXTI line"]
pub const IRQn_Type_RTC_WKUP_IRQn: IRQn_Type = 3;
#[doc = "< FLASH global Interrupt"]
pub const IRQn_Type_FLASH_IRQn: IRQn_Type = 4;
#[doc = "< RCC global Interrupt"]
pub const IRQn_Type_RCC_IRQn: IRQn_Type = 5;
#[doc = "< EXTI Line0 Interrupt"]
pub const IRQn_Type_EXTI0_IRQn: IRQn_Type = 6;
#[doc = "< EXTI Line1 Interrupt"]
pub const IRQn_Type_EXTI1_IRQn: IRQn_Type = 7;
#[doc = "< EXTI Line2 Interrupt"]
pub const IRQn_Type_EXTI2_IRQn: IRQn_Type = 8;
#[doc = "< EXTI Line3 Interrupt"]
pub const IRQn_Type_EXTI3_IRQn: IRQn_Type = 9;
#[doc = "< EXTI Line4 Interrupt"]
pub const IRQn_Type_EXTI4_IRQn: IRQn_Type = 10;
#[doc = "< DMA1 Channel 1 global Interrupt"]
pub const IRQn_Type_DMA1_Channel1_IRQn: IRQn_Type = 11;
#[doc = "< DMA1 Channel 2 global Interrupt"]
pub const IRQn_Type_DMA1_Channel2_IRQn: IRQn_Type = 12;
#[doc = "< DMA1 Channel 3 global Interrupt"]
pub const IRQn_Type_DMA1_Channel3_IRQn: IRQn_Type = 13;
#[doc = "< DMA1 Channel 4 global Interrupt"]
pub const IRQn_Type_DMA1_Channel4_IRQn: IRQn_Type = 14;
#[doc = "< DMA1 Channel 5 global Interrupt"]
pub const IRQn_Type_DMA1_Channel5_IRQn: IRQn_Type = 15;
#[doc = "< DMA1 Channel 6 global Interrupt"]
pub const IRQn_Type_DMA1_Channel6_IRQn: IRQn_Type = 16;
#[doc = "< ADC1 and ADC2 global Interrupt"]
pub const IRQn_Type_ADC1_2_IRQn: IRQn_Type = 18;
#[doc = "< USB HP Interrupt"]
pub const IRQn_Type_USB_HP_IRQn: IRQn_Type = 19;
#[doc = "< USB LP  Interrupt"]
pub const IRQn_Type_USB_LP_IRQn: IRQn_Type = 20;
#[doc = "< FDCAN1 IT0 Interrupt"]
pub const IRQn_Type_FDCAN1_IT0_IRQn: IRQn_Type = 21;
#[doc = "< FDCAN1 IT1 Interrupt"]
pub const IRQn_Type_FDCAN1_IT1_IRQn: IRQn_Type = 22;
#[doc = "< External Line[9:5] Interrupts"]
pub const IRQn_Type_EXTI9_5_IRQn: IRQn_Type = 23;
#[doc = "< TIM1 Break, Transition error, Index error and TIM15 global interrupt"]
pub const IRQn_Type_TIM1_BRK_TIM15_IRQn: IRQn_Type = 24;
#[doc = "< TIM1 Update Interrupt and TIM16 global interrupt"]
pub const IRQn_Type_TIM1_UP_TIM16_IRQn: IRQn_Type = 25;
#[doc = "< TIM1 TIM1 Trigger, Commutation, Direction change, Index and TIM17 global interrupt"]
pub const IRQn_Type_TIM1_TRG_COM_TIM17_IRQn: IRQn_Type = 26;
#[doc = "< TIM1 Capture Compare Interrupt"]
pub const IRQn_Type_TIM1_CC_IRQn: IRQn_Type = 27;
#[doc = "< TIM2 global Interrupt"]
pub const IRQn_Type_TIM2_IRQn: IRQn_Type = 28;
#[doc = "< TIM3 global Interrupt"]
pub const IRQn_Type_TIM3_IRQn: IRQn_Type = 29;
#[doc = "< TIM4 global Interrupt"]
pub const IRQn_Type_TIM4_IRQn: IRQn_Type = 30;
#[doc = "< I2C1 Event Interrupt"]
pub const IRQn_Type_I2C1_EV_IRQn: IRQn_Type = 31;
#[doc = "< I2C1 Error Interrupt"]
pub const IRQn_Type_I2C1_ER_IRQn: IRQn_Type = 32;
#[doc = "< I2C2 Event Interrupt"]
pub const IRQn_Type_I2C2_EV_IRQn: IRQn_Type = 33;
#[doc = "< I2C2 Error Interrupt"]
pub const IRQn_Type_I2C2_ER_IRQn: IRQn_Type = 34;
#[doc = "< SPI1 global Interrupt"]
pub const IRQn_Type_SPI1_IRQn: IRQn_Type = 35;
#[doc = "< SPI2 global Interrupt"]
pub const IRQn_Type_SPI2_IRQn: IRQn_Type = 36;
#[doc = "< USART1 global Interrupt"]
pub const IRQn_Type_USART1_IRQn: IRQn_Type = 37;
#[doc = "< USART2 global Interrupt"]
pub const IRQn_Type_USART2_IRQn: IRQn_Type = 38;
#[doc = "< USART3 global Interrupt"]
pub const IRQn_Type_USART3_IRQn: IRQn_Type = 39;
#[doc = "< External Line[15:10] Interrupts"]
pub const IRQn_Type_EXTI15_10_IRQn: IRQn_Type = 40;
#[doc = "< RTC Alarm (A and B) through EXTI Line Interrupt"]
pub const IRQn_Type_RTC_Alarm_IRQn: IRQn_Type = 41;
#[doc = "< USB Wakeup through EXTI line Interrupt"]
pub const IRQn_Type_USBWakeUp_IRQn: IRQn_Type = 42;
#[doc = "< TIM8 Break, Transition error and Index error Interrupt"]
pub const IRQn_Type_TIM8_BRK_IRQn: IRQn_Type = 43;
#[doc = "< TIM8 Update Interrupt"]
pub const IRQn_Type_TIM8_UP_IRQn: IRQn_Type = 44;
#[doc = "< TIM8 Trigger, Commutation, Direction change and Index Interrupt"]
pub const IRQn_Type_TIM8_TRG_COM_IRQn: IRQn_Type = 45;
#[doc = "< TIM8 Capture Compare Interrupt"]
pub const IRQn_Type_TIM8_CC_IRQn: IRQn_Type = 46;
#[doc = "< LP TIM1 Interrupt"]
pub const IRQn_Type_LPTIM1_IRQn: IRQn_Type = 49;
#[doc = "< SPI3 global Interrupt"]
pub const IRQn_Type_SPI3_IRQn: IRQn_Type = 51;
#[doc = "< UART4 global Interrupt"]
pub const IRQn_Type_UART4_IRQn: IRQn_Type = 52;
#[doc = "< TIM6 global and DAC1&3 underrun error  interrupts"]
pub const IRQn_Type_TIM6_DAC_IRQn: IRQn_Type = 54;
#[doc = "< TIM7 global interrupts"]
pub const IRQn_Type_TIM7_IRQn: IRQn_Type = 55;
#[doc = "< DMA2 Channel 1 global Interrupt"]
pub const IRQn_Type_DMA2_Channel1_IRQn: IRQn_Type = 56;
#[doc = "< DMA2 Channel 2 global Interrupt"]
pub const IRQn_Type_DMA2_Channel2_IRQn: IRQn_Type = 57;
#[doc = "< DMA2 Channel 3 global Interrupt"]
pub const IRQn_Type_DMA2_Channel3_IRQn: IRQn_Type = 58;
#[doc = "< DMA2 Channel 4 global Interrupt"]
pub const IRQn_Type_DMA2_Channel4_IRQn: IRQn_Type = 59;
#[doc = "< DMA2 Channel 5 global Interrupt"]
pub const IRQn_Type_DMA2_Channel5_IRQn: IRQn_Type = 60;
#[doc = "< UCPD global Interrupt"]
pub const IRQn_Type_UCPD1_IRQn: IRQn_Type = 63;
#[doc = "< COMP1, COMP2 and COMP3 Interrupts"]
pub const IRQn_Type_COMP1_2_3_IRQn: IRQn_Type = 64;
#[doc = "< COMP4"]
pub const IRQn_Type_COMP4_IRQn: IRQn_Type = 65;
#[doc = "< CRS global interrupt"]
pub const IRQn_Type_CRS_IRQn: IRQn_Type = 75;
#[doc = "< Serial Audio Interface global interrupt"]
pub const IRQn_Type_SAI1_IRQn: IRQn_Type = 76;
#[doc = "< FPU global interrupt"]
pub const IRQn_Type_FPU_IRQn: IRQn_Type = 81;
#[doc = "< RNG global interrupt"]
pub const IRQn_Type_RNG_IRQn: IRQn_Type = 90;
#[doc = "< LP UART 1 Interrupt"]
pub const IRQn_Type_LPUART1_IRQn: IRQn_Type = 91;
#[doc = "< I2C3 Event Interrupt"]
pub const IRQn_Type_I2C3_EV_IRQn: IRQn_Type = 92;
#[doc = "< I2C3 Error interrupt"]
pub const IRQn_Type_I2C3_ER_IRQn: IRQn_Type = 93;
#[doc = "< DMAMUX overrun global interrupt"]
pub const IRQn_Type_DMAMUX_OVR_IRQn: IRQn_Type = 94;
#[doc = "< DMA2 Channel 6 interrupt"]
pub const IRQn_Type_DMA2_Channel6_IRQn: IRQn_Type = 97;
#[doc = "< CORDIC global Interrupt"]
pub const IRQn_Type_CORDIC_IRQn: IRQn_Type = 100;
#[doc = "< FMAC global Interrupt"]
pub const IRQn_Type_FMAC_IRQn: IRQn_Type = 101;
#[doc = " @brief STM32G4XX Interrupt Number Definition, according to the selected device\n        in @ref Library_configuration_section"]
pub type IRQn_Type = cty::c_int;
pub type wchar_t = cty::c_uint;
pub type wint_t = cty::c_int;
pub type int_least8_t = cty::c_schar;
pub type uint_least8_t = cty::c_uchar;
pub type int_least16_t = cty::c_short;
pub type uint_least16_t = cty::c_ushort;
pub type int_least32_t = cty::c_int;
pub type uint_least32_t = cty::c_uint;
pub type int_least64_t = cty::c_longlong;
pub type uint_least64_t = cty::c_ulonglong;
pub type int_fast8_t = cty::c_schar;
pub type uint_fast8_t = cty::c_uchar;
pub type int_fast16_t = cty::c_short;
pub type uint_fast16_t = cty::c_ushort;
pub type int_fast32_t = cty::c_int;
pub type uint_fast32_t = cty::c_uint;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast64_t = cty::c_ulonglong;
pub type __intptr_t = cty::c_int;
pub type __uintptr_t = cty::c_uint;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32 {
    pub v: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_WRITE {
    pub v: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_READ {
    pub v: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_WRITE {
    pub v: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_READ {
    pub v: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union APSR_Type {
    pub b: APSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _reserved0: u32,
        GE: u32,
        _reserved1: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 7u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IPSR_Type {
    pub b: IPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ISR: u32, _reserved0: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xPSR_Type {
    pub b: xPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn T(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ISR: u32,
        _reserved0: u32,
        ICI_IT_1: u32,
        GE: u32,
        _reserved1: u32,
        T: u32,
        ICI_IT_2: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let ICI_IT_1: u32 = unsafe { ::core::mem::transmute(ICI_IT_1) };
            ICI_IT_1 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let T: u32 = unsafe { ::core::mem::transmute(T) };
            T as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let ICI_IT_2: u32 = unsafe { ::core::mem::transmute(ICI_IT_2) };
            ICI_IT_2 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CONTROL_Type {
    pub b: CONTROL_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn nPRIV(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nPRIV(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FPCA(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FPCA(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nPRIV: u32,
        SPSEL: u32,
        FPCA: u32,
        _reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nPRIV: u32 = unsafe { ::core::mem::transmute(nPRIV) };
            nPRIV as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let SPSEL: u32 = unsafe { ::core::mem::transmute(SPSEL) };
            SPSEL as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let FPCA: u32 = unsafe { ::core::mem::transmute(FPCA) };
            FPCA as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVIC_Type {
    pub ISER: [u32; 8usize],
    pub RESERVED0: [u32; 24usize],
    pub ICER: [u32; 8usize],
    pub RESERVED1: [u32; 24usize],
    pub ISPR: [u32; 8usize],
    pub RESERVED2: [u32; 24usize],
    pub ICPR: [u32; 8usize],
    pub RESERVED3: [u32; 24usize],
    pub IABR: [u32; 8usize],
    pub RESERVED4: [u32; 56usize],
    pub IP: [u8; 240usize],
    pub RESERVED5: [u32; 644usize],
    pub STIR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCB_Type {
    pub CPUID: u32,
    pub ICSR: u32,
    pub VTOR: u32,
    pub AIRCR: u32,
    pub SCR: u32,
    pub CCR: u32,
    pub SHP: [u8; 12usize],
    pub SHCSR: u32,
    pub CFSR: u32,
    pub HFSR: u32,
    pub DFSR: u32,
    pub MMFAR: u32,
    pub BFAR: u32,
    pub AFSR: u32,
    pub PFR: [u32; 2usize],
    pub DFR: u32,
    pub ADR: u32,
    pub MMFR: [u32; 4usize],
    pub ISAR: [u32; 5usize],
    pub RESERVED0: [u32; 5usize],
    pub CPACR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCnSCB_Type {
    pub RESERVED0: [u32; 1usize],
    pub ICTR: u32,
    pub ACTLR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysTick_Type {
    pub CTRL: u32,
    pub LOAD: u32,
    pub VAL: u32,
    pub CALIB: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ITM_Type {
    pub PORT: [ITM_Type__bindgen_ty_1; 32usize],
    pub RESERVED0: [u32; 864usize],
    pub TER: u32,
    pub RESERVED1: [u32; 15usize],
    pub TPR: u32,
    pub RESERVED2: [u32; 15usize],
    pub TCR: u32,
    pub RESERVED3: [u32; 32usize],
    pub RESERVED4: [u32; 43usize],
    pub LAR: u32,
    pub LSR: u32,
    pub RESERVED5: [u32; 6usize],
    pub PID4: u32,
    pub PID5: u32,
    pub PID6: u32,
    pub PID7: u32,
    pub PID0: u32,
    pub PID1: u32,
    pub PID2: u32,
    pub PID3: u32,
    pub CID0: u32,
    pub CID1: u32,
    pub CID2: u32,
    pub CID3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ITM_Type__bindgen_ty_1 {
    pub u8_: u8,
    pub u16_: u16,
    pub u32_: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DWT_Type {
    pub CTRL: u32,
    pub CYCCNT: u32,
    pub CPICNT: u32,
    pub EXCCNT: u32,
    pub SLEEPCNT: u32,
    pub LSUCNT: u32,
    pub FOLDCNT: u32,
    pub PCSR: u32,
    pub COMP0: u32,
    pub MASK0: u32,
    pub FUNCTION0: u32,
    pub RESERVED0: [u32; 1usize],
    pub COMP1: u32,
    pub MASK1: u32,
    pub FUNCTION1: u32,
    pub RESERVED1: [u32; 1usize],
    pub COMP2: u32,
    pub MASK2: u32,
    pub FUNCTION2: u32,
    pub RESERVED2: [u32; 1usize],
    pub COMP3: u32,
    pub MASK3: u32,
    pub FUNCTION3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPI_Type {
    pub SSPSR: u32,
    pub CSPSR: u32,
    pub RESERVED0: [u32; 2usize],
    pub ACPR: u32,
    pub RESERVED1: [u32; 55usize],
    pub SPPR: u32,
    pub RESERVED2: [u32; 131usize],
    pub FFSR: u32,
    pub FFCR: u32,
    pub FSCR: u32,
    pub RESERVED3: [u32; 759usize],
    pub TRIGGER: u32,
    pub FIFO0: u32,
    pub ITATBCTR2: u32,
    pub RESERVED4: [u32; 1usize],
    pub ITATBCTR0: u32,
    pub FIFO1: u32,
    pub ITCTRL: u32,
    pub RESERVED5: [u32; 39usize],
    pub CLAIMSET: u32,
    pub CLAIMCLR: u32,
    pub RESERVED7: [u32; 8usize],
    pub DEVID: u32,
    pub DEVTYPE: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPU_Type {
    pub TYPE: u32,
    pub CTRL: u32,
    pub RNR: u32,
    pub RBAR: u32,
    pub RASR: u32,
    pub RBAR_A1: u32,
    pub RASR_A1: u32,
    pub RBAR_A2: u32,
    pub RASR_A2: u32,
    pub RBAR_A3: u32,
    pub RASR_A3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPU_Type {
    pub RESERVED0: [u32; 1usize],
    pub FPCCR: u32,
    pub FPCAR: u32,
    pub FPDSCR: u32,
    pub MVFR0: u32,
    pub MVFR1: u32,
    pub MVFR2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoreDebug_Type {
    pub DHCSR: u32,
    pub DCRSR: u32,
    pub DCRDR: u32,
    pub DEMCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARM_MPU_Region_t {
    pub RBAR: u32,
    pub RASR: u32,
}
extern "C" {
    pub static mut ITM_RxBuffer: i32;
}
extern "C" {
    #[doc = "< System Clock Frequency (Core Clock)"]
    pub static mut SystemCoreClock: u32;
}
extern "C" {
    #[doc = "< AHB prescalers table values"]
    pub static AHBPrescTable: [u8; 16usize];
}
extern "C" {
    #[doc = "< APB prescalers table values"]
    pub static APBPrescTable: [u8; 8usize];
}
extern "C" {
    #[doc = " @addtogroup STM32G4xx_System_Exported_Functions\n @{"]
    pub fn SystemInit();
}
extern "C" {
    pub fn SystemCoreClockUpdate();
}
#[doc = " @brief Analog to Digital Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_TypeDef {
    #[doc = "< ADC interrupt and status register,             Address offset: 0x00"]
    pub ISR: u32,
    #[doc = "< ADC interrupt enable register,                 Address offset: 0x04"]
    pub IER: u32,
    #[doc = "< ADC control register,                          Address offset: 0x08"]
    pub CR: u32,
    #[doc = "< ADC configuration register 1,                  Address offset: 0x0C"]
    pub CFGR: u32,
    #[doc = "< ADC configuration register 2,                  Address offset: 0x10"]
    pub CFGR2: u32,
    #[doc = "< ADC sampling time register 1,                  Address offset: 0x14"]
    pub SMPR1: u32,
    #[doc = "< ADC sampling time register 2,                  Address offset: 0x18"]
    pub SMPR2: u32,
    #[doc = "< Reserved,                                                      0x1C"]
    pub RESERVED1: u32,
    #[doc = "< ADC analog watchdog 1 threshold register,      Address offset: 0x20"]
    pub TR1: u32,
    #[doc = "< ADC analog watchdog 2 threshold register,      Address offset: 0x24"]
    pub TR2: u32,
    #[doc = "< ADC analog watchdog 3 threshold register,      Address offset: 0x28"]
    pub TR3: u32,
    #[doc = "< Reserved,                                                      0x2C"]
    pub RESERVED2: u32,
    #[doc = "< ADC group regular sequencer register 1,        Address offset: 0x30"]
    pub SQR1: u32,
    #[doc = "< ADC group regular sequencer register 2,        Address offset: 0x34"]
    pub SQR2: u32,
    #[doc = "< ADC group regular sequencer register 3,        Address offset: 0x38"]
    pub SQR3: u32,
    #[doc = "< ADC group regular sequencer register 4,        Address offset: 0x3C"]
    pub SQR4: u32,
    #[doc = "< ADC group regular data register,               Address offset: 0x40"]
    pub DR: u32,
    #[doc = "< Reserved,                                                      0x44"]
    pub RESERVED3: u32,
    #[doc = "< Reserved,                                                      0x48"]
    pub RESERVED4: u32,
    #[doc = "< ADC group injected sequencer register,         Address offset: 0x4C"]
    pub JSQR: u32,
    #[doc = "< Reserved,                                               0x50 - 0x5C"]
    pub RESERVED5: [u32; 4usize],
    #[doc = "< ADC offset register 1,                         Address offset: 0x60"]
    pub OFR1: u32,
    #[doc = "< ADC offset register 2,                         Address offset: 0x64"]
    pub OFR2: u32,
    #[doc = "< ADC offset register 3,                         Address offset: 0x68"]
    pub OFR3: u32,
    #[doc = "< ADC offset register 4,                         Address offset: 0x6C"]
    pub OFR4: u32,
    #[doc = "< Reserved,                                               0x70 - 0x7C"]
    pub RESERVED6: [u32; 4usize],
    #[doc = "< ADC group injected rank 1 data register,       Address offset: 0x80"]
    pub JDR1: u32,
    #[doc = "< ADC group injected rank 2 data register,       Address offset: 0x84"]
    pub JDR2: u32,
    #[doc = "< ADC group injected rank 3 data register,       Address offset: 0x88"]
    pub JDR3: u32,
    #[doc = "< ADC group injected rank 4 data register,       Address offset: 0x8C"]
    pub JDR4: u32,
    #[doc = "< Reserved,                                             0x090 - 0x09C"]
    pub RESERVED7: [u32; 4usize],
    #[doc = "< ADC analog watchdog 2 configuration register,  Address offset: 0xA0"]
    pub AWD2CR: u32,
    #[doc = "< ADC analog watchdog 3 Configuration Register,  Address offset: 0xA4"]
    pub AWD3CR: u32,
    #[doc = "< Reserved,                                                     0x0A8"]
    pub RESERVED8: u32,
    #[doc = "< Reserved,                                                     0x0AC"]
    pub RESERVED9: u32,
    #[doc = "< ADC differential mode selection register,      Address offset: 0xB0"]
    pub DIFSEL: u32,
    #[doc = "< ADC calibration factors,                       Address offset: 0xB4"]
    pub CALFACT: u32,
    #[doc = "< Reserved,                                             0x0B8 - 0x0BC"]
    pub RESERVED10: [u32; 2usize],
    #[doc = "< ADC calibration factors,                       Address offset: 0xC0"]
    pub GCOMP: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_Common_TypeDef {
    #[doc = "< ADC common status register,            Address offset: 0x300 + 0x00"]
    pub CSR: u32,
    #[doc = "< Reserved,                              Address offset: 0x300 + 0x04"]
    pub RESERVED1: u32,
    #[doc = "< ADC common configuration register,     Address offset: 0x300 + 0x08"]
    pub CCR: u32,
    #[doc = "< ADC common group regular data register Address offset: 0x300 + 0x0C"]
    pub CDR: u32,
}
#[doc = " @brief FD Controller Area Network"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_GlobalTypeDef {
    #[doc = "< FDCAN Core Release register,                                     Address offset: 0x000"]
    pub CREL: u32,
    #[doc = "< FDCAN Endian register,                                           Address offset: 0x004"]
    pub ENDN: u32,
    #[doc = "< Reserved,                                                                        0x008"]
    pub RESERVED1: u32,
    #[doc = "< FDCAN Data Bit Timing & Prescaler register,                      Address offset: 0x00C"]
    pub DBTP: u32,
    #[doc = "< FDCAN Test register,                                             Address offset: 0x010"]
    pub TEST: u32,
    #[doc = "< FDCAN RAM Watchdog register,                                     Address offset: 0x014"]
    pub RWD: u32,
    #[doc = "< FDCAN CC Control register,                                       Address offset: 0x018"]
    pub CCCR: u32,
    #[doc = "< FDCAN Nominal Bit Timing & Prescaler register,                   Address offset: 0x01C"]
    pub NBTP: u32,
    #[doc = "< FDCAN Timestamp Counter Configuration register,                  Address offset: 0x020"]
    pub TSCC: u32,
    #[doc = "< FDCAN Timestamp Counter Value register,                          Address offset: 0x024"]
    pub TSCV: u32,
    #[doc = "< FDCAN Timeout Counter Configuration register,                    Address offset: 0x028"]
    pub TOCC: u32,
    #[doc = "< FDCAN Timeout Counter Value register,                            Address offset: 0x02C"]
    pub TOCV: u32,
    #[doc = "< Reserved,                                                                0x030 - 0x03C"]
    pub RESERVED2: [u32; 4usize],
    #[doc = "< FDCAN Error Counter register,                                    Address offset: 0x040"]
    pub ECR: u32,
    #[doc = "< FDCAN Protocol Status register,                                  Address offset: 0x044"]
    pub PSR: u32,
    #[doc = "< FDCAN Transmitter Delay Compensation register,                   Address offset: 0x048"]
    pub TDCR: u32,
    #[doc = "< Reserved,                                                                        0x04C"]
    pub RESERVED3: u32,
    #[doc = "< FDCAN Interrupt register,                                        Address offset: 0x050"]
    pub IR: u32,
    #[doc = "< FDCAN Interrupt Enable register,                                 Address offset: 0x054"]
    pub IE: u32,
    #[doc = "< FDCAN Interrupt Line Select register,                            Address offset: 0x058"]
    pub ILS: u32,
    #[doc = "< FDCAN Interrupt Line Enable register,                            Address offset: 0x05C"]
    pub ILE: u32,
    #[doc = "< Reserved,                                                                0x060 - 0x07C"]
    pub RESERVED4: [u32; 8usize],
    #[doc = "< FDCAN Global Filter Configuration register,                      Address offset: 0x080"]
    pub RXGFC: u32,
    #[doc = "< FDCAN Extended ID AND Mask register,                             Address offset: 0x084"]
    pub XIDAM: u32,
    #[doc = "< FDCAN High Priority Message Status register,                     Address offset: 0x088"]
    pub HPMS: u32,
    #[doc = "< Reserved,                                                                        0x08C"]
    pub RESERVED5: u32,
    #[doc = "< FDCAN Rx FIFO 0 Status register,                                 Address offset: 0x090"]
    pub RXF0S: u32,
    #[doc = "< FDCAN Rx FIFO 0 Acknowledge register,                            Address offset: 0x094"]
    pub RXF0A: u32,
    #[doc = "< FDCAN Rx FIFO 1 Status register,                                 Address offset: 0x098"]
    pub RXF1S: u32,
    #[doc = "< FDCAN Rx FIFO 1 Acknowledge register,                            Address offset: 0x09C"]
    pub RXF1A: u32,
    #[doc = "< Reserved,                                                                0x0A0 - 0x0BC"]
    pub RESERVED6: [u32; 8usize],
    #[doc = "< FDCAN Tx Buffer Configuration register,                          Address offset: 0x0C0"]
    pub TXBC: u32,
    #[doc = "< FDCAN Tx FIFO/Queue Status register,                             Address offset: 0x0C4"]
    pub TXFQS: u32,
    #[doc = "< FDCAN Tx Buffer Request Pending register,                        Address offset: 0x0C8"]
    pub TXBRP: u32,
    #[doc = "< FDCAN Tx Buffer Add Request register,                            Address offset: 0x0CC"]
    pub TXBAR: u32,
    #[doc = "< FDCAN Tx Buffer Cancellation Request register,                   Address offset: 0x0D0"]
    pub TXBCR: u32,
    #[doc = "< FDCAN Tx Buffer Transmission Occurred register,                  Address offset: 0x0D4"]
    pub TXBTO: u32,
    #[doc = "< FDCAN Tx Buffer Cancellation Finished register,                  Address offset: 0x0D8"]
    pub TXBCF: u32,
    #[doc = "< FDCAN Tx Buffer Transmission Interrupt Enable register,          Address offset: 0x0DC"]
    pub TXBTIE: u32,
    #[doc = "< FDCAN Tx Buffer Cancellation Finished Interrupt Enable register, Address offset: 0x0E0"]
    pub TXBCIE: u32,
    #[doc = "< FDCAN Tx Event FIFO Status register,                             Address offset: 0x0E4"]
    pub TXEFS: u32,
    #[doc = "< FDCAN Tx Event FIFO Acknowledge register,                        Address offset: 0x0E8"]
    pub TXEFA: u32,
}
#[doc = " @brief FD Controller Area Network Configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_Config_TypeDef {
    #[doc = "< FDCAN clock divider register,                            Address offset: 0x100 + 0x000"]
    pub CKDIV: u32,
}
#[doc = " @brief Comparator"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COMP_TypeDef {
    #[doc = "< COMP control and status register, Address offset: 0x00"]
    pub CSR: u32,
}
#[doc = " @brief CRC calculation unit"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_TypeDef {
    #[doc = "< CRC Data register,                           Address offset: 0x00"]
    pub DR: u32,
    #[doc = "< CRC Independent data register,               Address offset: 0x04"]
    pub IDR: u32,
    #[doc = "< CRC Control register,                        Address offset: 0x08"]
    pub CR: u32,
    #[doc = "< Reserved,                                                    0x0C"]
    pub RESERVED0: u32,
    #[doc = "< Initial CRC value register,                  Address offset: 0x10"]
    pub INIT: u32,
    #[doc = "< CRC polynomial register,                     Address offset: 0x14"]
    pub POL: u32,
}
#[doc = " @brief Clock Recovery System"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRS_TypeDef {
    #[doc = "< CRS ccontrol register,              Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< CRS configuration register,         Address offset: 0x04"]
    pub CFGR: u32,
    #[doc = "< CRS interrupt and status register,  Address offset: 0x08"]
    pub ISR: u32,
    #[doc = "< CRS interrupt flag clear register,  Address offset: 0x0C"]
    pub ICR: u32,
}
#[doc = " @brief Digital to Analog Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_TypeDef {
    #[doc = "< DAC control register,                                    Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< DAC software trigger register,                           Address offset: 0x04"]
    pub SWTRIGR: u32,
    #[doc = "< DAC channel1 12-bit right-aligned data holding register, Address offset: 0x08"]
    pub DHR12R1: u32,
    #[doc = "< DAC channel1 12-bit left aligned data holding register,  Address offset: 0x0C"]
    pub DHR12L1: u32,
    #[doc = "< DAC channel1 8-bit right aligned data holding register,  Address offset: 0x10"]
    pub DHR8R1: u32,
    #[doc = "< DAC channel2 12-bit right aligned data holding register, Address offset: 0x14"]
    pub DHR12R2: u32,
    #[doc = "< DAC channel2 12-bit left aligned data holding register,  Address offset: 0x18"]
    pub DHR12L2: u32,
    #[doc = "< DAC channel2 8-bit right-aligned data holding register,  Address offset: 0x1C"]
    pub DHR8R2: u32,
    #[doc = "< Dual DAC 12-bit right-aligned data holding register,     Address offset: 0x20"]
    pub DHR12RD: u32,
    #[doc = "< DUAL DAC 12-bit left aligned data holding register,      Address offset: 0x24"]
    pub DHR12LD: u32,
    #[doc = "< DUAL DAC 8-bit right aligned data holding register,      Address offset: 0x28"]
    pub DHR8RD: u32,
    #[doc = "< DAC channel1 data output register,                       Address offset: 0x2C"]
    pub DOR1: u32,
    #[doc = "< DAC channel2 data output register,                       Address offset: 0x30"]
    pub DOR2: u32,
    #[doc = "< DAC status register,                                     Address offset: 0x34"]
    pub SR: u32,
    #[doc = "< DAC calibration control register,                        Address offset: 0x38"]
    pub CCR: u32,
    #[doc = "< DAC mode control register,                               Address offset: 0x3C"]
    pub MCR: u32,
    #[doc = "< DAC Sample and Hold sample time register 1,              Address offset: 0x40"]
    pub SHSR1: u32,
    #[doc = "< DAC Sample and Hold sample time register 2,              Address offset: 0x44"]
    pub SHSR2: u32,
    #[doc = "< DAC Sample and Hold hold time register,                  Address offset: 0x48"]
    pub SHHR: u32,
    #[doc = "< DAC Sample and Hold refresh time register,               Address offset: 0x4C"]
    pub SHRR: u32,
    pub RESERVED: [u32; 2usize],
    #[doc = "< DAC Sawtooth register,                                   Address offset: 0x58"]
    pub STR1: u32,
    #[doc = "< DAC Sawtooth register,                                   Address offset: 0x5C"]
    pub STR2: u32,
    #[doc = "< DAC Sawtooth Mode register,                              Address offset: 0x60"]
    pub STMODR: u32,
}
#[doc = " @brief Debug MCU"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBGMCU_TypeDef {
    #[doc = "< MCU device ID code,                 Address offset: 0x00"]
    pub IDCODE: u32,
    #[doc = "< Debug MCU configuration register,   Address offset: 0x04"]
    pub CR: u32,
    #[doc = "< Debug MCU APB1 freeze register 1,   Address offset: 0x08"]
    pub APB1FZR1: u32,
    #[doc = "< Debug MCU APB1 freeze register 2,   Address offset: 0x0C"]
    pub APB1FZR2: u32,
    #[doc = "< Debug MCU APB2 freeze register,     Address offset: 0x10"]
    pub APB2FZ: u32,
}
#[doc = " @brief DMA Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_Channel_TypeDef {
    #[doc = "< DMA channel x configuration register"]
    pub CCR: u32,
    #[doc = "< DMA channel x number of data register"]
    pub CNDTR: u32,
    #[doc = "< DMA channel x peripheral address register"]
    pub CPAR: u32,
    #[doc = "< DMA channel x memory address register"]
    pub CMAR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_TypeDef {
    #[doc = "< DMA interrupt status register,                 Address offset: 0x00"]
    pub ISR: u32,
    #[doc = "< DMA interrupt flag clear register,             Address offset: 0x04"]
    pub IFCR: u32,
}
#[doc = " @brief DMA Multiplexer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_Channel_TypeDef {
    #[doc = "< DMA Multiplexer Channel x Control Register    Address offset: 0x0004 * (channel x)"]
    pub CCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_ChannelStatus_TypeDef {
    #[doc = "< DMA Channel Status Register                    Address offset: 0x0080"]
    pub CSR: u32,
    #[doc = "< DMA Channel Clear Flag Register                Address offset: 0x0084"]
    pub CFR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_RequestGen_TypeDef {
    #[doc = "< DMA Request Generator x Control Register     Address offset: 0x0100 + 0x0004 * (Req Gen x)"]
    pub RGCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_RequestGenStatus_TypeDef {
    #[doc = "< DMA Request Generator Status Register        Address offset: 0x0140"]
    pub RGSR: u32,
    #[doc = "< DMA Request Generator Clear Flag Register    Address offset: 0x0144"]
    pub RGCFR: u32,
}
#[doc = " @brief External Interrupt/Event Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_TypeDef {
    #[doc = "< EXTI Interrupt mask register 1,             Address offset: 0x00"]
    pub IMR1: u32,
    #[doc = "< EXTI Event mask register 1,                 Address offset: 0x04"]
    pub EMR1: u32,
    #[doc = "< EXTI Rising trigger selection register 1,   Address offset: 0x08"]
    pub RTSR1: u32,
    #[doc = "< EXTI Falling trigger selection register 1,  Address offset: 0x0C"]
    pub FTSR1: u32,
    #[doc = "< EXTI Software interrupt event register 1,   Address offset: 0x10"]
    pub SWIER1: u32,
    #[doc = "< EXTI Pending register 1,                    Address offset: 0x14"]
    pub PR1: u32,
    #[doc = "< Reserved, 0x18"]
    pub RESERVED1: u32,
    #[doc = "< Reserved, 0x1C"]
    pub RESERVED2: u32,
    #[doc = "< EXTI Interrupt mask register 2,             Address offset: 0x20"]
    pub IMR2: u32,
    #[doc = "< EXTI Event mask register 2,                 Address offset: 0x24"]
    pub EMR2: u32,
    #[doc = "< EXTI Rising trigger selection register 2,   Address offset: 0x28"]
    pub RTSR2: u32,
    #[doc = "< EXTI Falling trigger selection register 2,  Address offset: 0x2C"]
    pub FTSR2: u32,
    #[doc = "< EXTI Software interrupt event register 2,   Address offset: 0x30"]
    pub SWIER2: u32,
    #[doc = "< EXTI Pending register 2,                    Address offset: 0x34"]
    pub PR2: u32,
}
#[doc = " @brief FLASH Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_TypeDef {
    #[doc = "< FLASH access control register,            Address offset: 0x00"]
    pub ACR: u32,
    #[doc = "< FLASH power down key register,            Address offset: 0x04"]
    pub PDKEYR: u32,
    #[doc = "< FLASH key register,                       Address offset: 0x08"]
    pub KEYR: u32,
    #[doc = "< FLASH option key register,                Address offset: 0x0C"]
    pub OPTKEYR: u32,
    #[doc = "< FLASH status register,                    Address offset: 0x10"]
    pub SR: u32,
    #[doc = "< FLASH control register,                   Address offset: 0x14"]
    pub CR: u32,
    #[doc = "< FLASH ECC register,                       Address offset: 0x18"]
    pub ECCR: u32,
    #[doc = "< Reserved1,                                Address offset: 0x1C"]
    pub RESERVED1: u32,
    #[doc = "< FLASH option register,                    Address offset: 0x20"]
    pub OPTR: u32,
    #[doc = "< FLASH bank1 PCROP start address register, Address offset: 0x24"]
    pub PCROP1SR: u32,
    #[doc = "< FLASH bank1 PCROP end address register,   Address offset: 0x28"]
    pub PCROP1ER: u32,
    #[doc = "< FLASH bank1 WRP area A address register,  Address offset: 0x2C"]
    pub WRP1AR: u32,
    #[doc = "< FLASH bank1 WRP area B address register,  Address offset: 0x30"]
    pub WRP1BR: u32,
    #[doc = "< Reserved2,                                Address offset: 0x34"]
    pub RESERVED2: [u32; 15usize],
    #[doc = "< FLASH Securable memory register bank1,    Address offset: 0x70"]
    pub SEC1R: u32,
}
#[doc = " @brief FMAC"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMAC_TypeDef {
    #[doc = "< FMAC X1 Buffer Configuration register, Address offset: 0x00"]
    pub X1BUFCFG: u32,
    #[doc = "< FMAC X2 Buffer Configuration register, Address offset: 0x04"]
    pub X2BUFCFG: u32,
    #[doc = "< FMAC Y Buffer Configuration register,  Address offset: 0x08"]
    pub YBUFCFG: u32,
    #[doc = "< FMAC Parameter register,               Address offset: 0x0C"]
    pub PARAM: u32,
    #[doc = "< FMAC Control register,                 Address offset: 0x10"]
    pub CR: u32,
    #[doc = "< FMAC Status register,                  Address offset: 0x14"]
    pub SR: u32,
    #[doc = "< FMAC Write Data register,              Address offset: 0x18"]
    pub WDATA: u32,
    #[doc = "< FMAC Read Data register,               Address offset: 0x1C"]
    pub RDATA: u32,
}
#[doc = " @brief General Purpose I/O"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_TypeDef {
    #[doc = "< GPIO port mode register,               Address offset: 0x00"]
    pub MODER: u32,
    #[doc = "< GPIO port output type register,        Address offset: 0x04"]
    pub OTYPER: u32,
    #[doc = "< GPIO port output speed register,       Address offset: 0x08"]
    pub OSPEEDR: u32,
    #[doc = "< GPIO port pull-up/pull-down register,  Address offset: 0x0C"]
    pub PUPDR: u32,
    #[doc = "< GPIO port input data register,         Address offset: 0x10"]
    pub IDR: u32,
    #[doc = "< GPIO port output data register,        Address offset: 0x14"]
    pub ODR: u32,
    #[doc = "< GPIO port bit set/reset  register,     Address offset: 0x18"]
    pub BSRR: u32,
    #[doc = "< GPIO port configuration lock register, Address offset: 0x1C"]
    pub LCKR: u32,
    #[doc = "< GPIO alternate function registers,     Address offset: 0x20-0x24"]
    pub AFR: [u32; 2usize],
    #[doc = "< GPIO Bit Reset register,               Address offset: 0x28"]
    pub BRR: u32,
}
#[doc = " @brief Inter-integrated Circuit Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2C_TypeDef {
    #[doc = "< I2C Control register 1,            Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< I2C Control register 2,            Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< I2C Own address 1 register,        Address offset: 0x08"]
    pub OAR1: u32,
    #[doc = "< I2C Own address 2 register,        Address offset: 0x0C"]
    pub OAR2: u32,
    #[doc = "< I2C Timing register,               Address offset: 0x10"]
    pub TIMINGR: u32,
    #[doc = "< I2C Timeout register,              Address offset: 0x14"]
    pub TIMEOUTR: u32,
    #[doc = "< I2C Interrupt and status register, Address offset: 0x18"]
    pub ISR: u32,
    #[doc = "< I2C Interrupt clear register,      Address offset: 0x1C"]
    pub ICR: u32,
    #[doc = "< I2C PEC register,                  Address offset: 0x20"]
    pub PECR: u32,
    #[doc = "< I2C Receive data register,         Address offset: 0x24"]
    pub RXDR: u32,
    #[doc = "< I2C Transmit data register,        Address offset: 0x28"]
    pub TXDR: u32,
}
#[doc = " @brief Independent WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWDG_TypeDef {
    #[doc = "< IWDG Key register,       Address offset: 0x00"]
    pub KR: u32,
    #[doc = "< IWDG Prescaler register, Address offset: 0x04"]
    pub PR: u32,
    #[doc = "< IWDG Reload register,    Address offset: 0x08"]
    pub RLR: u32,
    #[doc = "< IWDG Status register,    Address offset: 0x0C"]
    pub SR: u32,
    #[doc = "< IWDG Window register,    Address offset: 0x10"]
    pub WINR: u32,
}
#[doc = " @brief LPTIMER"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LPTIM_TypeDef {
    #[doc = "< LPTIM Interrupt and Status register,                Address offset: 0x00"]
    pub ISR: u32,
    #[doc = "< LPTIM Interrupt Clear register,                     Address offset: 0x04"]
    pub ICR: u32,
    #[doc = "< LPTIM Interrupt Enable register,                    Address offset: 0x08"]
    pub IER: u32,
    #[doc = "< LPTIM Configuration register,                       Address offset: 0x0C"]
    pub CFGR: u32,
    #[doc = "< LPTIM Control register,                             Address offset: 0x10"]
    pub CR: u32,
    #[doc = "< LPTIM Compare register,                             Address offset: 0x14"]
    pub CMP: u32,
    #[doc = "< LPTIM Autoreload register,                          Address offset: 0x18"]
    pub ARR: u32,
    #[doc = "< LPTIM Counter register,                             Address offset: 0x1C"]
    pub CNT: u32,
    #[doc = "< LPTIM Option register,                              Address offset: 0x20"]
    pub OR: u32,
}
#[doc = " @brief Operational Amplifier (OPAMP)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OPAMP_TypeDef {
    #[doc = "< OPAMP control/status register,                     Address offset: 0x00"]
    pub CSR: u32,
    #[doc = "< OPAMP offset trimming register for normal mode,    Address offset: 0x04"]
    pub RESERVED: [u32; 5usize],
    #[doc = "< OPAMP timer controlled mux mode register,          Address offset: 0x18"]
    pub TCMR: u32,
}
#[doc = " @brief Power Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWR_TypeDef {
    #[doc = "< PWR power control register 1,        Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< PWR power control register 2,        Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< PWR power control register 3,        Address offset: 0x08"]
    pub CR3: u32,
    #[doc = "< PWR power control register 4,        Address offset: 0x0C"]
    pub CR4: u32,
    #[doc = "< PWR power status register 1,         Address offset: 0x10"]
    pub SR1: u32,
    #[doc = "< PWR power status register 2,         Address offset: 0x14"]
    pub SR2: u32,
    #[doc = "< PWR power status reset register,     Address offset: 0x18"]
    pub SCR: u32,
    #[doc = "< Reserved,                            Address offset: 0x1C"]
    pub RESERVED: u32,
    #[doc = "< Pull_up control register of portA,   Address offset: 0x20"]
    pub PUCRA: u32,
    #[doc = "< Pull_Down control register of portA, Address offset: 0x24"]
    pub PDCRA: u32,
    #[doc = "< Pull_up control register of portB,   Address offset: 0x28"]
    pub PUCRB: u32,
    #[doc = "< Pull_Down control register of portB, Address offset: 0x2C"]
    pub PDCRB: u32,
    #[doc = "< Pull_up control register of portC,   Address offset: 0x30"]
    pub PUCRC: u32,
    #[doc = "< Pull_Down control register of portC, Address offset: 0x34"]
    pub PDCRC: u32,
    #[doc = "< Pull_up control register of portD,   Address offset: 0x38"]
    pub PUCRD: u32,
    #[doc = "< Pull_Down control register of portD, Address offset: 0x3C"]
    pub PDCRD: u32,
    #[doc = "< Pull_up control register of portE,   Address offset: 0x40"]
    pub PUCRE: u32,
    #[doc = "< Pull_Down control register of portE, Address offset: 0x44"]
    pub PDCRE: u32,
    #[doc = "< Pull_up control register of portF,   Address offset: 0x48"]
    pub PUCRF: u32,
    #[doc = "< Pull_Down control register of portF, Address offset: 0x4C"]
    pub PDCRF: u32,
    #[doc = "< Pull_up control register of portG,   Address offset: 0x50"]
    pub PUCRG: u32,
    #[doc = "< Pull_Down control register of portG, Address offset: 0x54"]
    pub PDCRG: u32,
    #[doc = "< Reserved                             Address offset: 0x58 - 0x7C"]
    pub RESERVED1: [u32; 10usize],
    #[doc = "< PWR power control register 5,        Address offset: 0x80"]
    pub CR5: u32,
}
#[doc = " @brief Reset and Clock Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_TypeDef {
    #[doc = "< RCC clock control register,                                              Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< RCC internal clock sources calibration register,                         Address offset: 0x04"]
    pub ICSCR: u32,
    #[doc = "< RCC clock configuration register,                                        Address offset: 0x08"]
    pub CFGR: u32,
    #[doc = "< RCC system PLL configuration register,                                   Address offset: 0x0C"]
    pub PLLCFGR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x10"]
    pub RESERVED0: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x14"]
    pub RESERVED1: u32,
    #[doc = "< RCC clock interrupt enable register,                                     Address offset: 0x18"]
    pub CIER: u32,
    #[doc = "< RCC clock interrupt flag register,                                       Address offset: 0x1C"]
    pub CIFR: u32,
    #[doc = "< RCC clock interrupt clear register,                                      Address offset: 0x20"]
    pub CICR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x24"]
    pub RESERVED2: u32,
    #[doc = "< RCC AHB1 peripheral reset register,                                      Address offset: 0x28"]
    pub AHB1RSTR: u32,
    #[doc = "< RCC AHB2 peripheral reset register,                                      Address offset: 0x2C"]
    pub AHB2RSTR: u32,
    #[doc = "< RCC AHB3 peripheral reset register,                                      Address offset: 0x30"]
    pub AHB3RSTR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x34"]
    pub RESERVED3: u32,
    #[doc = "< RCC APB1 peripheral reset register 1,                                    Address offset: 0x38"]
    pub APB1RSTR1: u32,
    #[doc = "< RCC APB1 peripheral reset register 2,                                    Address offset: 0x3C"]
    pub APB1RSTR2: u32,
    #[doc = "< RCC APB2 peripheral reset register,                                      Address offset: 0x40"]
    pub APB2RSTR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x44"]
    pub RESERVED4: u32,
    #[doc = "< RCC AHB1 peripheral clocks enable register,                              Address offset: 0x48"]
    pub AHB1ENR: u32,
    #[doc = "< RCC AHB2 peripheral clocks enable register,                              Address offset: 0x4C"]
    pub AHB2ENR: u32,
    #[doc = "< RCC AHB3 peripheral clocks enable register,                              Address offset: 0x50"]
    pub AHB3ENR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x54"]
    pub RESERVED5: u32,
    #[doc = "< RCC APB1 peripheral clocks enable register 1,                            Address offset: 0x58"]
    pub APB1ENR1: u32,
    #[doc = "< RCC APB1 peripheral clocks enable register 2,                            Address offset: 0x5C"]
    pub APB1ENR2: u32,
    #[doc = "< RCC APB2 peripheral clocks enable register,                              Address offset: 0x60"]
    pub APB2ENR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x64"]
    pub RESERVED6: u32,
    #[doc = "< RCC AHB1 peripheral clocks enable in sleep and stop modes register,      Address offset: 0x68"]
    pub AHB1SMENR: u32,
    #[doc = "< RCC AHB2 peripheral clocks enable in sleep and stop modes register,      Address offset: 0x6C"]
    pub AHB2SMENR: u32,
    #[doc = "< RCC AHB3 peripheral clocks enable in sleep and stop modes register,      Address offset: 0x70"]
    pub AHB3SMENR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x74"]
    pub RESERVED7: u32,
    #[doc = "< RCC APB1 peripheral clocks enable in sleep mode and stop modes register 1, Address offset: 0x78"]
    pub APB1SMENR1: u32,
    #[doc = "< RCC APB1 peripheral clocks enable in sleep mode and stop modes register 2, Address offset: 0x7C"]
    pub APB1SMENR2: u32,
    #[doc = "< RCC APB2 peripheral clocks enable in sleep mode and stop modes register, Address offset: 0x80"]
    pub APB2SMENR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x84"]
    pub RESERVED8: u32,
    #[doc = "< RCC peripherals independent clock configuration register,                Address offset: 0x88"]
    pub CCIPR: u32,
    #[doc = "< Reserved,                                                                Address offset: 0x8C"]
    pub RESERVED9: u32,
    #[doc = "< RCC backup domain control register,                                      Address offset: 0x90"]
    pub BDCR: u32,
    #[doc = "< RCC clock control & status register,                                     Address offset: 0x94"]
    pub CSR: u32,
    #[doc = "< RCC clock recovery RC register,                                          Address offset: 0x98"]
    pub CRRCR: u32,
    #[doc = "< RCC peripherals independent clock configuration register 2,              Address offset: 0x9C"]
    pub CCIPR2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_TypeDef {
    #[doc = "< RTC time register,                                         Address offset: 0x00"]
    pub TR: u32,
    #[doc = "< RTC date register,                                         Address offset: 0x04"]
    pub DR: u32,
    #[doc = "< RTC sub second register,                                   Address offset: 0x08"]
    pub SSR: u32,
    #[doc = "< RTC initialization control and status register,            Address offset: 0x0C"]
    pub ICSR: u32,
    #[doc = "< RTC prescaler register,                                    Address offset: 0x10"]
    pub PRER: u32,
    #[doc = "< RTC wakeup timer register,                                 Address offset: 0x14"]
    pub WUTR: u32,
    #[doc = "< RTC control register,                                      Address offset: 0x18"]
    pub CR: u32,
    #[doc = "< Reserved                                                   Address offset: 0x1C"]
    pub RESERVED0: u32,
    #[doc = "< Reserved                                                   Address offset: 0x20"]
    pub RESERVED1: u32,
    #[doc = "< RTC write protection register,                             Address offset: 0x24"]
    pub WPR: u32,
    #[doc = "< RTC calibration register,                                  Address offset: 0x28"]
    pub CALR: u32,
    #[doc = "< RTC shift control register,                                Address offset: 0x2C"]
    pub SHIFTR: u32,
    #[doc = "< RTC time stamp time register,                              Address offset: 0x30"]
    pub TSTR: u32,
    #[doc = "< RTC time stamp date register,                              Address offset: 0x34"]
    pub TSDR: u32,
    #[doc = "< RTC time-stamp sub second register,                        Address offset: 0x38"]
    pub TSSSR: u32,
    #[doc = "< Reserved                                                   Address offset: 0x3C"]
    pub RESERVED2: u32,
    #[doc = "< RTC alarm A register,                                      Address offset: 0x40"]
    pub ALRMAR: u32,
    #[doc = "< RTC alarm A sub second register,                           Address offset: 0x44"]
    pub ALRMASSR: u32,
    #[doc = "< RTC alarm B register,                                      Address offset: 0x48"]
    pub ALRMBR: u32,
    #[doc = "< RTC alarm B sub second register,                           Address offset: 0x4C"]
    pub ALRMBSSR: u32,
    #[doc = "< RTC Status register,                                       Address offset: 0x50"]
    pub SR: u32,
    #[doc = "< RTC Masked Interrupt Status register,                      Address offset: 0x54"]
    pub MISR: u32,
    #[doc = "< Reserved                                                   Address offset: 0x58"]
    pub RESERVED3: u32,
    #[doc = "< RTC Status Clear register,                                 Address offset: 0x5C"]
    pub SCR: u32,
}
#[doc = " @brief Tamper and backup registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAMP_TypeDef {
    #[doc = "< TAMP configuration register 1,          Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< TAMP configuration register 2,          Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< no configuration register 3,            Address offset: 0x08"]
    pub RESERVED0: u32,
    #[doc = "< TAMP filter control register,           Address offset: 0x0C"]
    pub FLTCR: u32,
    #[doc = "< Reserved                                Address offset: 0x10 - 0x24"]
    pub RESERVED1: [u32; 6usize],
    #[doc = "< Reserved                                Address offset: 0x28"]
    pub RESERVED2: u32,
    #[doc = "< TAMP Interrupt enable register,         Address offset: 0x2C"]
    pub IER: u32,
    #[doc = "< TAMP Status register,                   Address offset: 0x30"]
    pub SR: u32,
    #[doc = "< TAMP Masked Interrupt Status register   Address offset: 0x34"]
    pub MISR: u32,
    #[doc = "< Reserved                                Address offset: 0x38"]
    pub RESERVED3: u32,
    #[doc = "< TAMP Status clear register,             Address offset: 0x3C"]
    pub SCR: u32,
    #[doc = "< Reserved                                Address offset: 0x040 - 0xFC"]
    pub RESERVED4: [u32; 48usize],
    #[doc = "< TAMP backup register 0,                 Address offset: 0x100"]
    pub BKP0R: u32,
    #[doc = "< TAMP backup register 1,                 Address offset: 0x104"]
    pub BKP1R: u32,
    #[doc = "< TAMP backup register 2,                 Address offset: 0x108"]
    pub BKP2R: u32,
    #[doc = "< TAMP backup register 3,                 Address offset: 0x10C"]
    pub BKP3R: u32,
    #[doc = "< TAMP backup register 4,                 Address offset: 0x110"]
    pub BKP4R: u32,
    #[doc = "< TAMP backup register 5,                 Address offset: 0x114"]
    pub BKP5R: u32,
    #[doc = "< TAMP backup register 6,                 Address offset: 0x118"]
    pub BKP6R: u32,
    #[doc = "< TAMP backup register 7,                 Address offset: 0x11C"]
    pub BKP7R: u32,
    #[doc = "< TAMP backup register 8,                 Address offset: 0x120"]
    pub BKP8R: u32,
    #[doc = "< TAMP backup register 9,                 Address offset: 0x124"]
    pub BKP9R: u32,
    #[doc = "< TAMP backup register 10,                Address offset: 0x128"]
    pub BKP10R: u32,
    #[doc = "< TAMP backup register 11,                Address offset: 0x12C"]
    pub BKP11R: u32,
    #[doc = "< TAMP backup register 12,                Address offset: 0x130"]
    pub BKP12R: u32,
    #[doc = "< TAMP backup register 13,                Address offset: 0x134"]
    pub BKP13R: u32,
    #[doc = "< TAMP backup register 14,                Address offset: 0x138"]
    pub BKP14R: u32,
    #[doc = "< TAMP backup register 15,                Address offset: 0x13C"]
    pub BKP15R: u32,
}
#[doc = " @brief Serial Audio Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAI_TypeDef {
    #[doc = "< SAI global configuration register,        Address offset: 0x00"]
    pub GCR: u32,
    #[doc = "< Reserved,                         Address offset: 0x04 to 0x40"]
    pub RESERVED: [u32; 16usize],
    #[doc = "< SAI PDM control register,                 Address offset: 0x44"]
    pub PDMCR: u32,
    #[doc = "< SAI PDM delay register,                   Address offset: 0x48"]
    pub PDMDLY: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAI_Block_TypeDef {
    #[doc = "< SAI block x configuration register 1,     Address offset: 0x04"]
    pub CR1: u32,
    #[doc = "< SAI block x configuration register 2,     Address offset: 0x08"]
    pub CR2: u32,
    #[doc = "< SAI block x frame configuration register, Address offset: 0x0C"]
    pub FRCR: u32,
    #[doc = "< SAI block x slot register,                Address offset: 0x10"]
    pub SLOTR: u32,
    #[doc = "< SAI block x interrupt mask register,      Address offset: 0x14"]
    pub IMR: u32,
    #[doc = "< SAI block x status register,              Address offset: 0x18"]
    pub SR: u32,
    #[doc = "< SAI block x clear flag register,          Address offset: 0x1C"]
    pub CLRFR: u32,
    #[doc = "< SAI block x data register,                Address offset: 0x20"]
    pub DR: u32,
}
#[doc = " @brief Serial Peripheral Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPI_TypeDef {
    #[doc = "< SPI Control register 1,                              Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< SPI Control register 2,                              Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< SPI Status register,                                 Address offset: 0x08"]
    pub SR: u32,
    #[doc = "< SPI data register,                                  Address offset: 0x0C"]
    pub DR: u32,
    #[doc = "< SPI CRC polynomial register,                         Address offset: 0x10"]
    pub CRCPR: u32,
    #[doc = "< SPI Rx CRC register,                                 Address offset: 0x14"]
    pub RXCRCR: u32,
    #[doc = "< SPI Tx CRC register,                                 Address offset: 0x18"]
    pub TXCRCR: u32,
    #[doc = "< SPI_I2S configuration register,                      Address offset: 0x1C"]
    pub I2SCFGR: u32,
    #[doc = "< SPI_I2S prescaler register,                          Address offset: 0x20"]
    pub I2SPR: u32,
}
#[doc = " @brief System configuration controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSCFG_TypeDef {
    #[doc = "< SYSCFG memory remap register,                        Address offset: 0x00"]
    pub MEMRMP: u32,
    #[doc = "< SYSCFG configuration register 1,                     Address offset: 0x04"]
    pub CFGR1: u32,
    #[doc = "< SYSCFG external interrupt configuration registers,   Address offset: 0x08-0x14"]
    pub EXTICR: [u32; 4usize],
    #[doc = "< SYSCFG CCMSRAM control and status register,          Address offset: 0x18"]
    pub SCSR: u32,
    #[doc = "< SYSCFG configuration register 2,                     Address offset: 0x1C"]
    pub CFGR2: u32,
    #[doc = "< SYSCFG CCMSRAM write protection register,            Address offset: 0x20"]
    pub SWPR: u32,
    #[doc = "< SYSCFG CCMSRAM Key Register,                         Address offset: 0x24"]
    pub SKR: u32,
}
#[doc = " @brief TIM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_TypeDef {
    #[doc = "< TIM control register 1,                   Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< TIM control register 2,                   Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< TIM slave mode control register,          Address offset: 0x08"]
    pub SMCR: u32,
    #[doc = "< TIM DMA/interrupt enable register,        Address offset: 0x0C"]
    pub DIER: u32,
    #[doc = "< TIM status register,                      Address offset: 0x10"]
    pub SR: u32,
    #[doc = "< TIM event generation register,            Address offset: 0x14"]
    pub EGR: u32,
    #[doc = "< TIM capture/compare mode register 1,      Address offset: 0x18"]
    pub CCMR1: u32,
    #[doc = "< TIM capture/compare mode register 2,      Address offset: 0x1C"]
    pub CCMR2: u32,
    #[doc = "< TIM capture/compare enable register,      Address offset: 0x20"]
    pub CCER: u32,
    #[doc = "< TIM counter register,                     Address offset: 0x24"]
    pub CNT: u32,
    #[doc = "< TIM prescaler,                            Address offset: 0x28"]
    pub PSC: u32,
    #[doc = "< TIM auto-reload register,                 Address offset: 0x2C"]
    pub ARR: u32,
    #[doc = "< TIM repetition counter register,          Address offset: 0x30"]
    pub RCR: u32,
    #[doc = "< TIM capture/compare register 1,           Address offset: 0x34"]
    pub CCR1: u32,
    #[doc = "< TIM capture/compare register 2,           Address offset: 0x38"]
    pub CCR2: u32,
    #[doc = "< TIM capture/compare register 3,           Address offset: 0x3C"]
    pub CCR3: u32,
    #[doc = "< TIM capture/compare register 4,           Address offset: 0x40"]
    pub CCR4: u32,
    #[doc = "< TIM break and dead-time register,         Address offset: 0x44"]
    pub BDTR: u32,
    #[doc = "< TIM capture/compare register 5,           Address offset: 0x48"]
    pub CCR5: u32,
    #[doc = "< TIM capture/compare register 6,           Address offset: 0x4C"]
    pub CCR6: u32,
    #[doc = "< TIM capture/compare mode register 3,      Address offset: 0x50"]
    pub CCMR3: u32,
    #[doc = "< TIM deadtime register 2,                  Address offset: 0x54"]
    pub DTR2: u32,
    #[doc = "< TIM encoder control register,             Address offset: 0x58"]
    pub ECR: u32,
    #[doc = "< TIM Input Selection register,             Address offset: 0x5C"]
    pub TISEL: u32,
    #[doc = "< TIM alternate function option register 1, Address offset: 0x60"]
    pub AF1: u32,
    #[doc = "< TIM alternate function option register 2, Address offset: 0x64"]
    pub AF2: u32,
    #[doc = "< TIM option register,                      Address offset: 0x68"]
    pub OR: u32,
    #[doc = "< Reserved,                               Address offset: 0x6C"]
    pub RESERVED0: [u32; 220usize],
    #[doc = "< TIM DMA control register,                 Address offset: 0x3DC"]
    pub DCR: u32,
    #[doc = "< TIM DMA address for full transfer,        Address offset: 0x3E0"]
    pub DMAR: u32,
}
#[doc = " @brief Universal Synchronous Asynchronous Receiver Transmitter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USART_TypeDef {
    #[doc = "< USART Control register 1,                 Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< USART Control register 2,                 Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< USART Control register 3,                 Address offset: 0x08"]
    pub CR3: u32,
    #[doc = "< USART Baud rate register,                 Address offset: 0x0C"]
    pub BRR: u32,
    #[doc = "< USART Guard time and prescaler register,  Address offset: 0x10"]
    pub GTPR: u32,
    #[doc = "< USART Receiver Timeout register,          Address offset: 0x14"]
    pub RTOR: u32,
    #[doc = "< USART Request register,                   Address offset: 0x18"]
    pub RQR: u32,
    #[doc = "< USART Interrupt and status register,      Address offset: 0x1C"]
    pub ISR: u32,
    #[doc = "< USART Interrupt flag Clear register,      Address offset: 0x20"]
    pub ICR: u32,
    #[doc = "< USART Receive Data register,              Address offset: 0x24"]
    pub RDR: u32,
    #[doc = "< USART Transmit Data register,             Address offset: 0x28"]
    pub TDR: u32,
    #[doc = "< USART Prescaler register,                 Address offset: 0x2C"]
    pub PRESC: u32,
}
#[doc = " @brief Universal Serial Bus Full Speed Device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_TypeDef {
    #[doc = "< USB Endpoint 0 register,                Address offset: 0x00"]
    pub EP0R: u16,
    #[doc = "< Reserved"]
    pub RESERVED0: u16,
    #[doc = "< USB Endpoint 1 register,                Address offset: 0x04"]
    pub EP1R: u16,
    #[doc = "< Reserved"]
    pub RESERVED1: u16,
    #[doc = "< USB Endpoint 2 register,                Address offset: 0x08"]
    pub EP2R: u16,
    #[doc = "< Reserved"]
    pub RESERVED2: u16,
    #[doc = "< USB Endpoint 3 register,                Address offset: 0x0C"]
    pub EP3R: u16,
    #[doc = "< Reserved"]
    pub RESERVED3: u16,
    #[doc = "< USB Endpoint 4 register,                Address offset: 0x10"]
    pub EP4R: u16,
    #[doc = "< Reserved"]
    pub RESERVED4: u16,
    #[doc = "< USB Endpoint 5 register,                Address offset: 0x14"]
    pub EP5R: u16,
    #[doc = "< Reserved"]
    pub RESERVED5: u16,
    #[doc = "< USB Endpoint 6 register,                Address offset: 0x18"]
    pub EP6R: u16,
    #[doc = "< Reserved"]
    pub RESERVED6: u16,
    #[doc = "< USB Endpoint 7 register,                Address offset: 0x1C"]
    pub EP7R: u16,
    #[doc = "< Reserved"]
    pub RESERVED7: [u16; 17usize],
    #[doc = "< Control register,                       Address offset: 0x40"]
    pub CNTR: u16,
    #[doc = "< Reserved"]
    pub RESERVED8: u16,
    #[doc = "< Interrupt status register,              Address offset: 0x44"]
    pub ISTR: u16,
    #[doc = "< Reserved"]
    pub RESERVED9: u16,
    #[doc = "< Frame number register,                  Address offset: 0x48"]
    pub FNR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDA: u16,
    #[doc = "< Device address register,                Address offset: 0x4C"]
    pub DADDR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDB: u16,
    #[doc = "< Buffer Table address register,          Address offset: 0x50"]
    pub BTABLE: u16,
    #[doc = "< Reserved"]
    pub RESERVEDC: u16,
    #[doc = "< LPM Control and Status register,        Address offset: 0x54"]
    pub LPMCSR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDD: u16,
    #[doc = "< Battery Charging detector register,     Address offset: 0x58"]
    pub BCDR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDE: u16,
}
#[doc = " @brief VREFBUF"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREFBUF_TypeDef {
    #[doc = "< VREFBUF control and status register,         Address offset: 0x00"]
    pub CSR: u32,
    #[doc = "< VREFBUF calibration and control register,    Address offset: 0x04"]
    pub CCR: u32,
}
#[doc = " @brief Window WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WWDG_TypeDef {
    #[doc = "< WWDG Control register,       Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< WWDG Configuration register, Address offset: 0x04"]
    pub CFR: u32,
    #[doc = "< WWDG Status register,        Address offset: 0x08"]
    pub SR: u32,
}
#[doc = " @brief RNG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RNG_TypeDef {
    #[doc = "< RNG control register, Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< RNG status register,  Address offset: 0x04"]
    pub SR: u32,
    #[doc = "< RNG data register,    Address offset: 0x08"]
    pub DR: u32,
}
#[doc = " @brief CORDIC"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CORDIC_TypeDef {
    #[doc = "< CORDIC control and status register,        Address offset: 0x00"]
    pub CSR: u32,
    #[doc = "< CORDIC argument register,                  Address offset: 0x04"]
    pub WDATA: u32,
    #[doc = "< CORDIC result register,                    Address offset: 0x08"]
    pub RDATA: u32,
}
#[doc = " @brief UCPD"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UCPD_TypeDef {
    #[doc = "< UCPD configuration register 1,             Address offset: 0x00"]
    pub CFG1: u32,
    #[doc = "< UCPD configuration register 2,             Address offset: 0x04"]
    pub CFG2: u32,
    #[doc = "< UCPD reserved register,                    Address offset: 0x08"]
    pub RESERVED0: u32,
    #[doc = "< UCPD control register,                     Address offset: 0x0C"]
    pub CR: u32,
    #[doc = "< UCPD interrupt mask register,              Address offset: 0x10"]
    pub IMR: u32,
    #[doc = "< UCPD status register,                      Address offset: 0x14"]
    pub SR: u32,
    #[doc = "< UCPD interrupt flag clear register         Address offset: 0x18"]
    pub ICR: u32,
    #[doc = "< UCPD Tx ordered set type register,         Address offset: 0x1C"]
    pub TX_ORDSET: u32,
    #[doc = "< UCPD Tx payload size register,             Address offset: 0x20"]
    pub TX_PAYSZ: u32,
    #[doc = "< UCPD Tx data register,                     Address offset: 0x24"]
    pub TXDR: u32,
    #[doc = "< UCPD Rx ordered set type register,         Address offset: 0x28"]
    pub RX_ORDSET: u32,
    #[doc = "< UCPD Rx payload size register,             Address offset: 0x2C"]
    pub RX_PAYSZ: u32,
    #[doc = "< UCPD Rx data register,                     Address offset: 0x30"]
    pub RXDR: u32,
    #[doc = "< UCPD Rx ordered set extension 1 register,  Address offset: 0x34"]
    pub RX_ORDEXT1: u32,
    #[doc = "< UCPD Rx ordered set extension 2 register,  Address offset: 0x38"]
    pub RX_ORDEXT2: u32,
}
pub const FlagStatus_RESET: FlagStatus = 0;
pub const FlagStatus_SET: FlagStatus = 1;
#[doc = " @addtogroup Exported_types\n @{"]
pub type FlagStatus = cty::c_uint;
#[doc = " @addtogroup Exported_types\n @{"]
pub use self::FlagStatus as ITStatus;
pub const FunctionalState_DISABLE: FunctionalState = 0;
pub const FunctionalState_ENABLE: FunctionalState = 1;
pub type FunctionalState = cty::c_uint;
pub const ErrorStatus_SUCCESS: ErrorStatus = 0;
pub const ErrorStatus_ERROR: ErrorStatus = 1;
pub type ErrorStatus = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
pub const HAL_StatusTypeDef_HAL_OK: HAL_StatusTypeDef = 0;
pub const HAL_StatusTypeDef_HAL_ERROR: HAL_StatusTypeDef = 1;
pub const HAL_StatusTypeDef_HAL_BUSY: HAL_StatusTypeDef = 2;
pub const HAL_StatusTypeDef_HAL_TIMEOUT: HAL_StatusTypeDef = 3;
#[doc = " @brief  HAL Status structures definition"]
pub type HAL_StatusTypeDef = cty::c_uint;
pub const HAL_LockTypeDef_HAL_UNLOCKED: HAL_LockTypeDef = 0;
pub const HAL_LockTypeDef_HAL_LOCKED: HAL_LockTypeDef = 1;
#[doc = " @brief  HAL Lock structures definition"]
pub type HAL_LockTypeDef = cty::c_uint;
#[doc = " @brief  RCC PLL configuration structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_PLLInitTypeDef {
    #[doc = "< The new state of the PLL.\nThis parameter can be a value of @ref RCC_PLL_Config"]
    pub PLLState: u32,
    #[doc = "< RCC_PLLSource: PLL entry clock source.\nThis parameter must be a value of @ref RCC_PLL_Clock_Source"]
    pub PLLSource: u32,
    #[doc = "< PLLM: Division factor for PLL VCO input clock.\nThis parameter must be a value of @ref RCC_PLLM_Clock_Divider"]
    pub PLLM: u32,
    #[doc = "< PLLN: Multiplication factor for PLL VCO output clock.\nThis parameter must be a number between Min_Data = 8 and Max_Data = 127"]
    pub PLLN: u32,
    #[doc = "< PLLP: Division factor for ADC clock.\nThis parameter must be a value of @ref RCC_PLLP_Clock_Divider"]
    pub PLLP: u32,
    #[doc = "< PLLQ: Division factor for SAI, I2S, USB, FDCAN and QUADSPI clocks.\nThis parameter must be a value of @ref RCC_PLLQ_Clock_Divider"]
    pub PLLQ: u32,
    #[doc = "< PLLR: Division for the main system clock.\nUser have to set the PLLR parameter correctly to not exceed max frequency 170MHZ.\nThis parameter must be a value of @ref RCC_PLLR_Clock_Divider"]
    pub PLLR: u32,
}
#[doc = " @brief  RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) configuration structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_OscInitTypeDef {
    #[doc = "< The oscillators to be configured.\nThis parameter can be a value of @ref RCC_Oscillator_Type"]
    pub OscillatorType: u32,
    #[doc = "< The new state of the HSE.\nThis parameter can be a value of @ref RCC_HSE_Config"]
    pub HSEState: u32,
    #[doc = "< The new state of the LSE.\nThis parameter can be a value of @ref RCC_LSE_Config"]
    pub LSEState: u32,
    #[doc = "< The new state of the HSI.\nThis parameter can be a value of @ref RCC_HSI_Config"]
    pub HSIState: u32,
    #[doc = "< The calibration trimming value (default is RCC_HSICALIBRATION_DEFAULT).\nThis parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF"]
    pub HSICalibrationValue: u32,
    #[doc = "< The new state of the LSI.\nThis parameter can be a value of @ref RCC_LSI_Config"]
    pub LSIState: u32,
    #[doc = "< The new state of the HSI48.\nThis parameter can be a value of @ref RCC_HSI48_Config"]
    pub HSI48State: u32,
    #[doc = "< Main PLL structure parameters"]
    pub PLL: RCC_PLLInitTypeDef,
}
#[doc = " @brief  RCC System, AHB and APB busses clock configuration structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_ClkInitTypeDef {
    #[doc = "< The clock to be configured.\nThis parameter can be a value of @ref RCC_System_Clock_Type"]
    pub ClockType: u32,
    #[doc = "< The clock source used as system clock (SYSCLK).\nThis parameter can be a value of @ref RCC_System_Clock_Source"]
    pub SYSCLKSource: u32,
    #[doc = "< The AHB clock (HCLK) divider. This clock is derived from the system clock (SYSCLK).\nThis parameter can be a value of @ref RCC_AHB_Clock_Source"]
    pub AHBCLKDivider: u32,
    #[doc = "< The APB1 clock (PCLK1) divider. This clock is derived from the AHB clock (HCLK).\nThis parameter can be a value of @ref RCC_APB1_APB2_Clock_Source"]
    pub APB1CLKDivider: u32,
    #[doc = "< The APB2 clock (PCLK2) divider. This clock is derived from the AHB clock (HCLK).\nThis parameter can be a value of @ref RCC_APB1_APB2_Clock_Source"]
    pub APB2CLKDivider: u32,
}
#[doc = " @brief  RCC extended clocks structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_PeriphCLKInitTypeDef {
    #[doc = "< The Extended Clock to be configured.\nThis parameter can be a value of @ref RCCEx_Periph_Clock_Selection"]
    pub PeriphClockSelection: u32,
    #[doc = "< Specifies USART1 clock source.\nThis parameter can be a value of @ref RCCEx_USART1_Clock_Source"]
    pub Usart1ClockSelection: u32,
    #[doc = "< Specifies USART2 clock source.\nThis parameter can be a value of @ref RCCEx_USART2_Clock_Source"]
    pub Usart2ClockSelection: u32,
    #[doc = "< Specifies USART3 clock source.\nThis parameter can be a value of @ref RCCEx_USART3_Clock_Source"]
    pub Usart3ClockSelection: u32,
    #[doc = "< Specifies UART4 clock source.\nThis parameter can be a value of @ref RCCEx_UART4_Clock_Source"]
    pub Uart4ClockSelection: u32,
    #[doc = "< Specifies LPUART1 clock source.\nThis parameter can be a value of @ref RCCEx_LPUART1_Clock_Source"]
    pub Lpuart1ClockSelection: u32,
    #[doc = "< Specifies I2C1 clock source.\nThis parameter can be a value of @ref RCCEx_I2C1_Clock_Source"]
    pub I2c1ClockSelection: u32,
    #[doc = "< Specifies I2C2 clock source.\nThis parameter can be a value of @ref RCCEx_I2C2_Clock_Source"]
    pub I2c2ClockSelection: u32,
    #[doc = "< Specifies I2C3 clock source.\nThis parameter can be a value of @ref RCCEx_I2C3_Clock_Source"]
    pub I2c3ClockSelection: u32,
    #[doc = "< Specifies LPTIM1 clock source.\nThis parameter can be a value of @ref RCCEx_LPTIM1_Clock_Source"]
    pub Lptim1ClockSelection: u32,
    #[doc = "< Specifies SAI1 clock source.\nThis parameter can be a value of @ref RCCEx_SAI1_Clock_Source"]
    pub Sai1ClockSelection: u32,
    #[doc = "< Specifies I2S clock source.\nThis parameter can be a value of @ref RCCEx_I2S_Clock_Source"]
    pub I2sClockSelection: u32,
    #[doc = "< Specifies FDCAN clock source.\nThis parameter can be a value of @ref RCCEx_FDCAN_Clock_Source"]
    pub FdcanClockSelection: u32,
    #[doc = "< Specifies USB clock source (warning: same source for RNG).\nThis parameter can be a value of @ref RCCEx_USB_Clock_Source"]
    pub UsbClockSelection: u32,
    #[doc = "< Specifies RNG clock source (warning: same source for USB).\nThis parameter can be a value of @ref RCCEx_RNG_Clock_Source"]
    pub RngClockSelection: u32,
    #[doc = "< Specifies ADC12 interface clock source.\nThis parameter can be a value of @ref RCCEx_ADC12_Clock_Source"]
    pub Adc12ClockSelection: u32,
    #[doc = "< Specifies RTC clock source.\nThis parameter can be a value of @ref RCC_RTC_Clock_Source"]
    pub RTCClockSelection: u32,
}
#[doc = " @brief RCC_CRS Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_CRSInitTypeDef {
    #[doc = "< Specifies the division factor of the SYNC signal.\nThis parameter can be a value of @ref RCCEx_CRS_SynchroDivider"]
    pub Prescaler: u32,
    #[doc = "< Specifies the SYNC signal source.\nThis parameter can be a value of @ref RCCEx_CRS_SynchroSource"]
    pub Source: u32,
    #[doc = "< Specifies the input polarity for the SYNC signal source.\nThis parameter can be a value of @ref RCCEx_CRS_SynchroPolarity"]
    pub Polarity: u32,
    #[doc = "< Specifies the value to be loaded in the frequency error counter with each SYNC event.\nIt can be calculated in using macro __HAL_RCC_CRS_RELOADVALUE_CALCULATE(__FTARGET__, __FSYNC__)\nThis parameter must be a number between 0 and 0xFFFF or a value of @ref RCCEx_CRS_ReloadValueDefault ."]
    pub ReloadValue: u32,
    #[doc = "< Specifies the value to be used to evaluate the captured frequency error value.\nThis parameter must be a number between 0 and 0xFF or a value of @ref RCCEx_CRS_ErrorLimitDefault"]
    pub ErrorLimitValue: u32,
    #[doc = "< Specifies a user-programmable trimming value to the HSI48 oscillator.\nThis parameter must be a number between 0 and 0x7F or a value of @ref RCCEx_CRS_HSI48CalibrationDefault"]
    pub HSI48CalibrationValue: u32,
}
#[doc = " @brief RCC_CRS Synchronization structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_CRSSynchroInfoTypeDef {
    #[doc = "< Specifies the value loaded in the Counter reload value.\nThis parameter must be a number between 0 and 0xFFFF"]
    pub ReloadValue: u32,
    #[doc = "< Specifies value loaded in HSI48 oscillator smooth trimming.\nThis parameter must be a number between 0 and 0x7F"]
    pub HSI48CalibrationValue: u32,
    #[doc = "< Specifies the value loaded in the .FECAP, the frequency error counter\nvalue latched in the time of the last SYNC event.\nThis parameter must be a number between 0 and 0xFFFF"]
    pub FreqErrorCapture: u32,
    #[doc = "< Specifies the value loaded in the .FEDIR, the counting direction of the\nfrequency error counter latched in the time of the last SYNC event.\nIt shows whether the actual frequency is below or above the target.\nThis parameter must be a value of @ref RCCEx_CRS_FreqErrorDirection"]
    pub FreqErrorDirection: u32,
}
extern "C" {
    #[doc = " @addtogroup RCCEx_Exported_Functions_Group1\n @{"]
    pub fn HAL_RCCEx_PeriphCLKConfig(
        PeriphClkInit: *mut RCC_PeriphCLKInitTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_RCCEx_GetPeriphCLKConfig(PeriphClkInit: *mut RCC_PeriphCLKInitTypeDef);
}
extern "C" {
    pub fn HAL_RCCEx_GetPeriphCLKFreq(PeriphClk: u32) -> u32;
}
extern "C" {
    #[doc = " @addtogroup RCCEx_Exported_Functions_Group2\n @{"]
    pub fn HAL_RCCEx_EnableLSECSS();
}
extern "C" {
    pub fn HAL_RCCEx_DisableLSECSS();
}
extern "C" {
    pub fn HAL_RCCEx_EnableLSECSS_IT();
}
extern "C" {
    pub fn HAL_RCCEx_LSECSS_IRQHandler();
}
extern "C" {
    pub fn HAL_RCCEx_LSECSS_Callback();
}
extern "C" {
    pub fn HAL_RCCEx_EnableLSCO(LSCOSource: u32);
}
extern "C" {
    pub fn HAL_RCCEx_DisableLSCO();
}
extern "C" {
    #[doc = " @addtogroup RCCEx_Exported_Functions_Group3\n @{"]
    pub fn HAL_RCCEx_CRSConfig(pInit: *mut RCC_CRSInitTypeDef);
}
extern "C" {
    pub fn HAL_RCCEx_CRSSoftwareSynchronizationGenerate();
}
extern "C" {
    pub fn HAL_RCCEx_CRSGetSynchronizationInfo(pSynchroInfo: *mut RCC_CRSSynchroInfoTypeDef);
}
extern "C" {
    pub fn HAL_RCCEx_CRSWaitSynchronization(Timeout: u32) -> u32;
}
extern "C" {
    pub fn HAL_RCCEx_CRS_IRQHandler();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_SyncOkCallback();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_SyncWarnCallback();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_ExpectedSyncCallback();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_ErrorCallback(Error: u32);
}
extern "C" {
    #[doc = " @addtogroup RCC_Exported_Functions_Group1\n @{"]
    pub fn HAL_RCC_DeInit() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_RCC_OscConfig(RCC_OscInitStruct: *mut RCC_OscInitTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_RCC_ClockConfig(
        RCC_ClkInitStruct: *mut RCC_ClkInitTypeDef,
        FLatency: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup RCC_Exported_Functions_Group2\n @{"]
    pub fn HAL_RCC_MCOConfig(RCC_MCOx: u32, RCC_MCOSource: u32, RCC_MCODiv: u32);
}
extern "C" {
    pub fn HAL_RCC_EnableCSS();
}
extern "C" {
    pub fn HAL_RCC_EnableLSECSS();
}
extern "C" {
    pub fn HAL_RCC_DisableLSECSS();
}
extern "C" {
    pub fn HAL_RCC_GetSysClockFreq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetHCLKFreq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetPCLK1Freq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetPCLK2Freq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetOscConfig(RCC_OscInitStruct: *mut RCC_OscInitTypeDef);
}
extern "C" {
    pub fn HAL_RCC_GetClockConfig(RCC_ClkInitStruct: *mut RCC_ClkInitTypeDef, pFLatency: *mut u32);
}
extern "C" {
    pub fn HAL_RCC_NMI_IRQHandler();
}
extern "C" {
    pub fn HAL_RCC_CSSCallback();
}
#[doc = " @defgroup GPIO_Exported_Types GPIO Exported Types\n @{\n/\n/**\n @brief   GPIO Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_InitTypeDef {
    #[doc = "< Specifies the GPIO pins to be configured.\nThis parameter can be any value of @ref GPIO_pins"]
    pub Pin: u32,
    #[doc = "< Specifies the operating mode for the selected pins.\nThis parameter can be a value of @ref GPIO_mode"]
    pub Mode: u32,
    #[doc = "< Specifies the Pull-up or Pull-Down activation for the selected pins.\nThis parameter can be a value of @ref GPIO_pull"]
    pub Pull: u32,
    #[doc = "< Specifies the speed for the selected pins.\nThis parameter can be a value of @ref GPIO_speed"]
    pub Speed: u32,
    #[doc = "< Peripheral to be connected to the selected pins\nThis parameter can be a value of @ref GPIOEx_Alternate_function_selection"]
    pub Alternate: u32,
}
pub const GPIO_PinState_GPIO_PIN_RESET: GPIO_PinState = 0;
pub const GPIO_PinState_GPIO_PIN_SET: GPIO_PinState = 1;
#[doc = " @brief  GPIO Bit SET and Bit RESET enumeration"]
pub type GPIO_PinState = cty::c_uint;
extern "C" {
    #[doc = " @defgroup GPIO_Exported_Functions_Group1 Initialization/de-initialization functions\n  @brief    Initialization and Configuration functions\n @{"]
    pub fn HAL_GPIO_Init(GPIOx: *mut GPIO_TypeDef, GPIO_Init: *mut GPIO_InitTypeDef);
}
extern "C" {
    pub fn HAL_GPIO_DeInit(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u32);
}
extern "C" {
    #[doc = " @defgroup GPIO_Exported_Functions_Group2 IO operation functions\n  @brief    IO operation functions\n @{"]
    pub fn HAL_GPIO_ReadPin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16) -> GPIO_PinState;
}
extern "C" {
    pub fn HAL_GPIO_WritePin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16, PinState: GPIO_PinState);
}
extern "C" {
    pub fn HAL_GPIO_TogglePin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16);
}
extern "C" {
    pub fn HAL_GPIO_LockPin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_GPIO_EXTI_IRQHandler(GPIO_Pin: u16);
}
extern "C" {
    pub fn HAL_GPIO_EXTI_Callback(GPIO_Pin: u16);
}
#[doc = " @brief  DMA Configuration Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_InitTypeDef {
    #[doc = "< Specifies the request selected for the specified channel.\nThis parameter can be a value of @ref DMA_request"]
    pub Request: u32,
    #[doc = "< Specifies if the data will be transferred from memory to peripheral,\nfrom memory to memory or from peripheral to memory.\nThis parameter can be a value of @ref DMA_Data_transfer_direction"]
    pub Direction: u32,
    #[doc = "< Specifies whether the Peripheral address register should be incremented or not.\nThis parameter can be a value of @ref DMA_Peripheral_incremented_mode"]
    pub PeriphInc: u32,
    #[doc = "< Specifies whether the memory address register should be incremented or not.\nThis parameter can be a value of @ref DMA_Memory_incremented_mode"]
    pub MemInc: u32,
    #[doc = "< Specifies the Peripheral data width.\nThis parameter can be a value of @ref DMA_Peripheral_data_size"]
    pub PeriphDataAlignment: u32,
    #[doc = "< Specifies the Memory data width.\nThis parameter can be a value of @ref DMA_Memory_data_size"]
    pub MemDataAlignment: u32,
    #[doc = "< Specifies the operation mode of the DMAy Channelx.\nThis parameter can be a value of @ref DMA_mode\n@note The circular buffer mode cannot be used if the memory-to-memory\ndata transfer is configured on the selected Channel"]
    pub Mode: u32,
    #[doc = "< Specifies the software priority for the DMAy Channelx.\nThis parameter can be a value of @ref DMA_Priority_level"]
    pub Priority: u32,
}
#[doc = "< DMA not yet initialized or disabled"]
pub const HAL_DMA_StateTypeDef_HAL_DMA_STATE_RESET: HAL_DMA_StateTypeDef = 0;
#[doc = "< DMA initialized and ready for use"]
pub const HAL_DMA_StateTypeDef_HAL_DMA_STATE_READY: HAL_DMA_StateTypeDef = 1;
#[doc = "< DMA process is ongoing"]
pub const HAL_DMA_StateTypeDef_HAL_DMA_STATE_BUSY: HAL_DMA_StateTypeDef = 2;
#[doc = "< DMA timeout state"]
pub const HAL_DMA_StateTypeDef_HAL_DMA_STATE_TIMEOUT: HAL_DMA_StateTypeDef = 3;
#[doc = " @brief  HAL DMA State structures definition"]
pub type HAL_DMA_StateTypeDef = cty::c_uint;
#[doc = "< Full transfer"]
pub const HAL_DMA_LevelCompleteTypeDef_HAL_DMA_FULL_TRANSFER: HAL_DMA_LevelCompleteTypeDef = 0;
#[doc = "< Half Transfer"]
pub const HAL_DMA_LevelCompleteTypeDef_HAL_DMA_HALF_TRANSFER: HAL_DMA_LevelCompleteTypeDef = 1;
#[doc = " @brief  HAL DMA Error Code structure definition"]
pub type HAL_DMA_LevelCompleteTypeDef = cty::c_uint;
#[doc = "< Full transfer"]
pub const HAL_DMA_CallbackIDTypeDef_HAL_DMA_XFER_CPLT_CB_ID: HAL_DMA_CallbackIDTypeDef = 0;
#[doc = "< Half transfer"]
pub const HAL_DMA_CallbackIDTypeDef_HAL_DMA_XFER_HALFCPLT_CB_ID: HAL_DMA_CallbackIDTypeDef = 1;
#[doc = "< Error"]
pub const HAL_DMA_CallbackIDTypeDef_HAL_DMA_XFER_ERROR_CB_ID: HAL_DMA_CallbackIDTypeDef = 2;
#[doc = "< Abort"]
pub const HAL_DMA_CallbackIDTypeDef_HAL_DMA_XFER_ABORT_CB_ID: HAL_DMA_CallbackIDTypeDef = 3;
#[doc = "< All"]
pub const HAL_DMA_CallbackIDTypeDef_HAL_DMA_XFER_ALL_CB_ID: HAL_DMA_CallbackIDTypeDef = 4;
#[doc = " @brief  HAL DMA Callback ID structure definition"]
pub type HAL_DMA_CallbackIDTypeDef = cty::c_uint;
#[doc = " @brief  DMA handle Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DMA_HandleTypeDef {
    #[doc = "< Register base address"]
    pub Instance: *mut DMA_Channel_TypeDef,
    #[doc = "< DMA communication parameters"]
    pub Init: DMA_InitTypeDef,
    #[doc = "< DMA locking object"]
    pub Lock: HAL_LockTypeDef,
    #[doc = "< DMA transfer state"]
    pub State: HAL_DMA_StateTypeDef,
    #[doc = "< Parent object state"]
    pub Parent: *mut cty::c_void,
    #[doc = "< DMA transfer complete callback"]
    pub XferCpltCallback:
        ::core::option::Option<unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef)>,
    #[doc = "< DMA Half transfer complete callback"]
    pub XferHalfCpltCallback:
        ::core::option::Option<unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef)>,
    #[doc = "< DMA transfer error callback"]
    pub XferErrorCallback:
        ::core::option::Option<unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef)>,
    #[doc = "< DMA transfer abort callback"]
    pub XferAbortCallback:
        ::core::option::Option<unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef)>,
    #[doc = "< DMA Error code"]
    pub ErrorCode: u32,
    #[doc = "< DMA Channel Base Address"]
    pub DmaBaseAddress: *mut DMA_TypeDef,
    #[doc = "< DMA Channel Index"]
    pub ChannelIndex: u32,
    #[doc = "< Register base address"]
    pub DMAmuxChannel: *mut DMAMUX_Channel_TypeDef,
    #[doc = "< DMAMUX Channels Status Base Address"]
    pub DMAmuxChannelStatus: *mut DMAMUX_ChannelStatus_TypeDef,
    #[doc = "< DMAMUX Channel Status Mask"]
    pub DMAmuxChannelStatusMask: u32,
    #[doc = "< DMAMUX request generator Base Address"]
    pub DMAmuxRequestGen: *mut DMAMUX_RequestGen_TypeDef,
    #[doc = "< DMAMUX request generator Address"]
    pub DMAmuxRequestGenStatus: *mut DMAMUX_RequestGenStatus_TypeDef,
    #[doc = "< DMAMUX request generator Status mask"]
    pub DMAmuxRequestGenStatusMask: u32,
}
#[doc = " @brief  DMA handle Structure definition"]
pub type DMA_HandleTypeDef = __DMA_HandleTypeDef;
#[doc = " @brief  HAL DMAMUX Synchronization configuration structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_DMA_MuxSyncConfigTypeDef {
    #[doc = "< Specifies the synchronization signal gating the DMA request in periodic mode.\nThis parameter can be a value of @ref DMAEx_DMAMUX_SyncSignalID_selection"]
    pub SyncSignalID: u32,
    #[doc = "< Specifies the polarity of the signal on which the DMA request is synchronized.\nThis parameter can be a value of @ref DMAEx_DMAMUX_SyncPolarity_selection"]
    pub SyncPolarity: u32,
    #[doc = "< Specifies if the synchronization shall be enabled or disabled\nThis parameter can take the value ENABLE or DISABLE"]
    pub SyncEnable: FunctionalState,
    #[doc = "< Specifies if an event shall be generated once the RequestNumber is reached.\nThis parameter can take the value ENABLE or DISABLE"]
    pub EventEnable: FunctionalState,
    #[doc = "< Specifies the number of DMA request that will be authorized after a sync event\nThis parameter must be a number between Min_Data = 1 and Max_Data = 32"]
    pub RequestNumber: u32,
}
#[doc = " @brief  HAL DMAMUX request generator parameters structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_DMA_MuxRequestGeneratorConfigTypeDef {
    #[doc = "< Specifies the ID of the signal used for DMAMUX request generator\nThis parameter can be a value of @ref DMAEx_DMAMUX_SignalGeneratorID_selection"]
    pub SignalID: u32,
    #[doc = "< Specifies the polarity of the signal on which the request is generated.\nThis parameter can be a value of @ref DMAEx_DMAMUX_RequestGeneneratorPolarity_selection"]
    pub Polarity: u32,
    #[doc = "< Specifies the number of DMA request that will be generated after a signal event\nThis parameter must be a number between Min_Data = 1 and Max_Data = 32"]
    pub RequestNumber: u32,
}
extern "C" {
    #[doc = " @addtogroup DMAEx_Exported_Functions_Group1\n @{"]
    pub fn HAL_DMAEx_ConfigMuxRequestGenerator(
        hdma: *mut DMA_HandleTypeDef,
        pRequestGeneratorConfig: *mut HAL_DMA_MuxRequestGeneratorConfigTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMAEx_EnableMuxRequestGenerator(hdma: *mut DMA_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMAEx_DisableMuxRequestGenerator(hdma: *mut DMA_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMAEx_ConfigMuxSync(
        hdma: *mut DMA_HandleTypeDef,
        pSyncConfig: *mut HAL_DMA_MuxSyncConfigTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMAEx_MUX_IRQHandler(hdma: *mut DMA_HandleTypeDef);
}
extern "C" {
    #[doc = " @addtogroup DMA_Exported_Functions_Group1\n @{"]
    pub fn HAL_DMA_Init(hdma: *mut DMA_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMA_DeInit(hdma: *mut DMA_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup DMA_Exported_Functions_Group2\n @{"]
    pub fn HAL_DMA_Start(
        hdma: *mut DMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMA_Start_IT(
        hdma: *mut DMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMA_Abort(hdma: *mut DMA_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMA_Abort_IT(hdma: *mut DMA_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMA_PollForTransfer(
        hdma: *mut DMA_HandleTypeDef,
        CompleteLevel: HAL_DMA_LevelCompleteTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMA_IRQHandler(hdma: *mut DMA_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DMA_RegisterCallback(
        hdma: *mut DMA_HandleTypeDef,
        CallbackID: HAL_DMA_CallbackIDTypeDef,
        pCallback: ::core::option::Option<unsafe extern "C" fn(_hdma: *mut DMA_HandleTypeDef)>,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DMA_UnRegisterCallback(
        hdma: *mut DMA_HandleTypeDef,
        CallbackID: HAL_DMA_CallbackIDTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup DMA_Exported_Functions_Group3\n @{"]
    pub fn HAL_DMA_GetState(hdma: *mut DMA_HandleTypeDef) -> HAL_DMA_StateTypeDef;
}
extern "C" {
    pub fn HAL_DMA_GetError(hdma: *mut DMA_HandleTypeDef) -> u32;
}
#[doc = " @defgroup CORTEX_MPU_Region_Initialization_Structure_definition MPU Region Initialization Structure Definition\n @brief  MPU Region initialization structure\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPU_Region_InitTypeDef {
    #[doc = "< Specifies the status of the region.\nThis parameter can be a value of @ref CORTEX_MPU_Region_Enable"]
    pub Enable: u8,
    #[doc = "< Specifies the number of the region to protect.\nThis parameter can be a value of @ref CORTEX_MPU_Region_Number"]
    pub Number: u8,
    #[doc = "< Specifies the base address of the region to protect."]
    pub BaseAddress: u32,
    #[doc = "< Specifies the size of the region to protect.\nThis parameter can be a value of @ref CORTEX_MPU_Region_Size"]
    pub Size: u8,
    #[doc = "< Specifies the number of the subregion protection to disable.\nThis parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF"]
    pub SubRegionDisable: u8,
    #[doc = "< Specifies the TEX field level.\nThis parameter can be a value of @ref CORTEX_MPU_TEX_Levels"]
    pub TypeExtField: u8,
    #[doc = "< Specifies the region access permission type.\nThis parameter can be a value of @ref CORTEX_MPU_Region_Permission_Attributes"]
    pub AccessPermission: u8,
    #[doc = "< Specifies the instruction access status.\nThis parameter can be a value of @ref CORTEX_MPU_Instruction_Access"]
    pub DisableExec: u8,
    #[doc = "< Specifies the shareability status of the protected region.\nThis parameter can be a value of @ref CORTEX_MPU_Access_Shareable"]
    pub IsShareable: u8,
    #[doc = "< Specifies the cacheable status of the region protected.\nThis parameter can be a value of @ref CORTEX_MPU_Access_Cacheable"]
    pub IsCacheable: u8,
    #[doc = "< Specifies the bufferable status of the protected region.\nThis parameter can be a value of @ref CORTEX_MPU_Access_Bufferable"]
    pub IsBufferable: u8,
}
extern "C" {
    #[doc = " @defgroup CORTEX_Exported_Functions_Group1 Initialization and Configuration functions\n @brief    Initialization and Configuration functions\n @{"]
    pub fn HAL_NVIC_SetPriorityGrouping(PriorityGroup: u32);
}
extern "C" {
    pub fn HAL_NVIC_SetPriority(IRQn: IRQn_Type, PreemptPriority: u32, SubPriority: u32);
}
extern "C" {
    pub fn HAL_NVIC_EnableIRQ(IRQn: IRQn_Type);
}
extern "C" {
    pub fn HAL_NVIC_DisableIRQ(IRQn: IRQn_Type);
}
extern "C" {
    pub fn HAL_NVIC_SystemReset();
}
extern "C" {
    pub fn HAL_SYSTICK_Config(TicksNumb: u32) -> u32;
}
extern "C" {
    #[doc = " @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions\n @brief   Cortex control functions\n @{"]
    pub fn HAL_NVIC_GetPriorityGrouping() -> u32;
}
extern "C" {
    pub fn HAL_NVIC_GetPriority(
        IRQn: IRQn_Type,
        PriorityGroup: u32,
        pPreemptPriority: *mut u32,
        pSubPriority: *mut u32,
    );
}
extern "C" {
    pub fn HAL_NVIC_GetPendingIRQ(IRQn: IRQn_Type) -> u32;
}
extern "C" {
    pub fn HAL_NVIC_SetPendingIRQ(IRQn: IRQn_Type);
}
extern "C" {
    pub fn HAL_NVIC_ClearPendingIRQ(IRQn: IRQn_Type);
}
extern "C" {
    pub fn HAL_NVIC_GetActive(IRQn: IRQn_Type) -> u32;
}
extern "C" {
    pub fn HAL_SYSTICK_CLKSourceConfig(CLKSource: u32);
}
extern "C" {
    pub fn HAL_SYSTICK_IRQHandler();
}
extern "C" {
    pub fn HAL_SYSTICK_Callback();
}
extern "C" {
    pub fn HAL_MPU_Enable(MPU_Control: u32);
}
extern "C" {
    pub fn HAL_MPU_Disable();
}
extern "C" {
    pub fn HAL_MPU_ConfigRegion(MPU_Init: *mut MPU_Region_InitTypeDef);
}
#[doc = " @brief  ADC group regular oversampling structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_OversamplingTypeDef {
    #[doc = "< Configures the oversampling ratio.\nThis parameter can be a value of @ref ADC_HAL_EC_OVS_RATIO"]
    pub Ratio: u32,
    #[doc = "< Configures the division coefficient for the Oversampler.\nThis parameter can be a value of @ref ADC_HAL_EC_OVS_SHIFT"]
    pub RightBitShift: u32,
    #[doc = "< Selects the regular triggered oversampling mode.\nThis parameter can be a value of @ref ADC_HAL_EC_OVS_DISCONT_MODE"]
    pub TriggeredMode: u32,
    #[doc = "< Selects the regular oversampling mode.\nThe oversampling is either temporary stopped or reset upon an injected\nsequence interruption.\nIf oversampling is enabled on both regular and injected groups, this parameter\nis discarded and forced to setting \"ADC_REGOVERSAMPLING_RESUMED_MODE\"\n(the oversampling buffer is zeroed during injection sequence).\nThis parameter can be a value of @ref ADC_HAL_EC_OVS_SCOPE_REG"]
    pub OversamplingStopReset: u32,
}
#[doc = " @brief  Structure definition of ADC instance and ADC group regular.\n @note   Parameters of this structure are shared within 2 scopes:\n          - Scope entire ADC (affects ADC groups regular and injected): ClockPrescaler, Resolution, DataAlign,\n            GainCompensation, ScanConvMode, EOCSelection, LowPowerAutoWait.\n          - Scope ADC group regular: ContinuousConvMode, NbrOfConversion, DiscontinuousConvMode, NbrOfDiscConversion,\n            ExternalTrigConv, ExternalTrigConvEdge, DMAContinuousRequests, Overrun, OversamplingMode, Oversampling, SamplingMode.\n @note   The setting of these parameters by function HAL_ADC_Init() is conditioned to ADC state.\n         ADC state can be either:\n          - For all parameters: ADC disabled\n          - For all parameters except 'LowPowerAutoWait', 'DMAContinuousRequests' and 'Oversampling': ADC enabled without conversion on going on group regular.\n          - For parameters 'LowPowerAutoWait' and 'DMAContinuousRequests': ADC enabled without conversion on going on groups regular and injected.\n         If ADC is not in the appropriate state to modify some parameters, these parameters setting is bypassed\n         without error reporting (as it can be the expected behavior in case of intended action to update another parameter\n         (which fulfills the ADC state condition) on the fly)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InitTypeDef {
    #[doc = "< Select ADC clock source (synchronous clock derived from APB clock or asynchronous clock derived from system clock or PLL (Refer to reference manual for list of clocks available)) and clock prescaler.\nThis parameter can be a value of @ref ADC_HAL_EC_COMMON_CLOCK_SOURCE.\nNote: The ADC clock configuration is common to all ADC instances.\nNote: In case of usage of channels on injected group, ADC frequency should be lower than AHB clock frequency /4 for resolution 12 or 10 bits,\nAHB clock frequency /3 for resolution 8 bits, AHB clock frequency /2 for resolution 6 bits.\nNote: In case of synchronous clock mode based on HCLK/1, the configuration must be enabled only\nif the system clock has a 50% duty clock cycle (APB prescaler configured inside RCC\nmust be bypassed and PCLK clock must have 50% duty cycle). Refer to reference manual for details.\nNote: In case of usage of asynchronous clock, the selected clock must be preliminarily enabled at RCC top level.\nNote: This parameter can be modified only if all ADC instances are disabled."]
    pub ClockPrescaler: u32,
    #[doc = "< Configure the ADC resolution.\nThis parameter can be a value of @ref ADC_HAL_EC_RESOLUTION"]
    pub Resolution: u32,
    #[doc = "< Specify ADC data alignment in conversion data register (right or left).\nRefer to reference manual for alignments formats versus resolutions.\nThis parameter can be a value of @ref ADC_HAL_EC_DATA_ALIGN"]
    pub DataAlign: u32,
    #[doc = "< Specify the ADC gain compensation coefficient to be applied to ADC raw conversion data, based on following formula:\nDATA = DATA(raw) * (gain compensation coef) / 4096\n2.12 bit format, unsigned: 2 bits exponents / 12 bits mantissa\nGain step is 1/4096 = 0.000244\nGain range is 0.0000 to 3.999756\nThis parameter value can be\n0           Gain compensation will be disabled and coefficient set to 0\n1 -> 0x3FFF Gain compensation will be enabled and coefficient set to specified value\n\nNote: Gain compensation when enabled is applied to all channels."]
    pub GainCompensation: u32,
    #[doc = "< Configure the sequencer of ADC groups regular and injected.\nThis parameter can be associated to parameter 'DiscontinuousConvMode' to have main sequence subdivided in successive parts.\nIf disabled: Conversion is performed in single mode (one channel converted, the one defined in rank 1).\nParameters 'NbrOfConversion' and 'InjectedNbrOfConversion' are discarded (equivalent to set to 1).\nIf enabled:  Conversions are performed in sequence mode (multiple ranks defined by 'NbrOfConversion' or 'InjectedNbrOfConversion' and rank of each channel in sequencer).\nScan direction is upward: from rank 1 to rank 'n'.\nThis parameter can be a value of @ref ADC_Scan_mode"]
    pub ScanConvMode: u32,
    #[doc = "< Specify which EOC (End Of Conversion) flag is used for conversion by polling and interruption: end of unitary conversion or end of sequence conversions.\nThis parameter can be a value of @ref ADC_EOCSelection."]
    pub EOCSelection: u32,
    #[doc = "< Select the dynamic low power Auto Delay: new conversion start only when the previous\nconversion (for ADC group regular) or previous sequence (for ADC group injected) has been retrieved by user software,\nusing function HAL_ADC_GetValue() or HAL_ADCEx_InjectedGetValue().\nThis feature automatically adapts the frequency of ADC conversions triggers to the speed of the system that reads the data. Moreover, this avoids risk of overrun\nfor low frequency applications.\nThis parameter can be set to ENABLE or DISABLE.\nNote: It is not recommended to use with interruption or DMA (HAL_ADC_Start_IT(), HAL_ADC_Start_DMA()) since these modes have to clear immediately the EOC flag (by CPU to free the IRQ pending event or by DMA).\nAuto wait will work but fort a very short time, discarding its intended benefit (except specific case of high load of CPU or DMA transfers which can justify usage of auto wait).\nDo use with polling: 1. Start conversion with HAL_ADC_Start(), 2. Later on, when ADC conversion data is needed:\nuse HAL_ADC_PollForConversion() to ensure that conversion is completed and HAL_ADC_GetValue() to retrieve conversion result and trig another conversion start.\n(in case of usage of ADC group injected, use the equivalent functions HAL_ADCExInjected_Start(), HAL_ADCEx_InjectedGetValue(), ...)."]
    pub LowPowerAutoWait: FunctionalState,
    #[doc = "< Specify whether the conversion is performed in single mode (one conversion) or continuous mode for ADC group regular,\nafter the first ADC conversion start trigger occurred (software start or external trigger).\nThis parameter can be set to ENABLE or DISABLE."]
    pub ContinuousConvMode: FunctionalState,
    #[doc = "< Specify the number of ranks that will be converted within the regular group sequencer.\nTo use the regular group sequencer and convert several ranks, parameter 'ScanConvMode' must be enabled.\nThis parameter must be a number between Min_Data = 1 and Max_Data = 16.\nNote: This parameter must be modified when no conversion is on going on regular group (ADC disabled, or ADC enabled without\ncontinuous mode or external trigger that could launch a conversion)."]
    pub NbrOfConversion: u32,
    #[doc = "< Specify whether the conversions sequence of ADC group regular is performed in Complete-sequence/Discontinuous-sequence\n(main sequence subdivided in successive parts).\nDiscontinuous mode is used only if sequencer is enabled (parameter 'ScanConvMode'). If sequencer is disabled, this parameter is discarded.\nDiscontinuous mode can be enabled only if continuous mode is disabled. If continuous mode is enabled, this parameter setting is discarded.\nThis parameter can be set to ENABLE or DISABLE."]
    pub DiscontinuousConvMode: FunctionalState,
    #[doc = "< Specifies the number of discontinuous conversions in which the main sequence of ADC group regular (parameter NbrOfConversion) will be subdivided.\nIf parameter 'DiscontinuousConvMode' is disabled, this parameter is discarded.\nThis parameter must be a number between Min_Data = 1 and Max_Data = 8."]
    pub NbrOfDiscConversion: u32,
    #[doc = "< Select the external event source used to trigger ADC group regular conversion start.\nIf set to ADC_SOFTWARE_START, external triggers are disabled and software trigger is used instead.\nThis parameter can be a value of @ref ADC_regular_external_trigger_source.\nCaution: external trigger source is common to all ADC instances."]
    pub ExternalTrigConv: u32,
    #[doc = "< Select the external event edge used to trigger ADC group regular conversion start.\nIf trigger source is set to ADC_SOFTWARE_START, this parameter is discarded.\nThis parameter can be a value of @ref ADC_regular_external_trigger_edge"]
    pub ExternalTrigConvEdge: u32,
    #[doc = "< Select the sampling mode to be used for ADC group regular conversion.\nThis parameter can be a value of @ref ADC_regular_sampling_mode"]
    pub SamplingMode: u32,
    #[doc = "< Specify whether the DMA requests are performed in one shot mode (DMA transfer stops when number of conversions is reached)\nor in continuous mode (DMA transfer unlimited, whatever number of conversions).\nThis parameter can be set to ENABLE or DISABLE.\nNote: In continuous mode, DMA must be configured in circular mode. Otherwise an overrun will be triggered when DMA buffer maximum pointer is reached."]
    pub DMAContinuousRequests: FunctionalState,
    #[doc = "< Select the behavior in case of overrun: data overwritten or preserved (default).\nThis parameter applies to ADC group regular only.\nThis parameter can be a value of @ref ADC_HAL_EC_REG_OVR_DATA_BEHAVIOR.\nNote: In case of overrun set to data preserved and usage with programming model with interruption (HAL_Start_IT()): ADC IRQ handler has to clear\nend of conversion flags, this induces the release of the preserved data. If needed, this data can be saved in function\nHAL_ADC_ConvCpltCallback(), placed in user program code (called before end of conversion flags clear).\nNote: Error reporting with respect to the conversion mode:\n- Usage with ADC conversion by polling for event or interruption: Error is reported only if overrun is set to data preserved. If overrun is set to data\noverwritten, user can willingly not read all the converted data, this is not considered as an erroneous case.\n- Usage with ADC conversion by DMA: Error is reported whatever overrun setting (DMA is expected to process all data from data register)."]
    pub Overrun: u32,
    #[doc = "< Specify whether the oversampling feature is enabled or disabled.\nThis parameter can be set to ENABLE or DISABLE.\nNote: This parameter can be modified only if there is no conversion is ongoing on ADC groups regular and injected"]
    pub OversamplingMode: FunctionalState,
    #[doc = "< Specify the Oversampling parameters.\nCaution: this setting overwrites the previous oversampling configuration if oversampling is already enabled."]
    pub Oversampling: ADC_OversamplingTypeDef,
}
#[doc = " @brief  Structure definition of ADC channel for regular group\n @note   The setting of these parameters by function HAL_ADC_ConfigChannel() is conditioned to ADC state.\n         ADC state can be either:\n          - For all parameters: ADC disabled (this is the only possible ADC state to modify parameter 'SingleDiff')\n          - For all except parameters 'SamplingTime', 'Offset', 'OffsetNumber': ADC enabled without conversion on going on regular group.\n          - For parameters 'SamplingTime', 'Offset', 'OffsetNumber': ADC enabled without conversion on going on regular and injected groups.\n         If ADC is not in the appropriate state to modify some parameters, these parameters setting is bypassed\n         without error reporting (as it can be the expected behavior in case of intended action to update another parameter (which fulfills the ADC state condition)\n         on the fly)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_ChannelConfTypeDef {
    #[doc = "< Specify the channel to configure into ADC regular group.\nThis parameter can be a value of @ref ADC_HAL_EC_CHANNEL\nNote: Depending on devices and ADC instances, some channels may not be available on device package pins. Refer to device datasheet for channels availability."]
    pub Channel: u32,
    #[doc = "< Specify the rank in the regular group sequencer.\nThis parameter can be a value of @ref ADC_HAL_EC_REG_SEQ_RANKS\nNote: to disable a channel or change order of conversion sequencer, rank containing a previous channel setting can be overwritten by\nthe new channel setting (or parameter number of conversions adjusted)"]
    pub Rank: u32,
    #[doc = "< Sampling time value to be set for the selected channel.\nUnit: ADC clock cycles\nConversion time is the addition of sampling time and processing time\n(12.5 ADC clock cycles at ADC resolution 12 bits, 10.5 cycles at 10 bits, 8.5 cycles at 8 bits, 6.5 cycles at 6 bits).\nThis parameter can be a value of @ref ADC_HAL_EC_CHANNEL_SAMPLINGTIME\nCaution: This parameter applies to a channel that can be used into regular and/or injected group.\nIt overwrites the last setting.\nNote: In case of usage of internal measurement channels (VrefInt/Vbat/TempSensor),\nsampling time constraints must be respected (sampling time can be adjusted in function of ADC clock frequency and sampling time setting)\nRefer to device datasheet for timings values."]
    pub SamplingTime: u32,
    #[doc = "< Select single-ended or differential input.\nIn differential mode: Differential measurement is carried out between the selected channel 'i' (positive input) and channel 'i+1' (negative input).\nOnly channel 'i' has to be configured, channel 'i+1' is configured automatically.\nThis parameter must be a value of @ref ADC_HAL_EC_CHANNEL_SINGLE_DIFF_ENDING\nCaution: This parameter applies to a channel that can be used in a regular and/or injected group.\nIt overwrites the last setting.\nNote: Refer to Reference Manual to ensure the selected channel is available in differential mode.\nNote: When configuring a channel 'i' in differential mode, the channel 'i+1' is not usable separately.\nNote: This parameter must be modified when ADC is disabled (before ADC start conversion or after ADC stop conversion).\nIf ADC is enabled, this parameter setting is bypassed without error reporting (as it can be the expected behavior in case\nof another parameter update on the fly)"]
    pub SingleDiff: u32,
    #[doc = "< Select the offset number\nThis parameter can be a value of @ref ADC_HAL_EC_OFFSET_NB\nCaution: Only one offset is allowed per channel. This parameter overwrites the last setting."]
    pub OffsetNumber: u32,
    #[doc = "< Define the offset to be applied on the raw converted data.\nOffset value must be a positive number.\nDepending of ADC resolution selected (12, 10, 8 or 6 bits), this parameter must be a number between Min_Data = 0x000 and Max_Data = 0xFFF,\n0x3FF, 0xFF or 0x3F respectively.\nNote: This parameter must be modified when no conversion is on going on both regular and injected groups (ADC disabled, or ADC enabled\nwithout continuous mode or external trigger that could launch a conversion)."]
    pub Offset: u32,
    #[doc = "< Define if the offset should be subtracted (negative sign) or added (positive sign) from or to the raw converted data.\nThis parameter can be a value of @ref ADCEx_OffsetSign.\nNote: This parameter must be modified when no conversion is on going on both regular and injected groups (ADC disabled, or ADC enabled\nwithout continuous mode or external trigger that could launch a conversion)."]
    pub OffsetSign: u32,
    #[doc = "< Define if the offset should be saturated upon under or over flow.\nThis parameter value can be ENABLE or DISABLE.\nNote: This parameter must be modified when no conversion is on going on both regular and injected groups (ADC disabled, or ADC enabled\nwithout continuous mode or external trigger that could launch a conversion)."]
    pub OffsetSaturation: FunctionalState,
}
#[doc = " @brief  Structure definition of ADC analog watchdog\n @note   The setting of these parameters by function HAL_ADC_AnalogWDGConfig() is conditioned to ADC state.\n         ADC state can be either:\n          - For all parameters except 'HighThreshold', 'LowThreshold': ADC disabled or ADC enabled without conversion on going on ADC groups regular and injected.\n          - For parameters 'HighThreshold', 'LowThreshold': ADC enabled with conversion on going on regular and injected groups."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_AnalogWDGConfTypeDef {
    #[doc = "< Select which ADC analog watchdog is monitoring the selected channel.\nFor Analog Watchdog 1: Only 1 channel can be monitored (or overall group of channels by setting parameter 'WatchdogMode')\nFor Analog Watchdog 2 and 3: Several channels can be monitored (by successive calls of 'HAL_ADC_AnalogWDGConfig()' for each channel)\nThis parameter can be a value of @ref ADC_HAL_EC_AWD_NUMBER."]
    pub WatchdogNumber: u32,
    #[doc = "< Configure the ADC analog watchdog mode: single/all/none channels.\nFor Analog Watchdog 1: Configure the ADC analog watchdog mode: single channel or all channels, ADC groups regular and-or injected.\nFor Analog Watchdog 2 and 3: Several channels can be monitored by applying successively the AWD init structure. Channels on ADC group regular and injected are not differentiated: Set value 'ADC_ANALOGWATCHDOG_SINGLE_xxx' to monitor 1 channel, value 'ADC_ANALOGWATCHDOG_ALL_xxx' to monitor all channels, 'ADC_ANALOGWATCHDOG_NONE' to monitor no channel.\nThis parameter can be a value of @ref ADC_analog_watchdog_mode."]
    pub WatchdogMode: u32,
    #[doc = "< Select which ADC channel to monitor by analog watchdog.\nFor Analog Watchdog 1: this parameter has an effect only if parameter 'WatchdogMode' is configured on single channel (only 1 channel can be monitored).\nFor Analog Watchdog 2 and 3: Several channels can be monitored. To use this feature, call successively the function HAL_ADC_AnalogWDGConfig() for each channel to be added (or removed with value 'ADC_ANALOGWATCHDOG_NONE').\nThis parameter can be a value of @ref ADC_HAL_EC_CHANNEL."]
    pub Channel: u32,
    #[doc = "< Specify whether the analog watchdog is configured in interrupt or polling mode.\nThis parameter can be set to ENABLE or DISABLE"]
    pub ITMode: FunctionalState,
    #[doc = "< Configure the ADC analog watchdog High threshold value.\nDepending of ADC resolution selected (12, 10, 8 or 6 bits), this parameter must be a number\nbetween Min_Data = 0x000 and Max_Data = 0xFFF, 0x3FF, 0xFF or 0x3F respectively.\nNote: Analog watchdog 2 and 3 are limited to a resolution of 8 bits: if ADC resolution is 12 bits\nthe 4 LSB are ignored, if ADC resolution is 10 bits the 2 LSB are ignored.\nNote: If ADC oversampling is enabled, ADC analog watchdog thresholds are\nimpacted: the comparison of analog watchdog thresholds is done on\noversampling final computation (after ratio and shift application):\nADC data register bitfield [15:4] (12 most significant bits)."]
    pub HighThreshold: u32,
    #[doc = "< Configures the ADC analog watchdog Low threshold value.\nDepending of ADC resolution selected (12, 10, 8 or 6 bits), this parameter must be a number\nbetween Min_Data = 0x000 and Max_Data = 0xFFF, 0x3FF, 0xFF or 0x3F respectively.\nNote: Analog watchdog 2 and 3 are limited to a resolution of 8 bits: if ADC resolution is 12 bits\nthe 4 LSB are ignored, if ADC resolution is 10 bits the 2 LSB are ignored.\nNote: If ADC oversampling is enabled, ADC analog watchdog thresholds are\nimpacted: the comparison of analog watchdog thresholds is done on\noversampling final computation (after ratio and shift application):\nADC data register bitfield [15:4] (12 most significant bits)."]
    pub LowThreshold: u32,
    #[doc = "< Specify whether filtering should be use and the number of samples to consider.\nBefore setting flag or raising interrupt, analog watchdog can wait to have several\nconsecutive out-of-window samples. This parameter allows to configure this number.\nThis parameter only applies to Analog watchdog 1. For others, use value ADC_AWD_FILTERING_NONE.\nThis parameter can be a value of @ref ADC_analog_watchdog_filtering_config."]
    pub FilteringConfig: u32,
}
#[doc = " @brief  ADC group injected contexts queue configuration\n @note   Structure intended to be used only through structure \"ADC_HandleTypeDef\""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InjectionConfigTypeDef {
    #[doc = "< Injected channel configuration context: build-up over each\nHAL_ADCEx_InjectedConfigChannel() call to finally initialize\nJSQR register at HAL_ADCEx_InjectedConfigChannel() last call"]
    pub ContextQueue: u32,
    #[doc = "< Number of channels in the injected sequence"]
    pub ChannelCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_HandleTypeDef {
    #[doc = "< Register base address"]
    pub Instance: *mut ADC_TypeDef,
    #[doc = "< ADC initialization parameters and regular conversions setting"]
    pub Init: ADC_InitTypeDef,
    #[doc = "< Pointer DMA Handler"]
    pub DMA_Handle: *mut DMA_HandleTypeDef,
    #[doc = "< ADC locking object"]
    pub Lock: HAL_LockTypeDef,
    #[doc = "< ADC communication state (bitmap of ADC states)"]
    pub State: u32,
    #[doc = "< ADC Error code"]
    pub ErrorCode: u32,
    #[doc = "< ADC injected channel configuration build-up structure"]
    pub InjectionConfig: ADC_InjectionConfigTypeDef,
}
#[doc = " @brief  ADC Injected Conversion Oversampling structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InjOversamplingTypeDef {
    #[doc = "< Configures the oversampling ratio.\nThis parameter can be a value of @ref ADC_HAL_EC_OVS_RATIO"]
    pub Ratio: u32,
    #[doc = "< Configures the division coefficient for the Oversampler.\nThis parameter can be a value of @ref ADC_HAL_EC_OVS_SHIFT"]
    pub RightBitShift: u32,
}
#[doc = " @brief  Structure definition of ADC group injected and ADC channel affected to ADC group injected\n @note   Parameters of this structure are shared within 2 scopes:\n          - Scope channel: InjectedChannel, InjectedRank, InjectedSamplingTime , InjectedSingleDiff, InjectedOffsetNumber, InjectedOffset, InjectedOffsetSign, InjectedOffsetSaturation\n          - Scope ADC group injected (affects all channels of injected group): InjectedNbrOfConversion, InjectedDiscontinuousConvMode,\n            AutoInjectedConv, QueueInjectedContext, ExternalTrigInjecConv, ExternalTrigInjecConvEdge, InjecOversamplingMode, InjecOversampling.\n @note   The setting of these parameters by function HAL_ADCEx_InjectedConfigChannel() is conditioned to ADC state.\n         ADC state can be either:\n          - For all parameters: ADC disabled (this is the only possible ADC state to modify parameter 'InjectedSingleDiff')\n          - For parameters 'InjectedDiscontinuousConvMode', 'QueueInjectedContext', 'InjecOversampling': ADC enabled without conversion on going on injected group.\n          - For parameters 'InjectedSamplingTime', 'InjectedOffset', 'InjectedOffsetNumber', 'InjectedOffsetSign', 'InjectedOffsetSaturation', 'AutoInjectedConv': ADC enabled without conversion on going on regular and injected groups.\n          - For parameters 'InjectedChannel', 'InjectedRank', 'InjectedNbrOfConversion', 'ExternalTrigInjecConv', 'ExternalTrigInjecConvEdge': ADC enabled and while conversion on going\n            on ADC groups regular and injected.\n         If ADC is not in the appropriate state to modify some parameters, these parameters setting is bypassed\n         without error reporting (as it can be the expected behavior in case of intended action to update another parameter (which fulfills the ADC state condition) on the fly)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InjectionConfTypeDef {
    #[doc = "< Specifies the channel to configure into ADC group injected.\nThis parameter can be a value of @ref ADC_HAL_EC_CHANNEL\nNote: Depending on devices and ADC instances, some channels may not be available on device package pins. Refer to device datasheet for channels availability."]
    pub InjectedChannel: u32,
    #[doc = "< Specifies the rank in the ADC group injected sequencer.\nThis parameter must be a value of @ref ADC_INJ_SEQ_RANKS.\nNote: to disable a channel or change order of conversion sequencer, rank containing a previous channel setting can be overwritten by\nthe new channel setting (or parameter number of conversions adjusted)"]
    pub InjectedRank: u32,
    #[doc = "< Sampling time value to be set for the selected channel.\nUnit: ADC clock cycles.\nConversion time is the addition of sampling time and processing time\n(12.5 ADC clock cycles at ADC resolution 12 bits, 10.5 cycles at 10 bits, 8.5 cycles at 8 bits, 6.5 cycles at 6 bits).\nThis parameter can be a value of @ref ADC_HAL_EC_CHANNEL_SAMPLINGTIME.\nCaution: This parameter applies to a channel that can be used in a regular and/or injected group.\nIt overwrites the last setting.\nNote: In case of usage of internal measurement channels (VrefInt/Vbat/TempSensor),\nsampling time constraints must be respected (sampling time can be adjusted in function of ADC clock frequency and sampling time setting)\nRefer to device datasheet for timings values."]
    pub InjectedSamplingTime: u32,
    #[doc = "< Selection of single-ended or differential input.\nIn differential mode: Differential measurement is between the selected channel 'i' (positive input) and channel 'i+1' (negative input).\nOnly channel 'i' has to be configured, channel 'i+1' is configured automatically.\nThis parameter must be a value of @ref ADC_HAL_EC_CHANNEL_SINGLE_DIFF_ENDING.\nCaution: This parameter applies to a channel that can be used in a regular and/or injected group.\nIt overwrites the last setting.\nNote: Refer to Reference Manual to ensure the selected channel is available in differential mode.\nNote: When configuring a channel 'i' in differential mode, the channel 'i+1' is not usable separately.\nNote: This parameter must be modified when ADC is disabled (before ADC start conversion or after ADC stop conversion).\nIf ADC is enabled, this parameter setting is bypassed without error reporting (as it can be the expected behavior in case\nof another parameter update on the fly)"]
    pub InjectedSingleDiff: u32,
    #[doc = "< Selects the offset number.\nThis parameter can be a value of @ref ADC_HAL_EC_OFFSET_NB.\nCaution: Only one offset is allowed per channel. This parameter overwrites the last setting."]
    pub InjectedOffsetNumber: u32,
    #[doc = "< Defines the offset to be applied on the raw converted data.\nOffset value must be a positive number.\nDepending of ADC resolution selected (12, 10, 8 or 6 bits), this parameter must be a number\nbetween Min_Data = 0x000 and Max_Data = 0xFFF,  0x3FF, 0xFF or 0x3F respectively.\nNote: This parameter must be modified when no conversion is on going on both regular and injected groups (ADC disabled, or ADC enabled\nwithout continuous mode or external trigger that could launch a conversion)."]
    pub InjectedOffset: u32,
    #[doc = "< Define if the offset should be subtracted (negative sign) or added (positive sign) from or to the raw converted data.\nThis parameter can be a value of @ref ADCEx_OffsetSign.\nNote: This parameter must be modified when no conversion is on going on both regular and injected groups (ADC disabled, or ADC enabled without continuous mode or external trigger that could launch a conversion)."]
    pub InjectedOffsetSign: u32,
    #[doc = "< Define if the offset should be saturated upon under or over flow.\nThis parameter value can be ENABLE or DISABLE.\nNote: This parameter must be modified when no conversion is on going on both regular and injected groups (ADC disabled, or ADC enabled without continuous mode or external trigger that could launch a conversion)."]
    pub InjectedOffsetSaturation: FunctionalState,
    #[doc = "< Specifies the number of ranks that will be converted within the ADC group injected sequencer.\nTo use the injected group sequencer and convert several ranks, parameter 'ScanConvMode' must be enabled.\nThis parameter must be a number between Min_Data = 1 and Max_Data = 4.\nCaution: this setting impacts the entire injected group. Therefore, call of HAL_ADCEx_InjectedConfigChannel() to\nconfigure a channel on injected group can impact the configuration of other channels previously set."]
    pub InjectedNbrOfConversion: u32,
    #[doc = "< Specifies whether the conversions sequence of ADC group injected is performed in Complete-sequence/Discontinuous-sequence\n(main sequence subdivided in successive parts).\nDiscontinuous mode is used only if sequencer is enabled (parameter 'ScanConvMode'). If sequencer is disabled, this parameter is discarded.\nDiscontinuous mode can be enabled only if continuous mode is disabled.\nThis parameter can be set to ENABLE or DISABLE.\nNote: This parameter must be modified when ADC is disabled (before ADC start conversion or after ADC stop conversion).\nNote: For injected group, discontinuous mode converts the sequence channel by channel (discontinuous length fixed to 1 rank).\nCaution: this setting impacts the entire injected group. Therefore, call of HAL_ADCEx_InjectedConfigChannel() to\nconfigure a channel on injected group can impact the configuration of other channels previously set."]
    pub InjectedDiscontinuousConvMode: FunctionalState,
    #[doc = "< Enables or disables the selected ADC group injected automatic conversion after regular one\nThis parameter can be set to ENABLE or DISABLE.\nNote: To use Automatic injected conversion, discontinuous mode must be disabled ('DiscontinuousConvMode' and 'InjectedDiscontinuousConvMode' set to DISABLE)\nNote: To use Automatic injected conversion, injected group external triggers must be disabled ('ExternalTrigInjecConv' set to ADC_INJECTED_SOFTWARE_START)\nNote: In case of DMA used with regular group: if DMA configured in normal mode (single shot) JAUTO will be stopped upon DMA transfer complete.\nTo maintain JAUTO always enabled, DMA must be configured in circular mode.\nCaution: this setting impacts the entire injected group. Therefore, call of HAL_ADCEx_InjectedConfigChannel() to\nconfigure a channel on injected group can impact the configuration of other channels previously set."]
    pub AutoInjectedConv: FunctionalState,
    #[doc = "< Specifies whether the context queue feature is enabled.\nThis parameter can be set to ENABLE or DISABLE.\nIf context queue is enabled, injected sequencer&channels configurations are queued on up to 2 contexts. If a\nnew injected context is set when queue is full, error is triggered by interruption and through function\n'HAL_ADCEx_InjectedQueueOverflowCallback'.\nCaution: This feature request that the sequence is fully configured before injected conversion start.\nTherefore, configure channels with as many calls to HAL_ADCEx_InjectedConfigChannel() as the 'InjectedNbrOfConversion' parameter.\nCaution: this setting impacts the entire injected group. Therefore, call of HAL_ADCEx_InjectedConfigChannel() to\nconfigure a channel on injected group can impact the configuration of other channels previously set.\nNote: This parameter must be modified when ADC is disabled (before ADC start conversion or after ADC stop conversion)."]
    pub QueueInjectedContext: FunctionalState,
    #[doc = "< Selects the external event used to trigger the conversion start of injected group.\nIf set to ADC_INJECTED_SOFTWARE_START, external triggers are disabled and software trigger is used instead.\nThis parameter can be a value of @ref ADC_injected_external_trigger_source.\nCaution: this setting impacts the entire injected group. Therefore, call of HAL_ADCEx_InjectedConfigChannel() to\nconfigure a channel on injected group can impact the configuration of other channels previously set."]
    pub ExternalTrigInjecConv: u32,
    #[doc = "< Selects the external trigger edge of injected group.\nThis parameter can be a value of @ref ADC_injected_external_trigger_edge.\nIf trigger source is set to ADC_INJECTED_SOFTWARE_START, this parameter is discarded.\nCaution: this setting impacts the entire injected group. Therefore, call of HAL_ADCEx_InjectedConfigChannel() to\nconfigure a channel on injected group can impact the configuration of other channels previously set."]
    pub ExternalTrigInjecConvEdge: u32,
    #[doc = "< Specifies whether the oversampling feature is enabled or disabled.\nThis parameter can be set to ENABLE or DISABLE.\nNote: This parameter can be modified only if there is no conversion is ongoing (both ADSTART and JADSTART cleared)."]
    pub InjecOversamplingMode: FunctionalState,
    #[doc = "< Specifies the Oversampling parameters.\nCaution: this setting overwrites the previous oversampling configuration if oversampling already enabled.\nNote: This parameter can be modified only if there is no conversion is ongoing (both ADSTART and JADSTART cleared)."]
    pub InjecOversampling: ADC_InjOversamplingTypeDef,
}
#[doc = " @brief  Structure definition of ADC multimode\n @note   The setting of these parameters by function HAL_ADCEx_MultiModeConfigChannel() is conditioned by ADCs state (both Master and Slave ADCs).\n         Both Master and Slave ADCs must be disabled."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_MultiModeTypeDef {
    #[doc = "< Configures the ADC to operate in independent or multimode.\nThis parameter can be a value of @ref ADC_HAL_EC_MULTI_MODE."]
    pub Mode: u32,
    #[doc = "< Configures the DMA mode for multimode ADC:\nselection whether 2 DMA channels (each ADC uses its own DMA channel) or 1 DMA channel (one DMA channel for both ADC, DMA of ADC master)\nThis parameter can be a value of @ref ADC_HAL_EC_MULTI_DMA_TRANSFER_RESOLUTION."]
    pub DMAAccessMode: u32,
    #[doc = "< Configures the Delay between 2 sampling phases.\nThis parameter can be a value of @ref ADC_HAL_EC_MULTI_TWOSMP_DELAY.\nDelay range depends on selected resolution:\nfrom 1 to 12 clock cycles for 12 bits, from 1 to 10 clock cycles for 10 bits,\nfrom 1 to 8 clock cycles for 8 bits, from 1 to 6 clock cycles for 6 bits."]
    pub TwoSamplingDelay: u32,
}
extern "C" {
    #[doc = " @addtogroup ADCEx_Exported_Functions_Group1\n @{"]
    pub fn HAL_ADCEx_Calibration_Start(
        hadc: *mut ADC_HandleTypeDef,
        SingleDiff: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_Calibration_GetValue(hadc: *mut ADC_HandleTypeDef, SingleDiff: u32) -> u32;
}
extern "C" {
    pub fn HAL_ADCEx_Calibration_SetValue(
        hadc: *mut ADC_HandleTypeDef,
        SingleDiff: u32,
        CalibrationFactor: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStart(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStop(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedPollForConversion(
        hadc: *mut ADC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStart_IT(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStop_IT(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeStart_DMA(
        hadc: *mut ADC_HandleTypeDef,
        pData: *mut u32,
        Length: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeStop_DMA(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeGetValue(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedGetValue(hadc: *mut ADC_HandleTypeDef, InjectedRank: u32) -> u32;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedConvCpltCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_InjectedQueueOverflowCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_LevelOutOfWindow2Callback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_LevelOutOfWindow3Callback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_EndOfSamplingCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_RegularStop(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_RegularStop_IT(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_RegularStop_DMA(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_RegularMultiModeStop_DMA(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup ADCEx_Exported_Functions_Group2\n @{"]
    pub fn HAL_ADCEx_InjectedConfigChannel(
        hadc: *mut ADC_HandleTypeDef,
        sConfigInjected: *mut ADC_InjectionConfTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeConfigChannel(
        hadc: *mut ADC_HandleTypeDef,
        multimode: *mut ADC_MultiModeTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_EnableInjectedQueue(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_DisableInjectedQueue(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_DisableVoltageRegulator(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADCEx_EnterADCDeepPowerDownMode(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup ADC_Exported_Functions_Group1\n @brief    Initialization and Configuration functions\n @{"]
    pub fn HAL_ADC_Init(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_DeInit(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_MspInit(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_MspDeInit(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    #[doc = " @addtogroup ADC_Exported_Functions_Group2\n @brief    IO operation functions\n @{"]
    pub fn HAL_ADC_Start(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_Stop(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_PollForConversion(
        hadc: *mut ADC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_PollForEvent(
        hadc: *mut ADC_HandleTypeDef,
        EventType: u32,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_Start_IT(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_Stop_IT(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_Start_DMA(
        hadc: *mut ADC_HandleTypeDef,
        pData: *mut u32,
        Length: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_Stop_DMA(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_GetValue(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_ADC_StartSampling(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_StopSampling(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_IRQHandler(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_ConvCpltCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_ConvHalfCpltCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_LevelOutOfWindowCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_ErrorCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    #[doc = " @addtogroup ADC_Exported_Functions_Group3 Peripheral Control functions\n  @brief    Peripheral Control functions\n @{"]
    pub fn HAL_ADC_ConfigChannel(
        hadc: *mut ADC_HandleTypeDef,
        sConfig: *mut ADC_ChannelConfTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_ADC_AnalogWDGConfig(
        hadc: *mut ADC_HandleTypeDef,
        AnalogWDGConfig: *mut ADC_AnalogWDGConfTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup ADC_Exported_Functions_Group4\n @{"]
    pub fn HAL_ADC_GetState(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_ADC_GetError(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    #[doc = " @addtogroup ADC_Private_Functions ADC Private Functions\n @{"]
    pub fn ADC_ConversionStop(
        hadc: *mut ADC_HandleTypeDef,
        ConversionGroup: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn ADC_Enable(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn ADC_Disable(hadc: *mut ADC_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn ADC_DMAConvCplt(hdma: *mut DMA_HandleTypeDef);
}
extern "C" {
    pub fn ADC_DMAHalfConvCplt(hdma: *mut DMA_HandleTypeDef);
}
extern "C" {
    pub fn ADC_DMAError(hdma: *mut DMA_HandleTypeDef);
}
pub const EXTI_CallbackIDTypeDef_HAL_EXTI_COMMON_CB_ID: EXTI_CallbackIDTypeDef = 0;
#[doc = " @defgroup EXTI_Exported_Types EXTI Exported Types\n @{"]
pub type EXTI_CallbackIDTypeDef = cty::c_uint;
#[doc = " @brief  EXTI Handle structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_HandleTypeDef {
    #[doc = "<  Exti line number"]
    pub Line: u32,
    #[doc = "<  Exti pending callback"]
    pub PendingCallback: ::core::option::Option<unsafe extern "C" fn()>,
}
#[doc = " @brief  EXTI Configuration structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_ConfigTypeDef {
    #[doc = "< The Exti line to be configured. This parameter\ncan be a value of @ref EXTI_Line"]
    pub Line: u32,
    #[doc = "< The Exit Mode to be configured for a core.\nThis parameter can be a combination of @ref EXTI_Mode"]
    pub Mode: u32,
    #[doc = "< The Exti Trigger to be configured. This parameter\ncan be a value of @ref EXTI_Trigger"]
    pub Trigger: u32,
    #[doc = "< The Exti GPIO multiplexer selection to be configured.\nThis parameter is only possible for line 0 to 15. It\ncan be a value of @ref EXTI_GPIOSel"]
    pub GPIOSel: u32,
}
extern "C" {
    #[doc = " @defgroup EXTI_Exported_Functions_Group1 Configuration functions\n @brief    Configuration functions\n @{"]
    pub fn HAL_EXTI_SetConfigLine(
        hexti: *mut EXTI_HandleTypeDef,
        pExtiConfig: *mut EXTI_ConfigTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_EXTI_GetConfigLine(
        hexti: *mut EXTI_HandleTypeDef,
        pExtiConfig: *mut EXTI_ConfigTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_EXTI_ClearConfigLine(hexti: *mut EXTI_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_EXTI_RegisterCallback(
        hexti: *mut EXTI_HandleTypeDef,
        CallbackID: EXTI_CallbackIDTypeDef,
        pPendingCbfn: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_EXTI_GetHandle(hexti: *mut EXTI_HandleTypeDef, ExtiLine: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @defgroup EXTI_Exported_Functions_Group2 IO operation functions\n @brief    IO operation functions\n @{"]
    pub fn HAL_EXTI_IRQHandler(hexti: *mut EXTI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_EXTI_GetPending(hexti: *mut EXTI_HandleTypeDef, Edge: u32) -> u32;
}
extern "C" {
    pub fn HAL_EXTI_ClearPending(hexti: *mut EXTI_HandleTypeDef, Edge: u32);
}
extern "C" {
    pub fn HAL_EXTI_GenerateSWI(hexti: *mut EXTI_HandleTypeDef);
}
#[doc = " @brief  FLASH Erase structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_EraseInitTypeDef {
    #[doc = "< Mass erase or page erase.\nThis parameter can be a value of @ref FLASH_Type_Erase"]
    pub TypeErase: u32,
    #[doc = "< Select bank to erase.\nThis parameter must be a value of @ref FLASH_Banks\n(FLASH_BANK_BOTH should be used only for mass erase)"]
    pub Banks: u32,
    #[doc = "< Initial Flash page to erase when page erase is disabled.\nThis parameter must be a value between 0 and (max number of pages in the bank - 1)\n(eg : 127 for 512KB dual bank)"]
    pub Page: u32,
    #[doc = "< Number of pages to be erased.\nThis parameter must be a value between 1 and (max number of pages in the bank - value of initial page)"]
    pub NbPages: u32,
}
#[doc = " @brief  FLASH Option Bytes Program structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_OBProgramInitTypeDef {
    #[doc = "< Option byte to be configured.\nThis parameter can be a combination of the values of @ref FLASH_OB_Type"]
    pub OptionType: u32,
    #[doc = "< Write protection area to be programmed (used for OPTIONBYTE_WRP).\nOnly one WRP area could be programmed at the same time.\nThis parameter can be value of @ref FLASH_OB_WRP_Area"]
    pub WRPArea: u32,
    #[doc = "< Write protection start offset (used for OPTIONBYTE_WRP).\nThis parameter must be a value between 0 and (max number of pages in the bank - 1)"]
    pub WRPStartOffset: u32,
    #[doc = "< Write protection end offset (used for OPTIONBYTE_WRP).\nThis parameter must be a value between WRPStartOffset and (max number of pages in the bank - 1)"]
    pub WRPEndOffset: u32,
    #[doc = "< Set the read protection level.. (used for OPTIONBYTE_RDP).\nThis parameter can be a value of @ref FLASH_OB_Read_Protection"]
    pub RDPLevel: u32,
    #[doc = "< User option byte(s) to be configured (used for OPTIONBYTE_USER).\nThis parameter can be a combination of @ref FLASH_OB_USER_Type"]
    pub USERType: u32,
    #[doc = "< Value of the user option byte (used for OPTIONBYTE_USER).\nThis parameter can be a combination of @ref FLASH_OB_USER_BOR_LEVEL,\n@ref FLASH_OB_USER_nRST_STOP, @ref FLASH_OB_USER_nRST_STANDBY,\n@ref FLASH_OB_USER_nRST_SHUTDOWN, @ref FLASH_OB_USER_IWDG_SW,\n@ref FLASH_OB_USER_IWDG_STOP, @ref FLASH_OB_USER_IWDG_STANDBY,\n@ref FLASH_OB_USER_WWDG_SW, @ref FLASH_OB_USER_BFB2 (*),\n@ref FLASH_OB_USER_nBOOT1, @ref FLASH_OB_USER_SRAM_PE,\n@ref FLASH_OB_USER_CCMSRAM_RST\n@note (*) availability depends on devices"]
    pub USERConfig: u32,
    #[doc = "< Configuration of the PCROP (used for OPTIONBYTE_PCROP).\nThis parameter must be a combination of @ref FLASH_Banks (except FLASH_BANK_BOTH)\nand @ref FLASH_OB_PCROP_RDP"]
    pub PCROPConfig: u32,
    #[doc = "< PCROP Start address (used for OPTIONBYTE_PCROP).\nThis parameter must be a value between begin and end of bank\n=> Be careful of the bank swapping for the address"]
    pub PCROPStartAddr: u32,
    #[doc = "< PCROP End address (used for OPTIONBYTE_PCROP).\nThis parameter must be a value between PCROP Start address and end of bank"]
    pub PCROPEndAddr: u32,
    #[doc = "< Set the Boot Lock (used for OPTIONBYTE_BOOT_LOCK).\nThis parameter can be a value of @ref FLASH_OB_Boot_Lock"]
    pub BootEntryPoint: u32,
    #[doc = "< Bank of securable memory area to be programmed (used for OPTIONBYTE_SEC).\nOnly one securable memory area could be programmed at the same time.\nThis parameter can be one of the following values:\nFLASH_BANK_1: Securable memory area to be programmed in bank 1\nFLASH_BANK_2: Securable memory area to be programmed in bank 2 (*)\n@note (*) availability depends on devices"]
    pub SecBank: u32,
    #[doc = "< Size of securable memory area to be programmed (used for OPTIONBYTE_SEC),\nin number of pages. Securable memory area is starting from first page of the bank.\nOnly one securable memory could be programmed at the same time.\nThis parameter must be a value between 0 and (max number of pages in the bank - 1)"]
    pub SecSize: u32,
}
pub const FLASH_ProcedureTypeDef_FLASH_PROC_NONE: FLASH_ProcedureTypeDef = 0;
pub const FLASH_ProcedureTypeDef_FLASH_PROC_PAGE_ERASE: FLASH_ProcedureTypeDef = 1;
pub const FLASH_ProcedureTypeDef_FLASH_PROC_MASS_ERASE: FLASH_ProcedureTypeDef = 2;
pub const FLASH_ProcedureTypeDef_FLASH_PROC_PROGRAM: FLASH_ProcedureTypeDef = 3;
pub const FLASH_ProcedureTypeDef_FLASH_PROC_PROGRAM_LAST: FLASH_ProcedureTypeDef = 4;
#[doc = " @brief  FLASH Procedure structure definition"]
pub type FLASH_ProcedureTypeDef = cty::c_uint;
pub const FLASH_CacheTypeDef_FLASH_CACHE_DISABLED: FLASH_CacheTypeDef = 0;
pub const FLASH_CacheTypeDef_FLASH_CACHE_ICACHE_ENABLED: FLASH_CacheTypeDef = 1;
pub const FLASH_CacheTypeDef_FLASH_CACHE_DCACHE_ENABLED: FLASH_CacheTypeDef = 2;
pub const FLASH_CacheTypeDef_FLASH_CACHE_ICACHE_DCACHE_ENABLED: FLASH_CacheTypeDef = 3;
#[doc = " @brief  FLASH Cache structure definition"]
pub type FLASH_CacheTypeDef = cty::c_uint;
#[doc = " @brief  FLASH handle Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_ProcessTypeDef {
    pub Lock: HAL_LockTypeDef,
    pub ErrorCode: u32,
    pub ProcedureOnGoing: FLASH_ProcedureTypeDef,
    pub Address: u32,
    pub Bank: u32,
    pub Page: u32,
    pub NbPagesToErase: u32,
    pub CacheToReactivate: FLASH_CacheTypeDef,
}
extern "C" {
    #[doc = " @addtogroup FLASHEx_Exported_Functions_Group1\n @{"]
    pub fn HAL_FLASHEx_Erase(
        pEraseInit: *mut FLASH_EraseInitTypeDef,
        PageError: *mut u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASHEx_Erase_IT(pEraseInit: *mut FLASH_EraseInitTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASHEx_OBProgram(pOBInit: *mut FLASH_OBProgramInitTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASHEx_OBGetConfig(pOBInit: *mut FLASH_OBProgramInitTypeDef);
}
extern "C" {
    pub fn HAL_FLASHEx_EnableSecMemProtection(Bank: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASHEx_EnableDebugger();
}
extern "C" {
    pub fn HAL_FLASHEx_DisableDebugger();
}
extern "C" {
    #[doc = " @addtogroup FLASHEx_Private_Functions\n @{"]
    pub fn FLASH_PageErase(Page: u32, Banks: u32);
}
extern "C" {
    pub fn FLASH_FlushCaches();
}
extern "C" {
    #[doc = " @addtogroup FLASH_RAMFUNC_Exported_Functions_Group1\n @{"]
    pub fn HAL_FLASHEx_EnableRunPowerDown() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASHEx_DisableRunPowerDown() -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @defgroup FLASH_Exported_Variables FLASH Exported Variables\n @{"]
    pub static mut pFlash: FLASH_ProcessTypeDef;
}
extern "C" {
    #[doc = " @addtogroup FLASH_Exported_Functions_Group1\n @{"]
    pub fn HAL_FLASH_Program(TypeProgram: u32, Address: u32, Data: u64) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASH_Program_IT(TypeProgram: u32, Address: u32, Data: u64) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASH_IRQHandler();
}
extern "C" {
    pub fn HAL_FLASH_EndOfOperationCallback(ReturnValue: u32);
}
extern "C" {
    pub fn HAL_FLASH_OperationErrorCallback(ReturnValue: u32);
}
extern "C" {
    #[doc = " @addtogroup FLASH_Exported_Functions_Group2\n @{"]
    pub fn HAL_FLASH_Unlock() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASH_Lock() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASH_OB_Unlock() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASH_OB_Lock() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_FLASH_OB_Launch() -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup FLASH_Exported_Functions_Group3\n @{"]
    pub fn HAL_FLASH_GetError() -> u32;
}
extern "C" {
    #[doc = " @addtogroup FLASH_Private_Functions\n @{"]
    pub fn FLASH_WaitForLastOperation(Timeout: u32) -> HAL_StatusTypeDef;
}
#[doc = " @brief  PWR PVD configuration structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWR_PVDTypeDef {
    #[doc = "< PVDLevel: Specifies the PVD detection level.\nThis parameter can be a value of @ref PWR_PVD_detection_level."]
    pub PVDLevel: u32,
    #[doc = "< Mode: Specifies the operating mode for the selected pins.\nThis parameter can be a value of @ref PWR_PVD_Mode."]
    pub Mode: u32,
}
#[doc = " @brief  PWR PVM configuration structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWR_PVMTypeDef {
    #[doc = "< PVMType: Specifies which voltage is monitored and against which threshold.\nThis parameter can be a value of @ref PWREx_PVM_Type."]
    pub PVMType: u32,
    #[doc = "< Mode: Specifies the operating mode for the selected pins.\nThis parameter can be a value of @ref PWREx_PVM_Mode."]
    pub Mode: u32,
}
extern "C" {
    #[doc = " @addtogroup PWREx_Exported_Functions_Group1 Extended Peripheral Control functions\n @{"]
    pub fn HAL_PWREx_GetVoltageRange() -> u32;
}
extern "C" {
    pub fn HAL_PWREx_ControlVoltageScaling(VoltageScaling: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWREx_EnableBatteryCharging(ResistorSelection: u32);
}
extern "C" {
    pub fn HAL_PWREx_DisableBatteryCharging();
}
extern "C" {
    pub fn HAL_PWREx_EnableInternalWakeUpLine();
}
extern "C" {
    pub fn HAL_PWREx_DisableInternalWakeUpLine();
}
extern "C" {
    pub fn HAL_PWREx_EnableGPIOPullUp(GPIO: u32, GPIONumber: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWREx_DisableGPIOPullUp(GPIO: u32, GPIONumber: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWREx_EnableGPIOPullDown(GPIO: u32, GPIONumber: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWREx_DisableGPIOPullDown(GPIO: u32, GPIONumber: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWREx_EnablePullUpPullDownConfig();
}
extern "C" {
    pub fn HAL_PWREx_DisablePullUpPullDownConfig();
}
extern "C" {
    pub fn HAL_PWREx_EnableSRAM2ContentRetention();
}
extern "C" {
    pub fn HAL_PWREx_DisableSRAM2ContentRetention();
}
extern "C" {
    pub fn HAL_PWREx_EnablePVM1();
}
extern "C" {
    pub fn HAL_PWREx_DisablePVM1();
}
extern "C" {
    pub fn HAL_PWREx_EnablePVM2();
}
extern "C" {
    pub fn HAL_PWREx_DisablePVM2();
}
extern "C" {
    pub fn HAL_PWREx_EnablePVM3();
}
extern "C" {
    pub fn HAL_PWREx_DisablePVM3();
}
extern "C" {
    pub fn HAL_PWREx_EnablePVM4();
}
extern "C" {
    pub fn HAL_PWREx_DisablePVM4();
}
extern "C" {
    pub fn HAL_PWREx_ConfigPVM(sConfigPVM: *mut PWR_PVMTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWREx_EnableLowPowerRunMode();
}
extern "C" {
    pub fn HAL_PWREx_DisableLowPowerRunMode() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWREx_EnterSTOP0Mode(STOPEntry: u8);
}
extern "C" {
    pub fn HAL_PWREx_EnterSTOP1Mode(STOPEntry: u8);
}
extern "C" {
    pub fn HAL_PWREx_EnterSHUTDOWNMode();
}
extern "C" {
    pub fn HAL_PWREx_PVD_PVM_IRQHandler();
}
extern "C" {
    pub fn HAL_PWREx_PVM1Callback();
}
extern "C" {
    pub fn HAL_PWREx_PVM2Callback();
}
extern "C" {
    pub fn HAL_PWREx_PVM3Callback();
}
extern "C" {
    pub fn HAL_PWREx_PVM4Callback();
}
extern "C" {
    pub fn HAL_PWREx_EnableUCPDStandbyMode();
}
extern "C" {
    pub fn HAL_PWREx_DisableUCPDStandbyMode();
}
extern "C" {
    pub fn HAL_PWREx_EnableUCPDDeadBattery();
}
extern "C" {
    pub fn HAL_PWREx_DisableUCPDDeadBattery();
}
extern "C" {
    #[doc = " @addtogroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions\n @{"]
    pub fn HAL_PWR_DeInit();
}
extern "C" {
    pub fn HAL_PWR_EnableBkUpAccess();
}
extern "C" {
    pub fn HAL_PWR_DisableBkUpAccess();
}
extern "C" {
    #[doc = " @addtogroup PWR_Exported_Functions_Group2 Peripheral Control functions\n @{"]
    pub fn HAL_PWR_ConfigPVD(sConfigPVD: *mut PWR_PVDTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_PWR_EnablePVD();
}
extern "C" {
    pub fn HAL_PWR_DisablePVD();
}
extern "C" {
    pub fn HAL_PWR_EnableWakeUpPin(WakeUpPinPolarity: u32);
}
extern "C" {
    pub fn HAL_PWR_DisableWakeUpPin(WakeUpPinx: u32);
}
extern "C" {
    pub fn HAL_PWR_EnterSLEEPMode(Regulator: u32, SLEEPEntry: u8);
}
extern "C" {
    pub fn HAL_PWR_EnterSTOPMode(Regulator: u32, STOPEntry: u8);
}
extern "C" {
    pub fn HAL_PWR_EnterSTANDBYMode();
}
extern "C" {
    pub fn HAL_PWR_EnableSleepOnExit();
}
extern "C" {
    pub fn HAL_PWR_DisableSleepOnExit();
}
extern "C" {
    pub fn HAL_PWR_EnableSEVOnPend();
}
extern "C" {
    pub fn HAL_PWR_DisableSEVOnPend();
}
extern "C" {
    pub fn HAL_PWR_PVDCallback();
}
#[doc = " @brief UART Init Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UART_InitTypeDef {
    #[doc = "< This member configures the UART communication baud rate.\nThe baud rate register is computed using the following formula:\nLPUART:\n=======\nBaud Rate Register = ((256 * lpuart_ker_ckpres) / ((huart->Init.BaudRate)))\nwhere lpuart_ker_ck_pres is the UART input clock divided by a prescaler\nUART:\n=====\n- If oversampling is 16 or in LIN mode,\nBaud Rate Register = ((uart_ker_ckpres) / ((huart->Init.BaudRate)))\n- If oversampling is 8,\nBaud Rate Register[15:4] = ((2 * uart_ker_ckpres) /\n((huart->Init.BaudRate)))[15:4]\nBaud Rate Register[3] =  0\nBaud Rate Register[2:0] =  (((2 * uart_ker_ckpres) /\n((huart->Init.BaudRate)))[3:0]) >> 1\nwhere uart_ker_ck_pres is the UART input clock divided by a prescaler"]
    pub BaudRate: u32,
    #[doc = "< Specifies the number of data bits transmitted or received in a frame.\nThis parameter can be a value of @ref UARTEx_Word_Length."]
    pub WordLength: u32,
    #[doc = "< Specifies the number of stop bits transmitted.\nThis parameter can be a value of @ref UART_Stop_Bits."]
    pub StopBits: u32,
    #[doc = "< Specifies the parity mode.\nThis parameter can be a value of @ref UART_Parity\n@note When parity is enabled, the computed parity is inserted\nat the MSB position of the transmitted data (9th bit when\nthe word length is set to 9 data bits; 8th bit when the\nword length is set to 8 data bits)."]
    pub Parity: u32,
    #[doc = "< Specifies whether the Receive or Transmit mode is enabled or disabled.\nThis parameter can be a value of @ref UART_Mode."]
    pub Mode: u32,
    #[doc = "< Specifies whether the hardware flow control mode is enabled\nor disabled.\nThis parameter can be a value of @ref UART_Hardware_Flow_Control."]
    pub HwFlowCtl: u32,
    #[doc = "< Specifies whether the Over sampling 8 is enabled or disabled,\nto achieve higher speed (up to f_PCLK/8).\nThis parameter can be a value of @ref UART_Over_Sampling."]
    pub OverSampling: u32,
    #[doc = "< Specifies whether a single sample or three samples' majority vote is selected.\nSelecting the single sample method increases the receiver tolerance to clock\ndeviations. This parameter can be a value of @ref UART_OneBit_Sampling."]
    pub OneBitSampling: u32,
    #[doc = "< Specifies the prescaler value used to divide the UART clock source.\nThis parameter can be a value of @ref UART_ClockPrescaler."]
    pub ClockPrescaler: u32,
}
#[doc = " @brief  UART Advanced Features initialization structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UART_AdvFeatureInitTypeDef {
    #[doc = "< Specifies which advanced UART features is initialized. Several\nAdvanced Features may be initialized at the same time .\nThis parameter can be a value of\n@ref UART_Advanced_Features_Initialization_Type."]
    pub AdvFeatureInit: u32,
    #[doc = "< Specifies whether the TX pin active level is inverted.\nThis parameter can be a value of @ref UART_Tx_Inv."]
    pub TxPinLevelInvert: u32,
    #[doc = "< Specifies whether the RX pin active level is inverted.\nThis parameter can be a value of @ref UART_Rx_Inv."]
    pub RxPinLevelInvert: u32,
    #[doc = "< Specifies whether data are inverted (positive/direct logic\nvs negative/inverted logic).\nThis parameter can be a value of @ref UART_Data_Inv."]
    pub DataInvert: u32,
    #[doc = "< Specifies whether TX and RX pins are swapped.\nThis parameter can be a value of @ref UART_Rx_Tx_Swap."]
    pub Swap: u32,
    #[doc = "< Specifies whether the reception overrun detection is disabled.\nThis parameter can be a value of @ref UART_Overrun_Disable."]
    pub OverrunDisable: u32,
    #[doc = "< Specifies whether the DMA is disabled in case of reception error.\nThis parameter can be a value of @ref UART_DMA_Disable_on_Rx_Error."]
    pub DMADisableonRxError: u32,
    #[doc = "< Specifies whether auto Baud rate detection is enabled.\nThis parameter can be a value of @ref UART_AutoBaudRate_Enable."]
    pub AutoBaudRateEnable: u32,
    #[doc = "< If auto Baud rate detection is enabled, specifies how the rate\ndetection is carried out.\nThis parameter can be a value of @ref UART_AutoBaud_Rate_Mode."]
    pub AutoBaudRateMode: u32,
    #[doc = "< Specifies whether MSB is sent first on UART line.\nThis parameter can be a value of @ref UART_MSB_First."]
    pub MSBFirst: u32,
}
#[doc = " @brief HAL UART State definition\n @note  HAL UART State value is a combination of 2 different substates:\n        gState and RxState (see @ref UART_State_Definition).\n        - gState contains UART state information related to global Handle management\n          and also information related to Tx operations.\n          gState value coding follow below described bitmap :\n          b7-b6  Error information\n             00 : No Error\n             01 : (Not Used)\n             10 : Timeout\n             11 : Error\n          b5     Peripheral initialization status\n             0  : Reset (Peripheral not initialized)\n             1  : Init done (Peripheral initialized. HAL UART Init function already called)\n          b4-b3  (not used)\n             xx : Should be set to 00\n          b2     Intrinsic process state\n             0  : Ready\n             1  : Busy (Peripheral busy with some configuration or internal operations)\n          b1     (not used)\n             x  : Should be set to 0\n          b0     Tx state\n             0  : Ready (no Tx operation ongoing)\n             1  : Busy (Tx operation ongoing)\n        - RxState contains information related to Rx operations.\n          RxState value coding follow below described bitmap :\n          b7-b6  (not used)\n             xx : Should be set to 00\n          b5     Peripheral initialization status\n             0  : Reset (Peripheral not initialized)\n             1  : Init done (Peripheral initialized)\n          b4-b2  (not used)\n            xxx : Should be set to 000\n          b1     Rx state\n             0  : Ready (no Rx operation ongoing)\n             1  : Busy (Rx operation ongoing)\n          b0     (not used)\n             x  : Should be set to 0."]
pub type HAL_UART_StateTypeDef = u32;
#[doc = "< PCLK1 clock source"]
pub const UART_ClockSourceTypeDef_UART_CLOCKSOURCE_PCLK1: UART_ClockSourceTypeDef = 0;
#[doc = "< PCLK2 clock source"]
pub const UART_ClockSourceTypeDef_UART_CLOCKSOURCE_PCLK2: UART_ClockSourceTypeDef = 1;
#[doc = "< HSI clock source"]
pub const UART_ClockSourceTypeDef_UART_CLOCKSOURCE_HSI: UART_ClockSourceTypeDef = 2;
#[doc = "< SYSCLK clock source"]
pub const UART_ClockSourceTypeDef_UART_CLOCKSOURCE_SYSCLK: UART_ClockSourceTypeDef = 4;
#[doc = "< LSE clock source"]
pub const UART_ClockSourceTypeDef_UART_CLOCKSOURCE_LSE: UART_ClockSourceTypeDef = 8;
#[doc = "< Undefined clock source"]
pub const UART_ClockSourceTypeDef_UART_CLOCKSOURCE_UNDEFINED: UART_ClockSourceTypeDef = 16;
#[doc = " @brief UART clock sources definition"]
pub type UART_ClockSourceTypeDef = cty::c_uint;
#[doc = " @brief HAL UART Reception type definition\n @note  HAL UART Reception type value aims to identify which type of Reception is ongoing.\n        It is expected to admit following values :\n           HAL_UART_RECEPTION_STANDARD         = 0x00U,\n           HAL_UART_RECEPTION_TOIDLE           = 0x01U,\n           HAL_UART_RECEPTION_TORTO            = 0x02U,\n           HAL_UART_RECEPTION_TOCHARMATCH      = 0x03U,"]
pub type HAL_UART_RxTypeTypeDef = u32;
#[doc = " @brief  UART handle Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __UART_HandleTypeDef {
    #[doc = "< UART registers base address"]
    pub Instance: *mut USART_TypeDef,
    #[doc = "< UART communication parameters"]
    pub Init: UART_InitTypeDef,
    #[doc = "< UART Advanced Features initialization parameters"]
    pub AdvancedInit: UART_AdvFeatureInitTypeDef,
    #[doc = "< Pointer to UART Tx transfer Buffer"]
    pub pTxBuffPtr: *const u8,
    #[doc = "< UART Tx Transfer size"]
    pub TxXferSize: u16,
    #[doc = "< UART Tx Transfer Counter"]
    pub TxXferCount: u16,
    #[doc = "< Pointer to UART Rx transfer Buffer"]
    pub pRxBuffPtr: *mut u8,
    #[doc = "< UART Rx Transfer size"]
    pub RxXferSize: u16,
    #[doc = "< UART Rx Transfer Counter"]
    pub RxXferCount: u16,
    #[doc = "< UART Rx RDR register mask"]
    pub Mask: u16,
    #[doc = "< Specifies if the FIFO mode is being used.\nThis parameter can be a value of @ref UARTEx_FIFO_mode."]
    pub FifoMode: u32,
    #[doc = "< Number of data to process during RX ISR execution"]
    pub NbRxDataToProcess: u16,
    #[doc = "< Number of data to process during TX ISR execution"]
    pub NbTxDataToProcess: u16,
    #[doc = "< Type of ongoing reception"]
    pub ReceptionType: HAL_UART_RxTypeTypeDef,
    #[doc = "< Function pointer on Rx IRQ handler"]
    pub RxISR: ::core::option::Option<unsafe extern "C" fn(huart: *mut __UART_HandleTypeDef)>,
    #[doc = "< Function pointer on Tx IRQ handler"]
    pub TxISR: ::core::option::Option<unsafe extern "C" fn(huart: *mut __UART_HandleTypeDef)>,
    #[doc = "< UART Tx DMA Handle parameters"]
    pub hdmatx: *mut DMA_HandleTypeDef,
    #[doc = "< UART Rx DMA Handle parameters"]
    pub hdmarx: *mut DMA_HandleTypeDef,
    #[doc = "< Locking object"]
    pub Lock: HAL_LockTypeDef,
    #[doc = "< UART state information related to global Handle management\nand also related to Tx operations. This parameter\ncan be a value of @ref HAL_UART_StateTypeDef"]
    pub gState: HAL_UART_StateTypeDef,
    #[doc = "< UART state information related to Rx operations. This\nparameter can be a value of @ref HAL_UART_StateTypeDef"]
    pub RxState: HAL_UART_StateTypeDef,
    #[doc = "< UART Error code"]
    pub ErrorCode: u32,
}
#[doc = " @brief  UART handle Structure definition"]
pub type UART_HandleTypeDef = __UART_HandleTypeDef;
#[doc = " @brief  UART wake up from stop mode parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UART_WakeUpTypeDef {
    #[doc = "< Specifies which event will activate the Wakeup from Stop mode flag (WUF).\nThis parameter can be a value of @ref UART_WakeUp_from_Stop_Selection.\nIf set to UART_WAKEUP_ON_ADDRESS, the two other fields below must\nbe filled up."]
    pub WakeUpEvent: u32,
    #[doc = "< Specifies whether the address is 4 or 7-bit long.\nThis parameter can be a value of @ref UARTEx_WakeUp_Address_Length."]
    pub AddressLength: u16,
    #[doc = "< UART/USART node address (7-bit long max)."]
    pub Address: u8,
}
extern "C" {
    #[doc = " @addtogroup UARTEx_Exported_Functions_Group1\n @{"]
    pub fn HAL_RS485Ex_Init(
        huart: *mut UART_HandleTypeDef,
        Polarity: u32,
        AssertionTime: u32,
        DeassertionTime: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup UARTEx_Exported_Functions_Group2\n @{"]
    pub fn HAL_UARTEx_WakeupCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UARTEx_RxFifoFullCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UARTEx_TxFifoEmptyCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    #[doc = " @addtogroup UARTEx_Exported_Functions_Group3\n @{"]
    pub fn HAL_UARTEx_StopModeWakeUpSourceConfig(
        huart: *mut UART_HandleTypeDef,
        WakeUpSelection: UART_WakeUpTypeDef,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_EnableStopMode(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_DisableStopMode(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_MultiProcessorEx_AddressLength_Set(
        huart: *mut UART_HandleTypeDef,
        AddressLength: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_EnableFifoMode(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_DisableFifoMode(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_SetTxFifoThreshold(
        huart: *mut UART_HandleTypeDef,
        Threshold: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_SetRxFifoThreshold(
        huart: *mut UART_HandleTypeDef,
        Threshold: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_ReceiveToIdle(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        RxLen: *mut u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_ReceiveToIdle_IT(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UARTEx_ReceiveToIdle_DMA(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup UART_Exported_Functions_Group1 Initialization and de-initialization functions\n @{"]
    pub fn HAL_UART_Init(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_HalfDuplex_Init(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_LIN_Init(
        huart: *mut UART_HandleTypeDef,
        BreakDetectLength: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_MultiProcessor_Init(
        huart: *mut UART_HandleTypeDef,
        Address: u8,
        WakeUpMethod: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_DeInit(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_MspInit(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_MspDeInit(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    #[doc = " @addtogroup UART_Exported_Functions_Group2 IO operation functions\n @{"]
    pub fn HAL_UART_Transmit(
        huart: *mut UART_HandleTypeDef,
        pData: *const u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_Receive(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_Transmit_IT(
        huart: *mut UART_HandleTypeDef,
        pData: *const u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_Receive_IT(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_Transmit_DMA(
        huart: *mut UART_HandleTypeDef,
        pData: *const u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_Receive_DMA(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_DMAPause(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_DMAResume(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_DMAStop(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_Abort(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_AbortTransmit(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_AbortReceive(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_Abort_IT(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_AbortTransmit_IT(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_AbortReceive_IT(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_IRQHandler(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_TxHalfCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_TxCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_RxHalfCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_RxCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_ErrorCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_AbortCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_AbortTransmitCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_AbortReceiveCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UARTEx_RxEventCallback(huart: *mut UART_HandleTypeDef, Size: u16);
}
extern "C" {
    #[doc = " @addtogroup UART_Exported_Functions_Group3 Peripheral Control functions\n @{"]
    pub fn HAL_UART_ReceiverTimeout_Config(huart: *mut UART_HandleTypeDef, TimeoutValue: u32);
}
extern "C" {
    pub fn HAL_UART_EnableReceiverTimeout(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_UART_DisableReceiverTimeout(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_LIN_SendBreak(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_MultiProcessor_EnableMuteMode(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_MultiProcessor_DisableMuteMode(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_MultiProcessor_EnterMuteMode(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HalfDuplex_EnableTransmitter(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_HalfDuplex_EnableReceiver(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup UART_Exported_Functions_Group4 Peripheral State and Error functions\n @{"]
    pub fn HAL_UART_GetState(huart: *mut UART_HandleTypeDef) -> HAL_UART_StateTypeDef;
}
extern "C" {
    pub fn HAL_UART_GetError(huart: *mut UART_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn UART_SetConfig(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn UART_CheckIdleState(huart: *mut UART_HandleTypeDef) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn UART_WaitOnFlagUntilTimeout(
        huart: *mut UART_HandleTypeDef,
        Flag: u32,
        Status: FlagStatus,
        Tickstart: u32,
        Timeout: u32,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn UART_AdvFeatureConfig(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn UART_Start_Receive_IT(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn UART_Start_Receive_DMA(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @defgroup UART_Private_variables UART Private variables\n @{"]
    pub static UARTPrescTable: [u16; 12usize];
}
extern "C" {
    #[doc = " @addtogroup HAL_Exported_Functions_Group1\n @{"]
    pub fn HAL_Init() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_DeInit() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_MspInit();
}
extern "C" {
    pub fn HAL_MspDeInit();
}
extern "C" {
    pub fn HAL_InitTick(TickPriority: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    #[doc = " @addtogroup HAL_Exported_Functions_Group2 HAL Control functions\n @{"]
    pub fn HAL_IncTick();
}
extern "C" {
    pub fn HAL_Delay(Delay: u32);
}
extern "C" {
    pub fn HAL_GetTick() -> u32;
}
extern "C" {
    pub fn HAL_GetTickPrio() -> u32;
}
extern "C" {
    pub fn HAL_SetTickFreq(Freq: u32) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_GetTickFreq() -> u32;
}
extern "C" {
    pub fn HAL_SuspendTick();
}
extern "C" {
    pub fn HAL_ResumeTick();
}
extern "C" {
    pub fn HAL_GetHalVersion() -> u32;
}
extern "C" {
    pub fn HAL_GetREVID() -> u32;
}
extern "C" {
    pub fn HAL_GetDEVID() -> u32;
}
extern "C" {
    #[doc = " @addtogroup HAL_Exported_Functions_Group3\n @{"]
    pub fn HAL_DBGMCU_EnableDBGSleepMode();
}
extern "C" {
    pub fn HAL_DBGMCU_DisableDBGSleepMode();
}
extern "C" {
    pub fn HAL_DBGMCU_EnableDBGStopMode();
}
extern "C" {
    pub fn HAL_DBGMCU_DisableDBGStopMode();
}
extern "C" {
    pub fn HAL_DBGMCU_EnableDBGStandbyMode();
}
extern "C" {
    pub fn HAL_DBGMCU_DisableDBGStandbyMode();
}
extern "C" {
    #[doc = " @addtogroup HAL_Exported_Variables\n @{"]
    pub static mut uwTick: u32;
}
extern "C" {
    pub static mut uwTickPrio: u32;
}
extern "C" {
    pub static mut uwTickFreq: u32;
}
extern "C" {
    #[doc = " @addtogroup HAL_Exported_Functions_Group4\n @{"]
    pub fn HAL_SYSCFG_CCMSRAMErase();
}
extern "C" {
    pub fn HAL_SYSCFG_EnableMemorySwappingBank();
}
extern "C" {
    pub fn HAL_SYSCFG_DisableMemorySwappingBank();
}
extern "C" {
    pub fn HAL_SYSCFG_VREFBUF_VoltageScalingConfig(VoltageScaling: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_VREFBUF_HighImpedanceConfig(Mode: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_VREFBUF_TrimmingConfig(TrimmingValue: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_EnableVREFBUF() -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_SYSCFG_DisableVREFBUF();
}
extern "C" {
    pub fn HAL_SYSCFG_EnableIOSwitchBooster();
}
extern "C" {
    pub fn HAL_SYSCFG_DisableIOSwitchBooster();
}
extern "C" {
    pub fn HAL_SYSCFG_EnableIOSwitchVDD();
}
extern "C" {
    pub fn HAL_SYSCFG_DisableIOSwitchVDD();
}
extern "C" {
    pub fn HAL_SYSCFG_CCMSRAM_WriteProtectionEnable(Page: u32);
}
extern "C" {
    pub fn Error_Handler();
}
extern "C" {
    pub fn SystemClock_Config();
}
extern "C" {
    pub static mut hadc1: ADC_HandleTypeDef;
}
extern "C" {
    pub fn MX_ADC1_Init();
}
extern "C" {
    pub fn MX_GPIO_Init();
}
extern "C" {
    pub static mut huart2: UART_HandleTypeDef;
}
extern "C" {
    pub fn MX_USART2_UART_Init();
}
extern "C" {
    pub fn NMI_Handler();
}
extern "C" {
    pub fn HardFault_Handler();
}
extern "C" {
    pub fn MemManage_Handler();
}
extern "C" {
    pub fn BusFault_Handler();
}
extern "C" {
    pub fn UsageFault_Handler();
}
extern "C" {
    pub fn SVC_Handler();
}
extern "C" {
    pub fn DebugMon_Handler();
}
extern "C" {
    pub fn PendSV_Handler();
}
extern "C" {
    pub fn SysTick_Handler();
}
