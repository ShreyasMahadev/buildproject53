
test15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b60  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df8  08004df8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e00  08004e00  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  08004e64  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004e64  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f4b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e6  00000000  00000000  0003101a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00033500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a82  00000000  00000000  000342b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c472  00000000  00000000  00034d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000045f6  00000000  00000000  000411ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003dd0  00000000  00000000  000457a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000044  00000000  00000000  00049574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d28 	.word	0x08004d28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004d28 	.word	0x08004d28

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2220      	movs	r2, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 ff1b 	bl	8004420 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ea:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <MX_ADC1_Init+0xe8>)
 80005ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f2:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <MX_ADC1_Init+0xe8>)
 80005f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <MX_ADC1_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000614:	2204      	movs	r2, #4
 8000616:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000626:	2201      	movs	r2, #1
 8000628:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4817      	ldr	r0, [pc, #92]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000656:	f000 fda7 	bl	80011a8 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000660:	f000 f976 	bl	8000950 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000670:	f001 fd3e 	bl	80020f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067a:	f000 f969 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000682:	2306      	movs	r3, #6
 8000684:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068a:	237f      	movs	r3, #127	; 0x7f
 800068c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068e:	2304      	movs	r3, #4
 8000690:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800069c:	f001 f8b0 	bl	8001800 <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006a6:	f000 f953 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3730      	adds	r7, #48	; 0x30
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000078 	.word	0x20000078
 80006b8:	2e300800 	.word	0x2e300800

080006bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09a      	sub	sp, #104	; 0x68
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2244      	movs	r2, #68	; 0x44
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fe9f 	bl	8004420 <memset>
  if(adcHandle->Instance==ADC1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006ea:	d134      	bne.n	8000756 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 fe01 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000708:	f000 f922 	bl	8000950 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_ADC_MspInit+0xa4>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <HAL_ADC_MspInit+0xa4>)
 8000712:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_ADC_MspInit+0xa4>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_ADC_MspInit+0xa4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000728:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <HAL_ADC_MspInit+0xa4>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_ADC_MspInit+0xa4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <HAL_ADC_MspInit+0xa8>)
 8000752:	f001 fe55 	bl	8002400 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000756:	bf00      	nop
 8000758:	3768      	adds	r7, #104	; 0x68
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_GPIO_Init+0x74>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <MX_GPIO_Init+0x74>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_GPIO_Init+0x74>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_GPIO_Init+0x74>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <MX_GPIO_Init+0x74>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_GPIO_Init+0x74>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0x78>)
 80007b4:	f001 ffa6 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0x78>)
 80007d0:	f001 fe16 	bl	8002400 <HAL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000800 	.word	0x48000800

080007e4 <main_c>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main_c(void)
{
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fa1a 	bl	8000c22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f86f 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f7ff ffb9 	bl	8000768 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007f6:	f7ff fee9 	bl	80005cc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80007fa:	f000 f945 	bl	8000a88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80007fe:	482e      	ldr	r0, [pc, #184]	; (80008b8 <main_c+0xd4>)
 8000800:	f000 fe5c 	bl	80014bc <HAL_ADC_Start>



          /* USER CODE BEGIN 3 */

          if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK)
 8000804:	2101      	movs	r1, #1
 8000806:	482c      	ldr	r0, [pc, #176]	; (80008b8 <main_c+0xd4>)
 8000808:	f000 ff14 	bl	8001634 <HAL_ADC_PollForConversion>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d137      	bne.n	8000882 <main_c+0x9e>

          {

              adcValue = HAL_ADC_GetValue(&hadc1);
 8000812:	4829      	ldr	r0, [pc, #164]	; (80008b8 <main_c+0xd4>)
 8000814:	f000 ffe6 	bl	80017e4 <HAL_ADC_GetValue>
 8000818:	4603      	mov	r3, r0
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <main_c+0xd8>)
 800081c:	6013      	str	r3, [r2, #0]



              // Check if the ADC value is greater than 4040

              if (adcValue > 4040)
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <main_c+0xd8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f640 72c8 	movw	r2, #4040	; 0xfc8
 8000826:	4293      	cmp	r3, r2
 8000828:	d918      	bls.n	800085c <main_c+0x78>

              {

                  // Transmit a termination message over UART

                  char termMsg[] = "ADC Value exceeded 4040, terminating program.\r\n";
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <main_c+0xdc>)
 800082c:	1d3c      	adds	r4, r7, #4
 800082e:	461d      	mov	r5, r3
 8000830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800083c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

                  HAL_UART_Transmit(&huart2, (uint8_t *)termMsg, strlen(termMsg), HAL_MAX_DELAY);
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fcec 	bl	8000220 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	1d39      	adds	r1, r7, #4
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <main_c+0xe0>)
 8000854:	f002 ff96 	bl	8003784 <HAL_UART_Transmit>



                  // Break out of the loop, terminating the program

                  break;
 8000858:	bf00      	nop
          HAL_Delay(1000 - adcValue);                          // Remaining Delay to make total delay constant

      }

      /* USER CODE END 3 */
      }
 800085a:	e029      	b.n	80008b0 <main_c+0xcc>
              snprintf(buffer, sizeof(buffer), "ADC Value: %lu\r\n", adcValue);
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <main_c+0xd8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	1d38      	adds	r0, r7, #4
 8000862:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <main_c+0xe4>)
 8000864:	2132      	movs	r1, #50	; 0x32
 8000866:	f003 fda7 	bl	80043b8 <sniprintf>
              HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fcd7 	bl	8000220 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	1d39      	adds	r1, r7, #4
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <main_c+0xe0>)
 800087e:	f002 ff81 	bl	8003784 <HAL_UART_Transmit>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // Turn ON LED
 8000882:	2201      	movs	r2, #1
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <main_c+0xe8>)
 8000888:	f001 ff3c 	bl	8002704 <HAL_GPIO_WritePin>
          HAL_Delay(adcValue);                                 // Delay proportional to adcValue
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <main_c+0xd8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fa37 	bl	8000d04 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // Turn OFF LED
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <main_c+0xe8>)
 800089c:	f001 ff32 	bl	8002704 <HAL_GPIO_WritePin>
          HAL_Delay(1000 - adcValue);                          // Remaining Delay to make total delay constant
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <main_c+0xd8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fa2b 	bl	8000d04 <HAL_Delay>
          if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK)
 80008ae:	e7a9      	b.n	8000804 <main_c+0x20>
      }
 80008b0:	4618      	mov	r0, r3
 80008b2:	3738      	adds	r7, #56	; 0x38
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}
 80008b8:	20000078 	.word	0x20000078
 80008bc:	200000e4 	.word	0x200000e4
 80008c0:	08004d54 	.word	0x08004d54
 80008c4:	200000ec 	.word	0x200000ec
 80008c8:	08004d40 	.word	0x08004d40
 80008cc:	48000800 	.word	0x48000800

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	2238      	movs	r2, #56	; 0x38
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fd9e 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f6:	f001 ff1d 	bl	8002734 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	4618      	mov	r0, r3
 8000912:	f001 ffc3 	bl	800289c <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800091c:	f000 f818 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000924:	2301      	movs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fac7 	bl	8002ecc <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000944:	f000 f804 	bl	8000950 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	; 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000992:	f001 ff73 	bl	800287c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f96a 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f003 fd02 	bl	8004430 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20008000 	.word	0x20008000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	200000e8 	.word	0x200000e8
 8000a60:	200002c8 	.word	0x200002c8

08000a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_USART2_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ad2:	f002 fe07 	bl	80036e4 <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f7ff ff38 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ae4:	f003 fb9e 	bl	8004224 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f7ff ff2f 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000af6:	f003 fbd3 	bl	80042a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f7ff ff26 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000b06:	f003 fb54 	bl	80041b2 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f7ff ff1e 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000ec 	.word	0x200000ec
 8000b1c:	40004400 	.word	0x40004400

08000b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	; 0x68
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2244      	movs	r2, #68	; 0x44
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fc6d 	bl	8004420 <memset>
  if(uartHandle->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_UART_MspInit+0xa4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d135      	bne.n	8000bbc <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 fbd1 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff fef2 	bl	8000950 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	6593      	str	r3, [r2, #88]	; 0x58
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b9c:	2318      	movs	r3, #24
 8000b9e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bac:	2307      	movs	r3, #7
 8000bae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_MspInit+0xac>)
 8000bb8:	f001 fc22 	bl	8002400 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3768      	adds	r7, #104	; 0x68
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bfa:	f7ff ff33 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fc1d 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main_c
 8000c02:	f7ff fdef 	bl	80007e4 <main_c>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   r0, =_estack
 8000c08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c14:	08004e08 	.word	0x08004e08
  ldr r2, =_sbss
 8000c18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c1c:	200002c8 	.word	0x200002c8

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>

08000c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f001 fbb5 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f80e 	bl	8000c54 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff fe8a 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	79fb      	ldrb	r3, [r7, #7]

}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x68>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d022      	beq.n	8000cae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_InitTick+0x68>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fbb2 	bl	80023e6 <HAL_SYSTICK_Config>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10f      	bne.n	8000ca8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d809      	bhi.n	8000ca2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	f04f 30ff 	mov.w	r0, #4294967295
 8000c96:	f001 fb8c 	bl	80023b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_InitTick+0x70>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e007      	b.n	8000cb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e004      	b.n	8000cb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e001      	b.n	8000cb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	2000017c 	.word	0x2000017c
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2000017c 	.word	0x2000017c

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d004      	beq.n	8000d28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_Delay+0x40>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4413      	add	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d28:	bf00      	nop
 8000d2a:	f7ff ffdf 	bl	8000cec <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d8f7      	bhi.n	8000d2a <HAL_Delay+0x26>
  {
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000008 	.word	0x20000008

08000d48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	609a      	str	r2, [r3, #8]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3360      	adds	r3, #96	; 0x60
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <LL_ADC_SetOffset+0x44>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	4313      	orrs	r3, r2
 8000de0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	03fff000 	.word	0x03fff000

08000df8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3360      	adds	r3, #96	; 0x60
 8000e06:	461a      	mov	r2, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3360      	adds	r3, #96	; 0x60
 8000e34:	461a      	mov	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e4e:	bf00      	nop
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b087      	sub	sp, #28
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3360      	adds	r3, #96	; 0x60
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e84:	bf00      	nop
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3360      	adds	r3, #96	; 0x60
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	615a      	str	r2, [r3, #20]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b087      	sub	sp, #28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3330      	adds	r3, #48	; 0x30
 8000f22:	461a      	mov	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	4413      	add	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	211f      	movs	r1, #31
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	401a      	ands	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	0e9b      	lsrs	r3, r3, #26
 8000f4a:	f003 011f 	and.w	r1, r3, #31
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f5e:	bf00      	nop
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b087      	sub	sp, #28
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3314      	adds	r3, #20
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	0e5b      	lsrs	r3, r3, #25
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	4413      	add	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	0d1b      	lsrs	r3, r3, #20
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	2107      	movs	r1, #7
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	0d1b      	lsrs	r3, r3, #20
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d10a      	bne.n	8000fea <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000fe8:	e00a      	b.n	8001000 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	407f0000 	.word	0x407f0000

08001010 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 031f 	and.w	r3, r3, #31
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6093      	str	r3, [r2, #8]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800107c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001080:	d101      	bne.n	8001086 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <LL_ADC_IsEnabled+0x18>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <LL_ADC_IsEnabled+0x1a>
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001142:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001146:	f043 0204 	orr.w	r2, r3, #4
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b04      	cmp	r3, #4
 800116c:	d101      	bne.n	8001172 <LL_ADC_REG_IsConversionOngoing+0x18>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b08      	cmp	r3, #8
 8001192:	d101      	bne.n	8001198 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e177      	b.n	80014b2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d109      	bne.n	80011e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fa73 	bl	80006bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff3f 	bl	800106c <LL_ADC_IsDeepPowerDownEnabled>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff25 	bl	8001048 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff5a 	bl	80010bc <LL_ADC_IsInternalRegulatorEnabled>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d115      	bne.n	800123a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff3e 	bl	8001094 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001218:	4b9c      	ldr	r3, [pc, #624]	; (800148c <HAL_ADC_Init+0x2e4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	4a9c      	ldr	r2, [pc, #624]	; (8001490 <HAL_ADC_Init+0x2e8>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	099b      	lsrs	r3, r3, #6
 8001226:	3301      	adds	r3, #1
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800122c:	e002      	b.n	8001234 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f9      	bne.n	800122e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff3c 	bl	80010bc <LL_ADC_IsInternalRegulatorEnabled>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	f043 0210 	orr.w	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f043 0201 	orr.w	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff75 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 8001270:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 8110 	bne.w	80014a0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 810c 	bne.w	80014a0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001290:	f043 0202 	orr.w	r2, r3, #2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff35 	bl	800110c <LL_ADC_IsEnabled>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012ac:	f7ff ff2e 	bl	800110c <LL_ADC_IsEnabled>
 80012b0:	4604      	mov	r4, r0
 80012b2:	4878      	ldr	r0, [pc, #480]	; (8001494 <HAL_ADC_Init+0x2ec>)
 80012b4:	f7ff ff2a 	bl	800110c <LL_ADC_IsEnabled>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4323      	orrs	r3, r4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4874      	ldr	r0, [pc, #464]	; (8001498 <HAL_ADC_Init+0x2f0>)
 80012c8:	f7ff fd3e 	bl	8000d48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7f5b      	ldrb	r3, [r3, #29]
 80012d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d106      	bne.n	8001308 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	3b01      	subs	r3, #1
 8001300:	045b      	lsls	r3, r3, #17
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_ADC_Init+0x2f4>)
 800132c:	4013      	ands	r3, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	430b      	orrs	r3, r1
 8001336:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff01 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 8001358:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff0e 	bl	8001180 <LL_ADC_INJ_IsConversionOngoing>
 8001364:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d16d      	bne.n	8001448 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d16a      	bne.n	8001448 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001376:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800137e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800138e:	f023 0302 	bic.w	r3, r3, #2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	430b      	orrs	r3, r1
 800139a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d017      	beq.n	80013d4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6911      	ldr	r1, [r2, #16]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80013d2:	e013      	b.n	80013fc <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001402:	2b01      	cmp	r3, #1
 8001404:	d118      	bne.n	8001438 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800141c:	4311      	orrs	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001422:	4311      	orrs	r1, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001428:	430a      	orrs	r2, r1
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	e007      	b.n	8001448 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d10c      	bne.n	800146a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f023 010f 	bic.w	r1, r3, #15
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	1e5a      	subs	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e007      	b.n	800147a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 020f 	bic.w	r2, r2, #15
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	65da      	str	r2, [r3, #92]	; 0x5c
 800148a:	e011      	b.n	80014b0 <HAL_ADC_Init+0x308>
 800148c:	20000000 	.word	0x20000000
 8001490:	053e2d63 	.word	0x053e2d63
 8001494:	50000100 	.word	0x50000100
 8001498:	50000300 	.word	0x50000300
 800149c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	f043 0210 	orr.w	r2, r3, #16
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	bf00      	nop

080014bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014c4:	4859      	ldr	r0, [pc, #356]	; (800162c <HAL_ADC_Start+0x170>)
 80014c6:	f7ff fda3 	bl	8001010 <LL_ADC_GetMultimode>
 80014ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe42 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 809f 	bne.w	800161c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_Start+0x30>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e09a      	b.n	8001622 <HAL_ADC_Start+0x166>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fd73 	bl	8001fe0 <ADC_Enable>
 80014fa:	4603      	mov	r3, r0
 80014fc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 8086 	bne.w	8001612 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a44      	ldr	r2, [pc, #272]	; (8001630 <HAL_ADC_Start+0x174>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d002      	beq.n	800152a <HAL_ADC_Start+0x6e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e001      	b.n	800152e <HAL_ADC_Start+0x72>
 800152a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	4293      	cmp	r3, r2
 8001534:	d002      	beq.n	800153c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001554:	d106      	bne.n	8001564 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f023 0206 	bic.w	r2, r3, #6
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	661a      	str	r2, [r3, #96]	; 0x60
 8001562:	e002      	b.n	800156a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	221c      	movs	r2, #28
 8001570:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <HAL_ADC_Start+0x174>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d002      	beq.n	800158a <HAL_ADC_Start+0xce>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	e001      	b.n	800158e <HAL_ADC_Start+0xd2>
 800158a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	4293      	cmp	r3, r2
 8001594:	d008      	beq.n	80015a8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b05      	cmp	r3, #5
 80015a0:	d002      	beq.n	80015a8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	d114      	bne.n	80015d2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fdb1 	bl	8001132 <LL_ADC_REG_StartConversion>
 80015d0:	e026      	b.n	8001620 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_ADC_Start+0x174>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d002      	beq.n	80015ee <HAL_ADC_Start+0x132>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	e001      	b.n	80015f2 <HAL_ADC_Start+0x136>
 80015ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00f      	beq.n	8001620 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001608:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001610:	e006      	b.n	8001620 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800161a:	e001      	b.n	8001620 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800161c:	2302      	movs	r3, #2
 800161e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	50000300 	.word	0x50000300
 8001630:	50000100 	.word	0x50000100

08001634 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800163e:	4867      	ldr	r0, [pc, #412]	; (80017dc <HAL_ADC_PollForConversion+0x1a8>)
 8001640:	f7ff fce6 	bl	8001010 <LL_ADC_GetMultimode>
 8001644:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b08      	cmp	r3, #8
 800164c:	d102      	bne.n	8001654 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800164e:	2308      	movs	r3, #8
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e02a      	b.n	80016aa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d002      	beq.n	8001666 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b09      	cmp	r3, #9
 8001664:	d111      	bne.n	800168a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	f043 0220 	orr.w	r2, r3, #32
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0a6      	b.n	80017d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001684:	2304      	movs	r3, #4
 8001686:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001688:	e00f      	b.n	80016aa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800168a:	4854      	ldr	r0, [pc, #336]	; (80017dc <HAL_ADC_PollForConversion+0x1a8>)
 800168c:	f7ff fcce 	bl	800102c <LL_ADC_GetMultiDMATransfer>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	f043 0220 	orr.w	r2, r3, #32
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e095      	b.n	80017d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016a6:	2304      	movs	r3, #4
 80016a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016aa:	f7ff fb1f 	bl	8000cec <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016b0:	e021      	b.n	80016f6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d01d      	beq.n	80016f6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016ba:	f7ff fb17 	bl	8000cec <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d302      	bcc.n	80016d0 <HAL_ADC_PollForConversion+0x9c>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d112      	bne.n	80016f6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10b      	bne.n	80016f6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	f043 0204 	orr.w	r2, r3, #4
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e06d      	b.n	80017d2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0d6      	beq.n	80016b2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fbe9 	bl	8000eec <LL_ADC_REG_IsTriggerSourceSWStart>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01c      	beq.n	800175a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f5b      	ldrb	r3, [r3, #29]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d118      	bne.n	800175a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b08      	cmp	r3, #8
 8001734:	d111      	bne.n	800175a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HAL_ADC_PollForConversion+0x1ac>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d002      	beq.n	800176a <HAL_ADC_PollForConversion+0x136>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	e001      	b.n	800176e <HAL_ADC_PollForConversion+0x13a>
 800176a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	4293      	cmp	r3, r2
 8001774:	d008      	beq.n	8001788 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d002      	beq.n	8001788 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d104      	bne.n	8001792 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e00d      	b.n	80017ae <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_ADC_PollForConversion+0x1ac>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d002      	beq.n	80017a2 <HAL_ADC_PollForConversion+0x16e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	e001      	b.n	80017a6 <HAL_ADC_PollForConversion+0x172>
 80017a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d104      	bne.n	80017be <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2208      	movs	r2, #8
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e008      	b.n	80017d0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	220c      	movs	r2, #12
 80017ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	50000300 	.word	0x50000300
 80017e0:	50000100 	.word	0x50000100

080017e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0b6      	sub	sp, #216	; 0xd8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x22>
 800181e:	2302      	movs	r3, #2
 8001820:	e3c8      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x7b4>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc93 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 83ad 	bne.w	8001f96 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	f7ff fb62 	bl	8000f12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc81 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 8001858:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc8d 	bl	8001180 <LL_ADC_INJ_IsConversionOngoing>
 8001866:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800186a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 81d9 	bne.w	8001c26 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 81d4 	bne.w	8001c26 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001886:	d10f      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff fb69 	bl	8000f6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb10 	bl	8000ec6 <LL_ADC_SetSamplingTimeCommonConfig>
 80018a6:	e00e      	b.n	80018c6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	461a      	mov	r2, r3
 80018b6:	f7ff fb58 	bl	8000f6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb00 	bl	8000ec6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d022      	beq.n	800192e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6919      	ldr	r1, [r3, #16]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018f8:	f7ff fa5a 	bl	8000db0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6919      	ldr	r1, [r3, #16]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	461a      	mov	r2, r3
 800190a:	f7ff faa6 	bl	8000e5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	7f1b      	ldrb	r3, [r3, #28]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x124>
 800191e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001922:	e000      	b.n	8001926 <HAL_ADC_ConfigChannel+0x126>
 8001924:	2300      	movs	r3, #0
 8001926:	461a      	mov	r2, r3
 8001928:	f7ff fab2 	bl	8000e90 <LL_ADC_SetOffsetSaturation>
 800192c:	e17b      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fa5f 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10a      	bne.n	800195a <HAL_ADC_ConfigChannel+0x15a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fa54 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	0e9b      	lsrs	r3, r3, #26
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	e01e      	b.n	8001998 <HAL_ADC_ConfigChannel+0x198>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa49 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800197c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001988:	2320      	movs	r3, #32
 800198a:	e004      	b.n	8001996 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800198c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1b0>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0e9b      	lsrs	r3, r3, #26
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	e018      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x1e2>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80019d4:	2320      	movs	r3, #32
 80019d6:	e004      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80019d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d106      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fa18 	bl	8000e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f9fc 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x220>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f9f1 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	0e9b      	lsrs	r3, r3, #26
 8001a1a:	f003 021f 	and.w	r2, r3, #31
 8001a1e:	e01e      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x25e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f9e6 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	e004      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x276>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	e018      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x2a8>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e004      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001a9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9b5 	bl	8000e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f999 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x2e6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f98e 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	e01e      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x324>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2102      	movs	r1, #2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f983 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001b14:	2320      	movs	r3, #32
 8001b16:	e004      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001b18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x33c>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	e016      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x36a>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e004      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d106      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	2102      	movs	r1, #2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f954 	bl	8000e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2103      	movs	r1, #3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f938 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10a      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x3a8>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2103      	movs	r1, #3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f92d 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	f003 021f 	and.w	r2, r3, #31
 8001ba6:	e017      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3d8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2103      	movs	r1, #3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f922 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	e003      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x3f0>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	e011      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x414>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e003      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2103      	movs	r1, #3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f8ff 	bl	8000e24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa6e 	bl	800110c <LL_ADC_IsEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 8140 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f7ff f9bb 	bl	8000fc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a8f      	ldr	r2, [pc, #572]	; (8001e8c <HAL_ADC_ConfigChannel+0x68c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f040 8131 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x47e>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	bf94      	ite	ls
 8001c76:	2301      	movls	r3, #1
 8001c78:	2300      	movhi	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	e019      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x4b2>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c8e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e003      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2b09      	cmp	r3, #9
 8001caa:	bf94      	ite	ls
 8001cac:	2301      	movls	r3, #1
 8001cae:	2300      	movhi	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d079      	beq.n	8001daa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x4d2>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0e9b      	lsrs	r3, r3, #26
 8001cc8:	3301      	adds	r3, #1
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd0:	e015      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x4fe>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001cea:	2320      	movs	r3, #32
 8001cec:	e003      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	069b      	lsls	r3, r3, #26
 8001cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x51e>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	3301      	adds	r3, #1
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	e017      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x54e>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001d36:	2320      	movs	r3, #32
 8001d38:	e003      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	ea42 0103 	orr.w	r1, r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10a      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x574>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0e9b      	lsrs	r3, r3, #26
 8001d64:	3301      	adds	r3, #1
 8001d66:	f003 021f 	and.w	r2, r3, #31
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	e018      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x5a6>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	e003      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f003 021f 	and.w	r2, r3, #31
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da6:	430b      	orrs	r3, r1
 8001da8:	e081      	b.n	8001eae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d107      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x5c6>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0e9b      	lsrs	r3, r3, #26
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	069b      	lsls	r3, r3, #26
 8001dc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc4:	e015      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x5f2>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e003      	b.n	8001dea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	069b      	lsls	r3, r3, #26
 8001dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x612>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	e017      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x642>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	e003      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	ea42 0103 	orr.w	r1, r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10d      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x66e>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 021f 	and.w	r2, r3, #31
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	3b1e      	subs	r3, #30
 8001e66:	051b      	lsls	r3, r3, #20
 8001e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	e01e      	b.n	8001eac <HAL_ADC_ConfigChannel+0x6ac>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	613b      	str	r3, [r7, #16]
  return result;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d104      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e006      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x698>
 8001e8a:	bf00      	nop
 8001e8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	051b      	lsls	r3, r3, #20
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eac:	430b      	orrs	r3, r1
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	6892      	ldr	r2, [r2, #8]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff f859 	bl	8000f6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_ADC_ConfigChannel+0x7bc>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d071      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec4:	483e      	ldr	r0, [pc, #248]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ec6:	f7fe ff65 	bl	8000d94 <LL_ADC_GetCommonPathInternalCh>
 8001eca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3c      	ldr	r2, [pc, #240]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x6e2>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d127      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d121      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef6:	d157      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001efc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f00:	4619      	mov	r1, r3
 8001f02:	482f      	ldr	r0, [pc, #188]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f04:	f7fe ff33 	bl	8000d6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_ADC_ConfigChannel+0x7cc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	099b      	lsrs	r3, r3, #6
 8001f0e:	4a30      	ldr	r2, [pc, #192]	; (8001fd0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f22:	e002      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f9      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f30:	e03a      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d113      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x764>
 8001f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d02a      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f5e:	f7fe ff06 	bl	8000d6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f62:	e021      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_ADC_ConfigChannel+0x7dc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d011      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f90:	f7fe feed 	bl	8000d6e <LL_ADC_SetCommonPathInternalCh>
 8001f94:	e008      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f043 0220 	orr.w	r2, r3, #32
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	37d8      	adds	r7, #216	; 0xd8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	80080000 	.word	0x80080000
 8001fc0:	50000300 	.word	0x50000300
 8001fc4:	c3210000 	.word	0xc3210000
 8001fc8:	90c00010 	.word	0x90c00010
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	053e2d63 	.word	0x053e2d63
 8001fd4:	c7520000 	.word	0xc7520000
 8001fd8:	50000100 	.word	0x50000100
 8001fdc:	cb840000 	.word	0xcb840000

08001fe0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f88d 	bl	800110c <LL_ADC_IsEnabled>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d14d      	bne.n	8002094 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <ADC_Enable+0xc0>)
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	f043 0210 	orr.w	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e039      	b.n	8002096 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f85c 	bl	80010e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800202c:	f7fe fe5e 	bl	8000cec <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002032:	e028      	b.n	8002086 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f867 	bl	800110c <LL_ADC_IsEnabled>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d104      	bne.n	800204e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f84b 	bl	80010e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800204e:	f7fe fe4d 	bl	8000cec <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d914      	bls.n	8002086 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00d      	beq.n	8002086 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	f043 0210 	orr.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e007      	b.n	8002096 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d1cf      	bne.n	8002034 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	8000003f 	.word	0x8000003f

080020a4 <LL_ADC_IsEnabled>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <LL_ADC_IsEnabled+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_ADC_IsEnabled+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_REG_IsConversionOngoing>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b0a1      	sub	sp, #132	; 0x84
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800210a:	2302      	movs	r3, #2
 800210c:	e08b      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002116:	2300      	movs	r3, #0
 8002118:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800211a:	2300      	movs	r3, #0
 800211c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002126:	d102      	bne.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002128:	4b41      	ldr	r3, [pc, #260]	; (8002230 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	e001      	b.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10b      	bne.n	8002150 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e06a      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ffb9 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002158:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ffb3 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d14c      	bne.n	8002204 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800216a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800216c:	2b00      	cmp	r3, #0
 800216e:	d149      	bne.n	8002204 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002170:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002172:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d028      	beq.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800217c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800218e:	035b      	lsls	r3, r3, #13
 8002190:	430b      	orrs	r3, r1
 8002192:	431a      	orrs	r2, r3
 8002194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002196:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002198:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800219c:	f7ff ff82 	bl	80020a4 <LL_ADC_IsEnabled>
 80021a0:	4604      	mov	r4, r0
 80021a2:	4823      	ldr	r0, [pc, #140]	; (8002230 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80021a4:	f7ff ff7e 	bl	80020a4 <LL_ADC_IsEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4323      	orrs	r3, r4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d133      	bne.n	8002218 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b8:	f023 030f 	bic.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	6811      	ldr	r1, [r2, #0]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6892      	ldr	r2, [r2, #8]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021cc:	e024      	b.n	8002218 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021de:	f7ff ff61 	bl	80020a4 <LL_ADC_IsEnabled>
 80021e2:	4604      	mov	r4, r0
 80021e4:	4812      	ldr	r0, [pc, #72]	; (8002230 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80021e6:	f7ff ff5d 	bl	80020a4 <LL_ADC_IsEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4323      	orrs	r3, r4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d112      	bne.n	8002218 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021fa:	f023 030f 	bic.w	r3, r3, #15
 80021fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002200:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002202:	e009      	b.n	8002218 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	f043 0220 	orr.w	r2, r3, #32
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002216:	e000      	b.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002218:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002222:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002226:	4618      	mov	r0, r3
 8002228:	3784      	adds	r7, #132	; 0x84
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	50000100 	.word	0x50000100
 8002234:	50000300 	.word	0x50000300

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff47 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff5e 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff90 	bl	80022f0 <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5f 	bl	800229c <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffb2 	bl	8002358 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800240e:	e15a      	b.n	80026c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 814c 	beq.w	80026c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d005      	beq.n	8002440 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800243c:	2b02      	cmp	r3, #2
 800243e:	d130      	bne.n	80024a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002476:	2201      	movs	r2, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	f003 0201 	and.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d017      	beq.n	80024de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d123      	bne.n	8002532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80a6 	beq.w	80026c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002574:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <HAL_GPIO_Init+0x2e4>)
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <HAL_GPIO_Init+0x2e4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6613      	str	r3, [r2, #96]	; 0x60
 8002580:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_GPIO_Init+0x2e4>)
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258c:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_GPIO_Init+0x2e8>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b6:	d01f      	beq.n	80025f8 <HAL_GPIO_Init+0x1f8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <HAL_GPIO_Init+0x2ec>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d019      	beq.n	80025f4 <HAL_GPIO_Init+0x1f4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a4b      	ldr	r2, [pc, #300]	; (80026f0 <HAL_GPIO_Init+0x2f0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_GPIO_Init+0x1f0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a4a      	ldr	r2, [pc, #296]	; (80026f4 <HAL_GPIO_Init+0x2f4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00d      	beq.n	80025ec <HAL_GPIO_Init+0x1ec>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <HAL_GPIO_Init+0x2f8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <HAL_GPIO_Init+0x1e8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_GPIO_Init+0x2fc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_GPIO_Init+0x1e4>
 80025e0:	2305      	movs	r3, #5
 80025e2:	e00a      	b.n	80025fa <HAL_GPIO_Init+0x1fa>
 80025e4:	2306      	movs	r3, #6
 80025e6:	e008      	b.n	80025fa <HAL_GPIO_Init+0x1fa>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e006      	b.n	80025fa <HAL_GPIO_Init+0x1fa>
 80025ec:	2303      	movs	r3, #3
 80025ee:	e004      	b.n	80025fa <HAL_GPIO_Init+0x1fa>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e002      	b.n	80025fa <HAL_GPIO_Init+0x1fa>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_GPIO_Init+0x1fa>
 80025f8:	2300      	movs	r3, #0
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	f002 0203 	and.w	r2, r2, #3
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	4093      	lsls	r3, r2
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260a:	4937      	ldr	r1, [pc, #220]	; (80026e8 <HAL_GPIO_Init+0x2e8>)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_GPIO_Init+0x300>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800263c:	4a30      	ldr	r2, [pc, #192]	; (8002700 <HAL_GPIO_Init+0x300>)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_GPIO_Init+0x300>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002666:	4a26      	ldr	r2, [pc, #152]	; (8002700 <HAL_GPIO_Init+0x300>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_GPIO_Init+0x300>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002690:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <HAL_GPIO_Init+0x300>)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_GPIO_Init+0x300>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ba:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_GPIO_Init+0x300>)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f ae9d 	bne.w	8002410 <HAL_GPIO_Init+0x10>
  }
}
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40010000 	.word	0x40010000
 80026ec:	48000400 	.word	0x48000400
 80026f0:	48000800 	.word	0x48000800
 80026f4:	48000c00 	.word	0x48000c00
 80026f8:	48001000 	.word	0x48001000
 80026fc:	48001400 	.word	0x48001400
 8002700:	40010400 	.word	0x40010400

08002704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002714:	787b      	ldrb	r3, [r7, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002720:	e002      	b.n	8002728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d141      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002742:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d131      	bne.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800275c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002768:	4a41      	ldr	r2, [pc, #260]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002770:	4b40      	ldr	r3, [pc, #256]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2232      	movs	r2, #50	; 0x32
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a3f      	ldr	r2, [pc, #252]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002786:	e002      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d102      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f2      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d158      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e057      	b.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4a2d      	ldr	r2, [pc, #180]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c4:	e04d      	b.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	d141      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d131      	bne.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e2:	4a23      	ldr	r2, [pc, #140]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2232      	movs	r2, #50	; 0x32
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	3301      	adds	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002812:	e002      	b.n	800281a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3b01      	subs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	d102      	bne.n	800282e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f2      	bne.n	8002814 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283a:	d112      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e011      	b.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002850:	e007      	b.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002860:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40007000 	.word	0x40007000
 8002874:	20000000 	.word	0x20000000
 8002878:	431bde83 	.word	0x431bde83

0800287c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288a:	6093      	str	r3, [r2, #8]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40007000 	.word	0x40007000

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e306      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d075      	beq.n	80029a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4b97      	ldr	r3, [pc, #604]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c4:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d102      	bne.n	80028da <HAL_RCC_OscConfig+0x3e>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_OscConfig+0x44>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d10b      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	4b8d      	ldr	r3, [pc, #564]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d05b      	beq.n	80029a4 <HAL_RCC_OscConfig+0x108>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d157      	bne.n	80029a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2e1      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x74>
 8002902:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a84      	ldr	r2, [pc, #528]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e01d      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x98>
 800291a:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7e      	ldr	r2, [pc, #504]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7b      	ldr	r2, [pc, #492]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002934:	4b78      	ldr	r3, [pc, #480]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a77      	ldr	r2, [pc, #476]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b75      	ldr	r3, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a74      	ldr	r2, [pc, #464]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe f9ca 	bl	8000cec <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe f9c6 	bl	8000cec <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e2a6      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296e:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0xc0>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe f9b6 	bl	8000cec <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe f9b2 	bl	8000cec <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e292      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002996:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0xe8>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d075      	beq.n	8002a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029bc:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_OscConfig+0x136>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_OscConfig+0x13c>
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d11f      	bne.n	8002a18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_OscConfig+0x154>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e265      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	4946      	ldr	r1, [pc, #280]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a04:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <HAL_RCC_OscConfig+0x280>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe f923 	bl	8000c54 <HAL_InitTick>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d043      	beq.n	8002a9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e251      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d023      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f95e 	bl	8000cec <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe f95a 	bl	8000cec <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e23a      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	492d      	ldr	r1, [pc, #180]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e01a      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe f93a 	bl	8000cec <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fe f936 	bl	8000cec <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e216      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1e0>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d041      	beq.n	8002b2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01c      	beq.n	8002aec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f913 	bl	8000cec <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe f90f 	bl	8000cec <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1ef      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ef      	beq.n	8002aca <HAL_RCC_OscConfig+0x22e>
 8002aea:	e020      	b.n	8002b2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe f8f6 	bl	8000cec <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b02:	e00d      	b.n	8002b20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b04:	f7fe f8f2 	bl	8000cec <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d906      	bls.n	8002b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1d2      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ea      	bne.n	8002b04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80a6 	beq.w	8002c88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b40:	4b84      	ldr	r3, [pc, #528]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2b4>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x2b6>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a7e      	ldr	r2, [pc, #504]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
 8002b62:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b72:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe f8af 	bl	8000cec <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe f8ab 	bl	8000cec <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e18b      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_RCC_OscConfig+0x32e>
 8002bb8:	4b66      	ldr	r3, [pc, #408]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	4a65      	ldr	r2, [pc, #404]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc8:	e024      	b.n	8002c14 <HAL_RCC_OscConfig+0x378>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d110      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x358>
 8002bd2:	4b60      	ldr	r3, [pc, #384]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a5e      	ldr	r2, [pc, #376]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be2:	4b5c      	ldr	r3, [pc, #368]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	4a5a      	ldr	r2, [pc, #360]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCC_OscConfig+0x378>
 8002bf4:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d016      	beq.n	8002c4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe f866 	bl	8000cec <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe f862 	bl	8000cec <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e140      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ed      	beq.n	8002c24 <HAL_RCC_OscConfig+0x388>
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f84f 	bl	8000cec <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe f84b 	bl	8000cec <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e129      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c68:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ed      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7c:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe f81e 	bl	8000cec <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cb4:	f7fe f81a 	bl	8000cec <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0fa      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x418>
 8002cd4:	e01b      	b.n	8002d0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe f801 	bl	8000cec <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cee:	f7fd fffd 	bl	8000cec <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0dd      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ef      	bne.n	8002cee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80d1 	beq.w	8002eba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	f000 808b 	beq.w	8002e3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d15e      	bne.n	8002dec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fd ffd7 	bl	8000cec <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	e00c      	b.n	8002d5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fd ffd3 	bl	8000cec <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d905      	bls.n	8002d5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0b3      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ec      	bne.n	8002d42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d68:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <HAL_RCC_OscConfig+0x62c>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6a11      	ldr	r1, [r2, #32]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d82:	0212      	lsls	r2, r2, #8
 8002d84:	4311      	orrs	r1, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0552      	lsls	r2, r2, #21
 8002d90:	4311      	orrs	r1, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d96:	0852      	lsrs	r2, r2, #1
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0652      	lsls	r2, r2, #25
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002da2:	06d2      	lsls	r2, r2, #27
 8002da4:	430a      	orrs	r2, r1
 8002da6:	4947      	ldr	r1, [pc, #284]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a44      	ldr	r2, [pc, #272]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a41      	ldr	r2, [pc, #260]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fd ff92 	bl	8000cec <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fd ff8e 	bl	8000cec <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e06e      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x530>
 8002dea:	e066      	b.n	8002eba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002df8:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a2e      	ldr	r2, [pc, #184]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fd ff6a 	bl	8000cec <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fd ff66 	bl	8000cec <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e046      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x580>
 8002e3a:	e03e      	b.n	8002eba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e039      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d12c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	3b01      	subs	r3, #1
 8002e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d123      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11b      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d113      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	019f800c 	.word	0x019f800c

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e11e      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b91      	ldr	r3, [pc, #580]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d910      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b8e      	ldr	r3, [pc, #568]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 020f 	bic.w	r2, r3, #15
 8002efa:	498c      	ldr	r1, [pc, #560]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b8a      	ldr	r3, [pc, #552]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e106      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d073      	beq.n	8003008 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d129      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f28:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0f4      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f38:	f000 f99e 	bl	8003278 <RCC_GetSysClockFreqFromPLLSource>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <HAL_RCC_ClockConfig+0x268>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d93f      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d033      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d12f      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f66:	4b72      	ldr	r3, [pc, #456]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6e:	4a70      	ldr	r2, [pc, #448]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e024      	b.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0c6      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0be      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fa4:	f000 f8ce 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4a61      	ldr	r2, [pc, #388]	; (8003134 <HAL_RCC_ClockConfig+0x268>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d909      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fba:	4a5d      	ldr	r2, [pc, #372]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc6:	4b5a      	ldr	r3, [pc, #360]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4957      	ldr	r1, [pc, #348]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd8:	f7fd fe88 	bl	8000cec <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7fd fe84 	bl	8000cec <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e095      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 020c 	and.w	r2, r3, #12
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	429a      	cmp	r2, r3
 8003006:	d1eb      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d023      	beq.n	800305c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a42      	ldr	r2, [pc, #264]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800302a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003038:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003040:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4936      	ldr	r1, [pc, #216]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
 800305a:	e008      	b.n	800306e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d105      	bne.n	800306e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a32      	ldr	r2, [pc, #200]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800306c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d21d      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 020f 	bic.w	r2, r3, #15
 8003084:	4929      	ldr	r1, [pc, #164]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800308c:	f7fd fe2e 	bl	8000cec <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fd fe2a 	bl	8000cec <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e03b      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1ed      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4917      	ldr	r1, [pc, #92]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490f      	ldr	r1, [pc, #60]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f6:	f000 f825 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490c      	ldr	r1, [pc, #48]	; (8003138 <HAL_RCC_ClockConfig+0x26c>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x270>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x274>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fd9a 	bl	8000c54 <HAL_InitTick>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
 8003134:	04c4b400 	.word	0x04c4b400
 8003138:	08004d84 	.word	0x08004d84
 800313c:	20000000 	.word	0x20000000
 8003140:	20000004 	.word	0x20000004

08003144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800314a:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d102      	bne.n	800315c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	e047      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d102      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003168:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e03e      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d136      	bne.n	80031e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3301      	adds	r3, #1
 8003190:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d10c      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003198:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a2:	68d2      	ldr	r2, [r2, #12]
 80031a4:	0a12      	lsrs	r2, r2, #8
 80031a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	617b      	str	r3, [r7, #20]
      break;
 80031b0:	e00c      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	0a12      	lsrs	r2, r2, #8
 80031c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
      break;
 80031ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0e5b      	lsrs	r3, r3, #25
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e001      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031ec:	693b      	ldr	r3, [r7, #16]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	00f42400 	.word	0x00f42400
 8003204:	007a1200 	.word	0x007a1200

08003208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <HAL_RCC_GetHCLKFreq+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000000 	.word	0x20000000

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003224:	f7ff fff0 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4904      	ldr	r1, [pc, #16]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	08004d94 	.word	0x08004d94

0800324c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003250:	f7ff ffda 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	0adb      	lsrs	r3, r3, #11
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4904      	ldr	r1, [pc, #16]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	08004d94 	.word	0x08004d94

08003278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800327e:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d10c      	bne.n	80032b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800329c:	4a17      	ldr	r2, [pc, #92]	; (80032fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	0a12      	lsrs	r2, r2, #8
 80032aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	617b      	str	r3, [r7, #20]
    break;
 80032b4:	e00c      	b.n	80032d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	0a12      	lsrs	r2, r2, #8
 80032c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
    break;
 80032ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0e5b      	lsrs	r3, r3, #25
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032ea:	687b      	ldr	r3, [r7, #4]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	00f42400 	.word	0x00f42400

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003310:	2300      	movs	r3, #0
 8003312:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8098 	beq.w	8003452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b43      	ldr	r3, [pc, #268]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b40      	ldr	r3, [pc, #256]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	4a3f      	ldr	r2, [pc, #252]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	; 0x58
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334e:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a39      	ldr	r2, [pc, #228]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335a:	f7fd fcc7 	bl	8000cec <HAL_GetTick>
 800335e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003360:	e009      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fd fcc3 	bl	8000cec <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d902      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	74fb      	strb	r3, [r7, #19]
        break;
 8003374:	e005      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003376:	4b30      	ldr	r3, [pc, #192]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ef      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d159      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01e      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d019      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd fc83 	bl	8000cec <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e8:	e00b      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd fc7f 	bl	8000cec <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d902      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ec      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4903      	ldr	r1, [pc, #12]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800342c:	e008      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	74bb      	strb	r3, [r7, #18]
 8003432:	e005      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003440:	7c7b      	ldrb	r3, [r7, #17]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4ba6      	ldr	r3, [pc, #664]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	4aa5      	ldr	r2, [pc, #660]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345e:	4ba0      	ldr	r3, [pc, #640]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f023 0203 	bic.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	499c      	ldr	r1, [pc, #624]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003480:	4b97      	ldr	r3, [pc, #604]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f023 020c 	bic.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4994      	ldr	r1, [pc, #592]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034a2:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	498b      	ldr	r1, [pc, #556]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c4:	4b86      	ldr	r3, [pc, #536]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4983      	ldr	r1, [pc, #524]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034e6:	4b7e      	ldr	r3, [pc, #504]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	497a      	ldr	r1, [pc, #488]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003508:	4b75      	ldr	r3, [pc, #468]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4972      	ldr	r1, [pc, #456]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4969      	ldr	r1, [pc, #420]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800354c:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4961      	ldr	r1, [pc, #388]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800356e:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4958      	ldr	r1, [pc, #352]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003590:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	4950      	ldr	r1, [pc, #320]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ae:	d105      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a4a      	ldr	r2, [pc, #296]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035c8:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	4942      	ldr	r1, [pc, #264]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e6:	d105      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e8:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003600:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4934      	ldr	r1, [pc, #208]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800361e:	d105      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a2e      	ldr	r2, [pc, #184]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	4926      	ldr	r1, [pc, #152]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003656:	d105      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003658:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a20      	ldr	r2, [pc, #128]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003662:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	4918      	ldr	r1, [pc, #96]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368e:	d105      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d015      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036a8:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	490a      	ldr	r1, [pc, #40]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e042      	b.n	800377c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fd fa09 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2224      	movs	r2, #36	; 0x24
 8003712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8c2 	bl	80038b0 <UART_SetConfig>
 800372c:	4603      	mov	r3, r0
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e022      	b.n	800377c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fb82 	bl	8003e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fc09 	bl	8003f8c <UART_CheckIdleState>
 800377a:	4603      	mov	r3, r0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	2b20      	cmp	r3, #32
 800379c:	f040 8083 	bne.w	80038a6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Transmit+0x28>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e07b      	b.n	80038a8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UART_Transmit+0x3a>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e074      	b.n	80038a8 <HAL_UART_Transmit+0x124>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2221      	movs	r2, #33	; 0x21
 80037d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fd fa89 	bl	8000cec <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x84>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003818:	e02c      	b.n	8003874 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fbfc 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e039      	b.n	80038a8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e007      	b.n	8003862 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1cc      	bne.n	800381a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	2140      	movs	r1, #64	; 0x40
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fbc9 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e006      	b.n	80038a8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b4:	b08c      	sub	sp, #48	; 0x30
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4bab      	ldr	r3, [pc, #684]	; (8003b8c <UART_SetConfig+0x2dc>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4aa0      	ldr	r2, [pc, #640]	; (8003b90 <UART_SetConfig+0x2e0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003918:	4313      	orrs	r3, r2
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003926:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003930:	430b      	orrs	r3, r1
 8003932:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f023 010f 	bic.w	r1, r3, #15
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a91      	ldr	r2, [pc, #580]	; (8003b94 <UART_SetConfig+0x2e4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d125      	bne.n	80039a0 <UART_SetConfig+0xf0>
 8003954:	4b90      	ldr	r3, [pc, #576]	; (8003b98 <UART_SetConfig+0x2e8>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b03      	cmp	r3, #3
 8003960:	d81a      	bhi.n	8003998 <UART_SetConfig+0xe8>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <UART_SetConfig+0xb8>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003979 	.word	0x08003979
 800396c:	08003989 	.word	0x08003989
 8003970:	08003981 	.word	0x08003981
 8003974:	08003991 	.word	0x08003991
 8003978:	2301      	movs	r3, #1
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397e:	e0d6      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003980:	2302      	movs	r3, #2
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e0d2      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003988:	2304      	movs	r3, #4
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398e:	e0ce      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003990:	2308      	movs	r3, #8
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003996:	e0ca      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003998:	2310      	movs	r3, #16
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399e:	e0c6      	b.n	8003b2e <UART_SetConfig+0x27e>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7d      	ldr	r2, [pc, #500]	; (8003b9c <UART_SetConfig+0x2ec>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d138      	bne.n	8003a1c <UART_SetConfig+0x16c>
 80039aa:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <UART_SetConfig+0x2e8>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	d82d      	bhi.n	8003a14 <UART_SetConfig+0x164>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <UART_SetConfig+0x110>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003a15 	.word	0x08003a15
 80039c8:	08003a15 	.word	0x08003a15
 80039cc:	08003a15 	.word	0x08003a15
 80039d0:	08003a05 	.word	0x08003a05
 80039d4:	08003a15 	.word	0x08003a15
 80039d8:	08003a15 	.word	0x08003a15
 80039dc:	08003a15 	.word	0x08003a15
 80039e0:	080039fd 	.word	0x080039fd
 80039e4:	08003a15 	.word	0x08003a15
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a0d 	.word	0x08003a0d
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fa:	e098      	b.n	8003b2e <UART_SetConfig+0x27e>
 80039fc:	2302      	movs	r3, #2
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a02:	e094      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a04:	2304      	movs	r3, #4
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0a:	e090      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a12:	e08c      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1a:	e088      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5f      	ldr	r2, [pc, #380]	; (8003ba0 <UART_SetConfig+0x2f0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d125      	bne.n	8003a72 <UART_SetConfig+0x1c2>
 8003a26:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <UART_SetConfig+0x2e8>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d016      	beq.n	8003a62 <UART_SetConfig+0x1b2>
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d818      	bhi.n	8003a6a <UART_SetConfig+0x1ba>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d00a      	beq.n	8003a52 <UART_SetConfig+0x1a2>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d814      	bhi.n	8003a6a <UART_SetConfig+0x1ba>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <UART_SetConfig+0x19a>
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d008      	beq.n	8003a5a <UART_SetConfig+0x1aa>
 8003a48:	e00f      	b.n	8003a6a <UART_SetConfig+0x1ba>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a50:	e06d      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a52:	2302      	movs	r3, #2
 8003a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a58:	e069      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a60:	e065      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a62:	2308      	movs	r3, #8
 8003a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a68:	e061      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a70:	e05d      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a4b      	ldr	r2, [pc, #300]	; (8003ba4 <UART_SetConfig+0x2f4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d125      	bne.n	8003ac8 <UART_SetConfig+0x218>
 8003a7c:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <UART_SetConfig+0x2e8>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a86:	2bc0      	cmp	r3, #192	; 0xc0
 8003a88:	d016      	beq.n	8003ab8 <UART_SetConfig+0x208>
 8003a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a8c:	d818      	bhi.n	8003ac0 <UART_SetConfig+0x210>
 8003a8e:	2b80      	cmp	r3, #128	; 0x80
 8003a90:	d00a      	beq.n	8003aa8 <UART_SetConfig+0x1f8>
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d814      	bhi.n	8003ac0 <UART_SetConfig+0x210>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <UART_SetConfig+0x1f0>
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d008      	beq.n	8003ab0 <UART_SetConfig+0x200>
 8003a9e:	e00f      	b.n	8003ac0 <UART_SetConfig+0x210>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	e042      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aae:	e03e      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab6:	e03a      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003ab8:	2308      	movs	r3, #8
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003abe:	e036      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac6:	e032      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <UART_SetConfig+0x2e0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d12a      	bne.n	8003b28 <UART_SetConfig+0x278>
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <UART_SetConfig+0x2e8>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae0:	d01a      	beq.n	8003b18 <UART_SetConfig+0x268>
 8003ae2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae6:	d81b      	bhi.n	8003b20 <UART_SetConfig+0x270>
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aec:	d00c      	beq.n	8003b08 <UART_SetConfig+0x258>
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d815      	bhi.n	8003b20 <UART_SetConfig+0x270>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <UART_SetConfig+0x250>
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afc:	d008      	beq.n	8003b10 <UART_SetConfig+0x260>
 8003afe:	e00f      	b.n	8003b20 <UART_SetConfig+0x270>
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b06:	e012      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0e:	e00e      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003b10:	2304      	movs	r3, #4
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b16:	e00a      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003b18:	2308      	movs	r3, #8
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b1e:	e006      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003b20:	2310      	movs	r3, #16
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b26:	e002      	b.n	8003b2e <UART_SetConfig+0x27e>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <UART_SetConfig+0x2e0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	f040 80a8 	bne.w	8003c8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d834      	bhi.n	8003bac <UART_SetConfig+0x2fc>
 8003b42:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <UART_SetConfig+0x298>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003bad 	.word	0x08003bad
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003bad 	.word	0x08003bad
 8003b58:	08003b7b 	.word	0x08003b7b
 8003b5c:	08003bad 	.word	0x08003bad
 8003b60:	08003bad 	.word	0x08003bad
 8003b64:	08003bad 	.word	0x08003bad
 8003b68:	08003b83 	.word	0x08003b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7ff fb58 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b72:	e021      	b.n	8003bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <UART_SetConfig+0x2f8>)
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b78:	e01e      	b.n	8003bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7ff fae3 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003b7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b80:	e01a      	b.n	8003bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b88:	e016      	b.n	8003bb8 <UART_SetConfig+0x308>
 8003b8a:	bf00      	nop
 8003b8c:	cfff69f3 	.word	0xcfff69f3
 8003b90:	40008000 	.word	0x40008000
 8003b94:	40013800 	.word	0x40013800
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40004400 	.word	0x40004400
 8003ba0:	40004800 	.word	0x40004800
 8003ba4:	40004c00 	.word	0x40004c00
 8003ba8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 812a 	beq.w	8003e14 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	4a9e      	ldr	r2, [pc, #632]	; (8003e40 <UART_SetConfig+0x590>)
 8003bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d305      	bcc.n	8003bf0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d903      	bls.n	8003bf8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bf6:	e10d      	b.n	8003e14 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	4a8e      	ldr	r2, [pc, #568]	; (8003e40 <UART_SetConfig+0x590>)
 8003c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c1a:	f7fc fb59 	bl	80002d0 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	020b      	lsls	r3, r1, #8
 8003c30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c34:	0202      	lsls	r2, r0, #8
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	6849      	ldr	r1, [r1, #4]
 8003c3a:	0849      	lsrs	r1, r1, #1
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4605      	mov	r5, r0
 8003c42:	eb12 0804 	adds.w	r8, r2, r4
 8003c46:	eb43 0905 	adc.w	r9, r3, r5
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	469a      	mov	sl, r3
 8003c52:	4693      	mov	fp, r2
 8003c54:	4652      	mov	r2, sl
 8003c56:	465b      	mov	r3, fp
 8003c58:	4640      	mov	r0, r8
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	f7fc fb38 	bl	80002d0 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4613      	mov	r3, r2
 8003c66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6e:	d308      	bcc.n	8003c82 <UART_SetConfig+0x3d2>
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c76:	d204      	bcs.n	8003c82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	e0c8      	b.n	8003e14 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c88:	e0c4      	b.n	8003e14 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d167      	bne.n	8003d64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003c94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d828      	bhi.n	8003cee <UART_SetConfig+0x43e>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x3f4>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003cd1 	.word	0x08003cd1
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003cef 	.word	0x08003cef
 8003cb4:	08003cdf 	.word	0x08003cdf
 8003cb8:	08003cef 	.word	0x08003cef
 8003cbc:	08003cef 	.word	0x08003cef
 8003cc0:	08003cef 	.word	0x08003cef
 8003cc4:	08003ce7 	.word	0x08003ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f7ff faaa 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8003ccc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cce:	e014      	b.n	8003cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd0:	f7ff fabc 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 8003cd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cd6:	e010      	b.n	8003cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd8:	4b5a      	ldr	r3, [pc, #360]	; (8003e44 <UART_SetConfig+0x594>)
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cdc:	e00d      	b.n	8003cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cde:	f7ff fa31 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ce4:	e009      	b.n	8003cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cec:	e005      	b.n	8003cfa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8089 	beq.w	8003e14 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	4a4e      	ldr	r2, [pc, #312]	; (8003e40 <UART_SetConfig+0x590>)
 8003d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d14:	005a      	lsls	r2, r3, #1
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	441a      	add	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	d916      	bls.n	8003d5c <UART_SetConfig+0x4ac>
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d212      	bcs.n	8003d5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f023 030f 	bic.w	r3, r3, #15
 8003d3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	8bfb      	ldrh	r3, [r7, #30]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	8bfa      	ldrh	r2, [r7, #30]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	e05b      	b.n	8003e14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d62:	e057      	b.n	8003e14 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d828      	bhi.n	8003dbe <UART_SetConfig+0x50e>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <UART_SetConfig+0x4c4>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003da1 	.word	0x08003da1
 8003d7c:	08003da9 	.word	0x08003da9
 8003d80:	08003dbf 	.word	0x08003dbf
 8003d84:	08003daf 	.word	0x08003daf
 8003d88:	08003dbf 	.word	0x08003dbf
 8003d8c:	08003dbf 	.word	0x08003dbf
 8003d90:	08003dbf 	.word	0x08003dbf
 8003d94:	08003db7 	.word	0x08003db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d98:	f7ff fa42 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8003d9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d9e:	e014      	b.n	8003dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da0:	f7ff fa54 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 8003da4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003da6:	e010      	b.n	8003dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <UART_SetConfig+0x594>)
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dac:	e00d      	b.n	8003dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dae:	f7ff f9c9 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003db4:	e009      	b.n	8003dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dbc:	e005      	b.n	8003dca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003dc8:	bf00      	nop
    }

    if (pclk != 0U)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d021      	beq.n	8003e14 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <UART_SetConfig+0x590>)
 8003dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	441a      	add	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	d909      	bls.n	8003e0e <UART_SetConfig+0x55e>
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d205      	bcs.n	8003e0e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	e002      	b.n	8003e14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3730      	adds	r7, #48	; 0x30
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3e:	bf00      	nop
 8003e40:	08004d9c 	.word	0x08004d9c
 8003e44:	00f42400 	.word	0x00f42400

08003e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f46:	d10a      	bne.n	8003f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f9c:	f7fc fea6 	bl	8000cec <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d10e      	bne.n	8003fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f82f 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e025      	b.n	800401a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d10e      	bne.n	8003ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f819 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e00f      	b.n	800401a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b09c      	sub	sp, #112	; 0x70
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004032:	e0a9      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	f000 80a5 	beq.w	8004188 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fc fe55 	bl	8000cec <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <UART_WaitOnFlagUntilTimeout+0x32>
 800404e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004050:	2b00      	cmp	r3, #0
 8004052:	d140      	bne.n	80040d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004068:	667b      	str	r3, [r7, #100]	; 0x64
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004074:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e6      	bne.n	8004054 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	663b      	str	r3, [r7, #96]	; 0x60
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e069      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d051      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f2:	d149      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
 800411e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3308      	adds	r3, #8
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	613b      	str	r3, [r7, #16]
   return(result);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	66bb      	str	r3, [r7, #104]	; 0x68
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3308      	adds	r3, #8
 800414e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004150:	623a      	str	r2, [r7, #32]
 8004152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	61bb      	str	r3, [r7, #24]
   return(result);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e010      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f43f af46 	beq.w	8004034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3770      	adds	r7, #112	; 0x70
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e027      	b.n	8004218 <HAL_UARTEx_DisableFifoMode+0x66>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2224      	movs	r2, #36	; 0x24
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80041f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e02d      	b.n	8004298 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f84f 	bl	800431c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e02d      	b.n	8004314 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f811 	bl	800431c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800433c:	e031      	b.n	80043a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800433e:	2308      	movs	r3, #8
 8004340:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004342:	2308      	movs	r3, #8
 8004344:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	0e5b      	lsrs	r3, r3, #25
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	0f5b      	lsrs	r3, r3, #29
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004366:	7bbb      	ldrb	r3, [r7, #14]
 8004368:	7b3a      	ldrb	r2, [r7, #12]
 800436a:	4911      	ldr	r1, [pc, #68]	; (80043b0 <UARTEx_SetNbDataToProcess+0x94>)
 800436c:	5c8a      	ldrb	r2, [r1, r2]
 800436e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004372:	7b3a      	ldrb	r2, [r7, #12]
 8004374:	490f      	ldr	r1, [pc, #60]	; (80043b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004376:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004378:	fb93 f3f2 	sdiv	r3, r3, r2
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	7b7a      	ldrb	r2, [r7, #13]
 8004388:	4909      	ldr	r1, [pc, #36]	; (80043b0 <UARTEx_SetNbDataToProcess+0x94>)
 800438a:	5c8a      	ldrb	r2, [r1, r2]
 800438c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004390:	7b7a      	ldrb	r2, [r7, #13]
 8004392:	4908      	ldr	r1, [pc, #32]	; (80043b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004394:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004396:	fb93 f3f2 	sdiv	r3, r3, r2
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	08004db4 	.word	0x08004db4
 80043b4:	08004dbc 	.word	0x08004dbc

080043b8 <sniprintf>:
 80043b8:	b40c      	push	{r2, r3}
 80043ba:	b530      	push	{r4, r5, lr}
 80043bc:	4b17      	ldr	r3, [pc, #92]	; (800441c <sniprintf+0x64>)
 80043be:	1e0c      	subs	r4, r1, #0
 80043c0:	681d      	ldr	r5, [r3, #0]
 80043c2:	b09d      	sub	sp, #116	; 0x74
 80043c4:	da08      	bge.n	80043d8 <sniprintf+0x20>
 80043c6:	238b      	movs	r3, #139	; 0x8b
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295
 80043ce:	b01d      	add	sp, #116	; 0x74
 80043d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d4:	b002      	add	sp, #8
 80043d6:	4770      	bx	lr
 80043d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80043dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80043e0:	bf14      	ite	ne
 80043e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80043e6:	4623      	moveq	r3, r4
 80043e8:	9304      	str	r3, [sp, #16]
 80043ea:	9307      	str	r3, [sp, #28]
 80043ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043f0:	9002      	str	r0, [sp, #8]
 80043f2:	9006      	str	r0, [sp, #24]
 80043f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80043f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043fa:	ab21      	add	r3, sp, #132	; 0x84
 80043fc:	a902      	add	r1, sp, #8
 80043fe:	4628      	mov	r0, r5
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	f000 f993 	bl	800472c <_svfiprintf_r>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	bfbc      	itt	lt
 800440a:	238b      	movlt	r3, #139	; 0x8b
 800440c:	602b      	strlt	r3, [r5, #0]
 800440e:	2c00      	cmp	r4, #0
 8004410:	d0dd      	beq.n	80043ce <sniprintf+0x16>
 8004412:	9b02      	ldr	r3, [sp, #8]
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e7d9      	b.n	80043ce <sniprintf+0x16>
 800441a:	bf00      	nop
 800441c:	20000058 	.word	0x20000058

08004420 <memset>:
 8004420:	4402      	add	r2, r0
 8004422:	4603      	mov	r3, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <__errno>:
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <__errno+0x8>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000058 	.word	0x20000058

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4d0d      	ldr	r5, [pc, #52]	; (8004474 <__libc_init_array+0x38>)
 8004440:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	2600      	movs	r6, #0
 8004448:	42a6      	cmp	r6, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	4d0b      	ldr	r5, [pc, #44]	; (800447c <__libc_init_array+0x40>)
 800444e:	4c0c      	ldr	r4, [pc, #48]	; (8004480 <__libc_init_array+0x44>)
 8004450:	f000 fc6a 	bl	8004d28 <_init>
 8004454:	1b64      	subs	r4, r4, r5
 8004456:	10a4      	asrs	r4, r4, #2
 8004458:	2600      	movs	r6, #0
 800445a:	42a6      	cmp	r6, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f855 3b04 	ldr.w	r3, [r5], #4
 8004464:	4798      	blx	r3
 8004466:	3601      	adds	r6, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f855 3b04 	ldr.w	r3, [r5], #4
 800446e:	4798      	blx	r3
 8004470:	3601      	adds	r6, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	08004e00 	.word	0x08004e00
 8004478:	08004e00 	.word	0x08004e00
 800447c:	08004e00 	.word	0x08004e00
 8004480:	08004e04 	.word	0x08004e04

08004484 <__retarget_lock_acquire_recursive>:
 8004484:	4770      	bx	lr

08004486 <__retarget_lock_release_recursive>:
 8004486:	4770      	bx	lr

08004488 <_free_r>:
 8004488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800448a:	2900      	cmp	r1, #0
 800448c:	d044      	beq.n	8004518 <_free_r+0x90>
 800448e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004492:	9001      	str	r0, [sp, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f1a1 0404 	sub.w	r4, r1, #4
 800449a:	bfb8      	it	lt
 800449c:	18e4      	addlt	r4, r4, r3
 800449e:	f000 f8df 	bl	8004660 <__malloc_lock>
 80044a2:	4a1e      	ldr	r2, [pc, #120]	; (800451c <_free_r+0x94>)
 80044a4:	9801      	ldr	r0, [sp, #4]
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	b933      	cbnz	r3, 80044b8 <_free_r+0x30>
 80044aa:	6063      	str	r3, [r4, #4]
 80044ac:	6014      	str	r4, [r2, #0]
 80044ae:	b003      	add	sp, #12
 80044b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044b4:	f000 b8da 	b.w	800466c <__malloc_unlock>
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	d908      	bls.n	80044ce <_free_r+0x46>
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1961      	adds	r1, r4, r5
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf01      	itttt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	1949      	addeq	r1, r1, r5
 80044ca:	6021      	streq	r1, [r4, #0]
 80044cc:	e7ed      	b.n	80044aa <_free_r+0x22>
 80044ce:	461a      	mov	r2, r3
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	b10b      	cbz	r3, 80044d8 <_free_r+0x50>
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	d9fa      	bls.n	80044ce <_free_r+0x46>
 80044d8:	6811      	ldr	r1, [r2, #0]
 80044da:	1855      	adds	r5, r2, r1
 80044dc:	42a5      	cmp	r5, r4
 80044de:	d10b      	bne.n	80044f8 <_free_r+0x70>
 80044e0:	6824      	ldr	r4, [r4, #0]
 80044e2:	4421      	add	r1, r4
 80044e4:	1854      	adds	r4, r2, r1
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	6011      	str	r1, [r2, #0]
 80044ea:	d1e0      	bne.n	80044ae <_free_r+0x26>
 80044ec:	681c      	ldr	r4, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	6053      	str	r3, [r2, #4]
 80044f2:	440c      	add	r4, r1
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	e7da      	b.n	80044ae <_free_r+0x26>
 80044f8:	d902      	bls.n	8004500 <_free_r+0x78>
 80044fa:	230c      	movs	r3, #12
 80044fc:	6003      	str	r3, [r0, #0]
 80044fe:	e7d6      	b.n	80044ae <_free_r+0x26>
 8004500:	6825      	ldr	r5, [r4, #0]
 8004502:	1961      	adds	r1, r4, r5
 8004504:	428b      	cmp	r3, r1
 8004506:	bf04      	itt	eq
 8004508:	6819      	ldreq	r1, [r3, #0]
 800450a:	685b      	ldreq	r3, [r3, #4]
 800450c:	6063      	str	r3, [r4, #4]
 800450e:	bf04      	itt	eq
 8004510:	1949      	addeq	r1, r1, r5
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	6054      	str	r4, [r2, #4]
 8004516:	e7ca      	b.n	80044ae <_free_r+0x26>
 8004518:	b003      	add	sp, #12
 800451a:	bd30      	pop	{r4, r5, pc}
 800451c:	200002c0 	.word	0x200002c0

08004520 <sbrk_aligned>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4e0e      	ldr	r6, [pc, #56]	; (800455c <sbrk_aligned+0x3c>)
 8004524:	460c      	mov	r4, r1
 8004526:	6831      	ldr	r1, [r6, #0]
 8004528:	4605      	mov	r5, r0
 800452a:	b911      	cbnz	r1, 8004532 <sbrk_aligned+0x12>
 800452c:	f000 fba6 	bl	8004c7c <_sbrk_r>
 8004530:	6030      	str	r0, [r6, #0]
 8004532:	4621      	mov	r1, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f000 fba1 	bl	8004c7c <_sbrk_r>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	d00a      	beq.n	8004554 <sbrk_aligned+0x34>
 800453e:	1cc4      	adds	r4, r0, #3
 8004540:	f024 0403 	bic.w	r4, r4, #3
 8004544:	42a0      	cmp	r0, r4
 8004546:	d007      	beq.n	8004558 <sbrk_aligned+0x38>
 8004548:	1a21      	subs	r1, r4, r0
 800454a:	4628      	mov	r0, r5
 800454c:	f000 fb96 	bl	8004c7c <_sbrk_r>
 8004550:	3001      	adds	r0, #1
 8004552:	d101      	bne.n	8004558 <sbrk_aligned+0x38>
 8004554:	f04f 34ff 	mov.w	r4, #4294967295
 8004558:	4620      	mov	r0, r4
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	200002c4 	.word	0x200002c4

08004560 <_malloc_r>:
 8004560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004564:	1ccd      	adds	r5, r1, #3
 8004566:	f025 0503 	bic.w	r5, r5, #3
 800456a:	3508      	adds	r5, #8
 800456c:	2d0c      	cmp	r5, #12
 800456e:	bf38      	it	cc
 8004570:	250c      	movcc	r5, #12
 8004572:	2d00      	cmp	r5, #0
 8004574:	4607      	mov	r7, r0
 8004576:	db01      	blt.n	800457c <_malloc_r+0x1c>
 8004578:	42a9      	cmp	r1, r5
 800457a:	d905      	bls.n	8004588 <_malloc_r+0x28>
 800457c:	230c      	movs	r3, #12
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	2600      	movs	r6, #0
 8004582:	4630      	mov	r0, r6
 8004584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004588:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800465c <_malloc_r+0xfc>
 800458c:	f000 f868 	bl	8004660 <__malloc_lock>
 8004590:	f8d8 3000 	ldr.w	r3, [r8]
 8004594:	461c      	mov	r4, r3
 8004596:	bb5c      	cbnz	r4, 80045f0 <_malloc_r+0x90>
 8004598:	4629      	mov	r1, r5
 800459a:	4638      	mov	r0, r7
 800459c:	f7ff ffc0 	bl	8004520 <sbrk_aligned>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	4604      	mov	r4, r0
 80045a4:	d155      	bne.n	8004652 <_malloc_r+0xf2>
 80045a6:	f8d8 4000 	ldr.w	r4, [r8]
 80045aa:	4626      	mov	r6, r4
 80045ac:	2e00      	cmp	r6, #0
 80045ae:	d145      	bne.n	800463c <_malloc_r+0xdc>
 80045b0:	2c00      	cmp	r4, #0
 80045b2:	d048      	beq.n	8004646 <_malloc_r+0xe6>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	4631      	mov	r1, r6
 80045b8:	4638      	mov	r0, r7
 80045ba:	eb04 0903 	add.w	r9, r4, r3
 80045be:	f000 fb5d 	bl	8004c7c <_sbrk_r>
 80045c2:	4581      	cmp	r9, r0
 80045c4:	d13f      	bne.n	8004646 <_malloc_r+0xe6>
 80045c6:	6821      	ldr	r1, [r4, #0]
 80045c8:	1a6d      	subs	r5, r5, r1
 80045ca:	4629      	mov	r1, r5
 80045cc:	4638      	mov	r0, r7
 80045ce:	f7ff ffa7 	bl	8004520 <sbrk_aligned>
 80045d2:	3001      	adds	r0, #1
 80045d4:	d037      	beq.n	8004646 <_malloc_r+0xe6>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	442b      	add	r3, r5
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	f8d8 3000 	ldr.w	r3, [r8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d038      	beq.n	8004656 <_malloc_r+0xf6>
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	42a2      	cmp	r2, r4
 80045e8:	d12b      	bne.n	8004642 <_malloc_r+0xe2>
 80045ea:	2200      	movs	r2, #0
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	e00f      	b.n	8004610 <_malloc_r+0xb0>
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	1b52      	subs	r2, r2, r5
 80045f4:	d41f      	bmi.n	8004636 <_malloc_r+0xd6>
 80045f6:	2a0b      	cmp	r2, #11
 80045f8:	d917      	bls.n	800462a <_malloc_r+0xca>
 80045fa:	1961      	adds	r1, r4, r5
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	6025      	str	r5, [r4, #0]
 8004600:	bf18      	it	ne
 8004602:	6059      	strne	r1, [r3, #4]
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	bf08      	it	eq
 8004608:	f8c8 1000 	streq.w	r1, [r8]
 800460c:	5162      	str	r2, [r4, r5]
 800460e:	604b      	str	r3, [r1, #4]
 8004610:	4638      	mov	r0, r7
 8004612:	f104 060b 	add.w	r6, r4, #11
 8004616:	f000 f829 	bl	800466c <__malloc_unlock>
 800461a:	f026 0607 	bic.w	r6, r6, #7
 800461e:	1d23      	adds	r3, r4, #4
 8004620:	1af2      	subs	r2, r6, r3
 8004622:	d0ae      	beq.n	8004582 <_malloc_r+0x22>
 8004624:	1b9b      	subs	r3, r3, r6
 8004626:	50a3      	str	r3, [r4, r2]
 8004628:	e7ab      	b.n	8004582 <_malloc_r+0x22>
 800462a:	42a3      	cmp	r3, r4
 800462c:	6862      	ldr	r2, [r4, #4]
 800462e:	d1dd      	bne.n	80045ec <_malloc_r+0x8c>
 8004630:	f8c8 2000 	str.w	r2, [r8]
 8004634:	e7ec      	b.n	8004610 <_malloc_r+0xb0>
 8004636:	4623      	mov	r3, r4
 8004638:	6864      	ldr	r4, [r4, #4]
 800463a:	e7ac      	b.n	8004596 <_malloc_r+0x36>
 800463c:	4634      	mov	r4, r6
 800463e:	6876      	ldr	r6, [r6, #4]
 8004640:	e7b4      	b.n	80045ac <_malloc_r+0x4c>
 8004642:	4613      	mov	r3, r2
 8004644:	e7cc      	b.n	80045e0 <_malloc_r+0x80>
 8004646:	230c      	movs	r3, #12
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4638      	mov	r0, r7
 800464c:	f000 f80e 	bl	800466c <__malloc_unlock>
 8004650:	e797      	b.n	8004582 <_malloc_r+0x22>
 8004652:	6025      	str	r5, [r4, #0]
 8004654:	e7dc      	b.n	8004610 <_malloc_r+0xb0>
 8004656:	605b      	str	r3, [r3, #4]
 8004658:	deff      	udf	#255	; 0xff
 800465a:	bf00      	nop
 800465c:	200002c0 	.word	0x200002c0

08004660 <__malloc_lock>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__malloc_lock+0x8>)
 8004662:	f7ff bf0f 	b.w	8004484 <__retarget_lock_acquire_recursive>
 8004666:	bf00      	nop
 8004668:	200002bc 	.word	0x200002bc

0800466c <__malloc_unlock>:
 800466c:	4801      	ldr	r0, [pc, #4]	; (8004674 <__malloc_unlock+0x8>)
 800466e:	f7ff bf0a 	b.w	8004486 <__retarget_lock_release_recursive>
 8004672:	bf00      	nop
 8004674:	200002bc 	.word	0x200002bc

08004678 <__ssputs_r>:
 8004678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	688e      	ldr	r6, [r1, #8]
 800467e:	461f      	mov	r7, r3
 8004680:	42be      	cmp	r6, r7
 8004682:	680b      	ldr	r3, [r1, #0]
 8004684:	4682      	mov	sl, r0
 8004686:	460c      	mov	r4, r1
 8004688:	4690      	mov	r8, r2
 800468a:	d82c      	bhi.n	80046e6 <__ssputs_r+0x6e>
 800468c:	898a      	ldrh	r2, [r1, #12]
 800468e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004692:	d026      	beq.n	80046e2 <__ssputs_r+0x6a>
 8004694:	6965      	ldr	r5, [r4, #20]
 8004696:	6909      	ldr	r1, [r1, #16]
 8004698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800469c:	eba3 0901 	sub.w	r9, r3, r1
 80046a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046a4:	1c7b      	adds	r3, r7, #1
 80046a6:	444b      	add	r3, r9
 80046a8:	106d      	asrs	r5, r5, #1
 80046aa:	429d      	cmp	r5, r3
 80046ac:	bf38      	it	cc
 80046ae:	461d      	movcc	r5, r3
 80046b0:	0553      	lsls	r3, r2, #21
 80046b2:	d527      	bpl.n	8004704 <__ssputs_r+0x8c>
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7ff ff53 	bl	8004560 <_malloc_r>
 80046ba:	4606      	mov	r6, r0
 80046bc:	b360      	cbz	r0, 8004718 <__ssputs_r+0xa0>
 80046be:	6921      	ldr	r1, [r4, #16]
 80046c0:	464a      	mov	r2, r9
 80046c2:	f000 faeb 	bl	8004c9c <memcpy>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	6126      	str	r6, [r4, #16]
 80046d4:	6165      	str	r5, [r4, #20]
 80046d6:	444e      	add	r6, r9
 80046d8:	eba5 0509 	sub.w	r5, r5, r9
 80046dc:	6026      	str	r6, [r4, #0]
 80046de:	60a5      	str	r5, [r4, #8]
 80046e0:	463e      	mov	r6, r7
 80046e2:	42be      	cmp	r6, r7
 80046e4:	d900      	bls.n	80046e8 <__ssputs_r+0x70>
 80046e6:	463e      	mov	r6, r7
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	4632      	mov	r2, r6
 80046ec:	4641      	mov	r1, r8
 80046ee:	f000 faab 	bl	8004c48 <memmove>
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	1b9b      	subs	r3, r3, r6
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	4433      	add	r3, r6
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	2000      	movs	r0, #0
 8004700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004704:	462a      	mov	r2, r5
 8004706:	f000 fad7 	bl	8004cb8 <_realloc_r>
 800470a:	4606      	mov	r6, r0
 800470c:	2800      	cmp	r0, #0
 800470e:	d1e0      	bne.n	80046d2 <__ssputs_r+0x5a>
 8004710:	6921      	ldr	r1, [r4, #16]
 8004712:	4650      	mov	r0, sl
 8004714:	f7ff feb8 	bl	8004488 <_free_r>
 8004718:	230c      	movs	r3, #12
 800471a:	f8ca 3000 	str.w	r3, [sl]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004724:	81a3      	strh	r3, [r4, #12]
 8004726:	f04f 30ff 	mov.w	r0, #4294967295
 800472a:	e7e9      	b.n	8004700 <__ssputs_r+0x88>

0800472c <_svfiprintf_r>:
 800472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	4698      	mov	r8, r3
 8004732:	898b      	ldrh	r3, [r1, #12]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	b09d      	sub	sp, #116	; 0x74
 8004738:	4607      	mov	r7, r0
 800473a:	460d      	mov	r5, r1
 800473c:	4614      	mov	r4, r2
 800473e:	d50e      	bpl.n	800475e <_svfiprintf_r+0x32>
 8004740:	690b      	ldr	r3, [r1, #16]
 8004742:	b963      	cbnz	r3, 800475e <_svfiprintf_r+0x32>
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	f7ff ff0b 	bl	8004560 <_malloc_r>
 800474a:	6028      	str	r0, [r5, #0]
 800474c:	6128      	str	r0, [r5, #16]
 800474e:	b920      	cbnz	r0, 800475a <_svfiprintf_r+0x2e>
 8004750:	230c      	movs	r3, #12
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e0d0      	b.n	80048fc <_svfiprintf_r+0x1d0>
 800475a:	2340      	movs	r3, #64	; 0x40
 800475c:	616b      	str	r3, [r5, #20]
 800475e:	2300      	movs	r3, #0
 8004760:	9309      	str	r3, [sp, #36]	; 0x24
 8004762:	2320      	movs	r3, #32
 8004764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004768:	f8cd 800c 	str.w	r8, [sp, #12]
 800476c:	2330      	movs	r3, #48	; 0x30
 800476e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004914 <_svfiprintf_r+0x1e8>
 8004772:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004776:	f04f 0901 	mov.w	r9, #1
 800477a:	4623      	mov	r3, r4
 800477c:	469a      	mov	sl, r3
 800477e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004782:	b10a      	cbz	r2, 8004788 <_svfiprintf_r+0x5c>
 8004784:	2a25      	cmp	r2, #37	; 0x25
 8004786:	d1f9      	bne.n	800477c <_svfiprintf_r+0x50>
 8004788:	ebba 0b04 	subs.w	fp, sl, r4
 800478c:	d00b      	beq.n	80047a6 <_svfiprintf_r+0x7a>
 800478e:	465b      	mov	r3, fp
 8004790:	4622      	mov	r2, r4
 8004792:	4629      	mov	r1, r5
 8004794:	4638      	mov	r0, r7
 8004796:	f7ff ff6f 	bl	8004678 <__ssputs_r>
 800479a:	3001      	adds	r0, #1
 800479c:	f000 80a9 	beq.w	80048f2 <_svfiprintf_r+0x1c6>
 80047a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a2:	445a      	add	r2, fp
 80047a4:	9209      	str	r2, [sp, #36]	; 0x24
 80047a6:	f89a 3000 	ldrb.w	r3, [sl]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a1 	beq.w	80048f2 <_svfiprintf_r+0x1c6>
 80047b0:	2300      	movs	r3, #0
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295
 80047b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ba:	f10a 0a01 	add.w	sl, sl, #1
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	9307      	str	r3, [sp, #28]
 80047c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047c6:	931a      	str	r3, [sp, #104]	; 0x68
 80047c8:	4654      	mov	r4, sl
 80047ca:	2205      	movs	r2, #5
 80047cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d0:	4850      	ldr	r0, [pc, #320]	; (8004914 <_svfiprintf_r+0x1e8>)
 80047d2:	f7fb fd2d 	bl	8000230 <memchr>
 80047d6:	9a04      	ldr	r2, [sp, #16]
 80047d8:	b9d8      	cbnz	r0, 8004812 <_svfiprintf_r+0xe6>
 80047da:	06d0      	lsls	r0, r2, #27
 80047dc:	bf44      	itt	mi
 80047de:	2320      	movmi	r3, #32
 80047e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e4:	0711      	lsls	r1, r2, #28
 80047e6:	bf44      	itt	mi
 80047e8:	232b      	movmi	r3, #43	; 0x2b
 80047ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ee:	f89a 3000 	ldrb.w	r3, [sl]
 80047f2:	2b2a      	cmp	r3, #42	; 0x2a
 80047f4:	d015      	beq.n	8004822 <_svfiprintf_r+0xf6>
 80047f6:	9a07      	ldr	r2, [sp, #28]
 80047f8:	4654      	mov	r4, sl
 80047fa:	2000      	movs	r0, #0
 80047fc:	f04f 0c0a 	mov.w	ip, #10
 8004800:	4621      	mov	r1, r4
 8004802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004806:	3b30      	subs	r3, #48	; 0x30
 8004808:	2b09      	cmp	r3, #9
 800480a:	d94d      	bls.n	80048a8 <_svfiprintf_r+0x17c>
 800480c:	b1b0      	cbz	r0, 800483c <_svfiprintf_r+0x110>
 800480e:	9207      	str	r2, [sp, #28]
 8004810:	e014      	b.n	800483c <_svfiprintf_r+0x110>
 8004812:	eba0 0308 	sub.w	r3, r0, r8
 8004816:	fa09 f303 	lsl.w	r3, r9, r3
 800481a:	4313      	orrs	r3, r2
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	46a2      	mov	sl, r4
 8004820:	e7d2      	b.n	80047c8 <_svfiprintf_r+0x9c>
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	1d19      	adds	r1, r3, #4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	9103      	str	r1, [sp, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	bfbb      	ittet	lt
 800482e:	425b      	neglt	r3, r3
 8004830:	f042 0202 	orrlt.w	r2, r2, #2
 8004834:	9307      	strge	r3, [sp, #28]
 8004836:	9307      	strlt	r3, [sp, #28]
 8004838:	bfb8      	it	lt
 800483a:	9204      	strlt	r2, [sp, #16]
 800483c:	7823      	ldrb	r3, [r4, #0]
 800483e:	2b2e      	cmp	r3, #46	; 0x2e
 8004840:	d10c      	bne.n	800485c <_svfiprintf_r+0x130>
 8004842:	7863      	ldrb	r3, [r4, #1]
 8004844:	2b2a      	cmp	r3, #42	; 0x2a
 8004846:	d134      	bne.n	80048b2 <_svfiprintf_r+0x186>
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	9203      	str	r2, [sp, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	bfb8      	it	lt
 8004854:	f04f 33ff 	movlt.w	r3, #4294967295
 8004858:	3402      	adds	r4, #2
 800485a:	9305      	str	r3, [sp, #20]
 800485c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004924 <_svfiprintf_r+0x1f8>
 8004860:	7821      	ldrb	r1, [r4, #0]
 8004862:	2203      	movs	r2, #3
 8004864:	4650      	mov	r0, sl
 8004866:	f7fb fce3 	bl	8000230 <memchr>
 800486a:	b138      	cbz	r0, 800487c <_svfiprintf_r+0x150>
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	eba0 000a 	sub.w	r0, r0, sl
 8004872:	2240      	movs	r2, #64	; 0x40
 8004874:	4082      	lsls	r2, r0
 8004876:	4313      	orrs	r3, r2
 8004878:	3401      	adds	r4, #1
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004880:	4825      	ldr	r0, [pc, #148]	; (8004918 <_svfiprintf_r+0x1ec>)
 8004882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004886:	2206      	movs	r2, #6
 8004888:	f7fb fcd2 	bl	8000230 <memchr>
 800488c:	2800      	cmp	r0, #0
 800488e:	d038      	beq.n	8004902 <_svfiprintf_r+0x1d6>
 8004890:	4b22      	ldr	r3, [pc, #136]	; (800491c <_svfiprintf_r+0x1f0>)
 8004892:	bb1b      	cbnz	r3, 80048dc <_svfiprintf_r+0x1b0>
 8004894:	9b03      	ldr	r3, [sp, #12]
 8004896:	3307      	adds	r3, #7
 8004898:	f023 0307 	bic.w	r3, r3, #7
 800489c:	3308      	adds	r3, #8
 800489e:	9303      	str	r3, [sp, #12]
 80048a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a2:	4433      	add	r3, r6
 80048a4:	9309      	str	r3, [sp, #36]	; 0x24
 80048a6:	e768      	b.n	800477a <_svfiprintf_r+0x4e>
 80048a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ac:	460c      	mov	r4, r1
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7a6      	b.n	8004800 <_svfiprintf_r+0xd4>
 80048b2:	2300      	movs	r3, #0
 80048b4:	3401      	adds	r4, #1
 80048b6:	9305      	str	r3, [sp, #20]
 80048b8:	4619      	mov	r1, r3
 80048ba:	f04f 0c0a 	mov.w	ip, #10
 80048be:	4620      	mov	r0, r4
 80048c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048c4:	3a30      	subs	r2, #48	; 0x30
 80048c6:	2a09      	cmp	r2, #9
 80048c8:	d903      	bls.n	80048d2 <_svfiprintf_r+0x1a6>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0c6      	beq.n	800485c <_svfiprintf_r+0x130>
 80048ce:	9105      	str	r1, [sp, #20]
 80048d0:	e7c4      	b.n	800485c <_svfiprintf_r+0x130>
 80048d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80048d6:	4604      	mov	r4, r0
 80048d8:	2301      	movs	r3, #1
 80048da:	e7f0      	b.n	80048be <_svfiprintf_r+0x192>
 80048dc:	ab03      	add	r3, sp, #12
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	462a      	mov	r2, r5
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <_svfiprintf_r+0x1f4>)
 80048e4:	a904      	add	r1, sp, #16
 80048e6:	4638      	mov	r0, r7
 80048e8:	f3af 8000 	nop.w
 80048ec:	1c42      	adds	r2, r0, #1
 80048ee:	4606      	mov	r6, r0
 80048f0:	d1d6      	bne.n	80048a0 <_svfiprintf_r+0x174>
 80048f2:	89ab      	ldrh	r3, [r5, #12]
 80048f4:	065b      	lsls	r3, r3, #25
 80048f6:	f53f af2d 	bmi.w	8004754 <_svfiprintf_r+0x28>
 80048fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048fc:	b01d      	add	sp, #116	; 0x74
 80048fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004902:	ab03      	add	r3, sp, #12
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	462a      	mov	r2, r5
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <_svfiprintf_r+0x1f4>)
 800490a:	a904      	add	r1, sp, #16
 800490c:	4638      	mov	r0, r7
 800490e:	f000 f879 	bl	8004a04 <_printf_i>
 8004912:	e7eb      	b.n	80048ec <_svfiprintf_r+0x1c0>
 8004914:	08004dc4 	.word	0x08004dc4
 8004918:	08004dce 	.word	0x08004dce
 800491c:	00000000 	.word	0x00000000
 8004920:	08004679 	.word	0x08004679
 8004924:	08004dca 	.word	0x08004dca

08004928 <_printf_common>:
 8004928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	4616      	mov	r6, r2
 800492e:	4699      	mov	r9, r3
 8004930:	688a      	ldr	r2, [r1, #8]
 8004932:	690b      	ldr	r3, [r1, #16]
 8004934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004938:	4293      	cmp	r3, r2
 800493a:	bfb8      	it	lt
 800493c:	4613      	movlt	r3, r2
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004944:	4607      	mov	r7, r0
 8004946:	460c      	mov	r4, r1
 8004948:	b10a      	cbz	r2, 800494e <_printf_common+0x26>
 800494a:	3301      	adds	r3, #1
 800494c:	6033      	str	r3, [r6, #0]
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	0699      	lsls	r1, r3, #26
 8004952:	bf42      	ittt	mi
 8004954:	6833      	ldrmi	r3, [r6, #0]
 8004956:	3302      	addmi	r3, #2
 8004958:	6033      	strmi	r3, [r6, #0]
 800495a:	6825      	ldr	r5, [r4, #0]
 800495c:	f015 0506 	ands.w	r5, r5, #6
 8004960:	d106      	bne.n	8004970 <_printf_common+0x48>
 8004962:	f104 0a19 	add.w	sl, r4, #25
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	6832      	ldr	r2, [r6, #0]
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	42ab      	cmp	r3, r5
 800496e:	dc26      	bgt.n	80049be <_printf_common+0x96>
 8004970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004974:	1e13      	subs	r3, r2, #0
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	bf18      	it	ne
 800497a:	2301      	movne	r3, #1
 800497c:	0692      	lsls	r2, r2, #26
 800497e:	d42b      	bmi.n	80049d8 <_printf_common+0xb0>
 8004980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004984:	4649      	mov	r1, r9
 8004986:	4638      	mov	r0, r7
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d01e      	beq.n	80049cc <_printf_common+0xa4>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	6922      	ldr	r2, [r4, #16]
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	2b04      	cmp	r3, #4
 8004998:	bf02      	ittt	eq
 800499a:	68e5      	ldreq	r5, [r4, #12]
 800499c:	6833      	ldreq	r3, [r6, #0]
 800499e:	1aed      	subeq	r5, r5, r3
 80049a0:	68a3      	ldr	r3, [r4, #8]
 80049a2:	bf0c      	ite	eq
 80049a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049a8:	2500      	movne	r5, #0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bfc4      	itt	gt
 80049ae:	1a9b      	subgt	r3, r3, r2
 80049b0:	18ed      	addgt	r5, r5, r3
 80049b2:	2600      	movs	r6, #0
 80049b4:	341a      	adds	r4, #26
 80049b6:	42b5      	cmp	r5, r6
 80049b8:	d11a      	bne.n	80049f0 <_printf_common+0xc8>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e008      	b.n	80049d0 <_printf_common+0xa8>
 80049be:	2301      	movs	r3, #1
 80049c0:	4652      	mov	r2, sl
 80049c2:	4649      	mov	r1, r9
 80049c4:	4638      	mov	r0, r7
 80049c6:	47c0      	blx	r8
 80049c8:	3001      	adds	r0, #1
 80049ca:	d103      	bne.n	80049d4 <_printf_common+0xac>
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	3501      	adds	r5, #1
 80049d6:	e7c6      	b.n	8004966 <_printf_common+0x3e>
 80049d8:	18e1      	adds	r1, r4, r3
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	2030      	movs	r0, #48	; 0x30
 80049de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049e2:	4422      	add	r2, r4
 80049e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ec:	3302      	adds	r3, #2
 80049ee:	e7c7      	b.n	8004980 <_printf_common+0x58>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4622      	mov	r2, r4
 80049f4:	4649      	mov	r1, r9
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	3001      	adds	r0, #1
 80049fc:	d0e6      	beq.n	80049cc <_printf_common+0xa4>
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7d9      	b.n	80049b6 <_printf_common+0x8e>
	...

08004a04 <_printf_i>:
 8004a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	7e0f      	ldrb	r7, [r1, #24]
 8004a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a0c:	2f78      	cmp	r7, #120	; 0x78
 8004a0e:	4691      	mov	r9, r2
 8004a10:	4680      	mov	r8, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	469a      	mov	sl, r3
 8004a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a1a:	d807      	bhi.n	8004a2c <_printf_i+0x28>
 8004a1c:	2f62      	cmp	r7, #98	; 0x62
 8004a1e:	d80a      	bhi.n	8004a36 <_printf_i+0x32>
 8004a20:	2f00      	cmp	r7, #0
 8004a22:	f000 80d4 	beq.w	8004bce <_printf_i+0x1ca>
 8004a26:	2f58      	cmp	r7, #88	; 0x58
 8004a28:	f000 80c0 	beq.w	8004bac <_printf_i+0x1a8>
 8004a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a34:	e03a      	b.n	8004aac <_printf_i+0xa8>
 8004a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a3a:	2b15      	cmp	r3, #21
 8004a3c:	d8f6      	bhi.n	8004a2c <_printf_i+0x28>
 8004a3e:	a101      	add	r1, pc, #4	; (adr r1, 8004a44 <_printf_i+0x40>)
 8004a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004ab1 	.word	0x08004ab1
 8004a4c:	08004a2d 	.word	0x08004a2d
 8004a50:	08004a2d 	.word	0x08004a2d
 8004a54:	08004a2d 	.word	0x08004a2d
 8004a58:	08004a2d 	.word	0x08004a2d
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	08004a2d 	.word	0x08004a2d
 8004a64:	08004a2d 	.word	0x08004a2d
 8004a68:	08004a2d 	.word	0x08004a2d
 8004a6c:	08004a2d 	.word	0x08004a2d
 8004a70:	08004bb5 	.word	0x08004bb5
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004b6f 	.word	0x08004b6f
 8004a7c:	08004a2d 	.word	0x08004a2d
 8004a80:	08004a2d 	.word	0x08004a2d
 8004a84:	08004bd7 	.word	0x08004bd7
 8004a88:	08004a2d 	.word	0x08004a2d
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004a2d 	.word	0x08004a2d
 8004a94:	08004a2d 	.word	0x08004a2d
 8004a98:	08004b77 	.word	0x08004b77
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	602a      	str	r2, [r5, #0]
 8004aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aac:	2301      	movs	r3, #1
 8004aae:	e09f      	b.n	8004bf0 <_printf_i+0x1ec>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	0607      	lsls	r7, r0, #24
 8004ab6:	f103 0104 	add.w	r1, r3, #4
 8004aba:	6029      	str	r1, [r5, #0]
 8004abc:	d501      	bpl.n	8004ac2 <_printf_i+0xbe>
 8004abe:	681e      	ldr	r6, [r3, #0]
 8004ac0:	e003      	b.n	8004aca <_printf_i+0xc6>
 8004ac2:	0646      	lsls	r6, r0, #25
 8004ac4:	d5fb      	bpl.n	8004abe <_printf_i+0xba>
 8004ac6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004aca:	2e00      	cmp	r6, #0
 8004acc:	da03      	bge.n	8004ad6 <_printf_i+0xd2>
 8004ace:	232d      	movs	r3, #45	; 0x2d
 8004ad0:	4276      	negs	r6, r6
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad6:	485a      	ldr	r0, [pc, #360]	; (8004c40 <_printf_i+0x23c>)
 8004ad8:	230a      	movs	r3, #10
 8004ada:	e012      	b.n	8004b02 <_printf_i+0xfe>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	6820      	ldr	r0, [r4, #0]
 8004ae0:	1d19      	adds	r1, r3, #4
 8004ae2:	6029      	str	r1, [r5, #0]
 8004ae4:	0605      	lsls	r5, r0, #24
 8004ae6:	d501      	bpl.n	8004aec <_printf_i+0xe8>
 8004ae8:	681e      	ldr	r6, [r3, #0]
 8004aea:	e002      	b.n	8004af2 <_printf_i+0xee>
 8004aec:	0641      	lsls	r1, r0, #25
 8004aee:	d5fb      	bpl.n	8004ae8 <_printf_i+0xe4>
 8004af0:	881e      	ldrh	r6, [r3, #0]
 8004af2:	4853      	ldr	r0, [pc, #332]	; (8004c40 <_printf_i+0x23c>)
 8004af4:	2f6f      	cmp	r7, #111	; 0x6f
 8004af6:	bf0c      	ite	eq
 8004af8:	2308      	moveq	r3, #8
 8004afa:	230a      	movne	r3, #10
 8004afc:	2100      	movs	r1, #0
 8004afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b02:	6865      	ldr	r5, [r4, #4]
 8004b04:	60a5      	str	r5, [r4, #8]
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	bfa2      	ittt	ge
 8004b0a:	6821      	ldrge	r1, [r4, #0]
 8004b0c:	f021 0104 	bicge.w	r1, r1, #4
 8004b10:	6021      	strge	r1, [r4, #0]
 8004b12:	b90e      	cbnz	r6, 8004b18 <_printf_i+0x114>
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	d04b      	beq.n	8004bb0 <_printf_i+0x1ac>
 8004b18:	4615      	mov	r5, r2
 8004b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004b22:	5dc7      	ldrb	r7, [r0, r7]
 8004b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b28:	4637      	mov	r7, r6
 8004b2a:	42bb      	cmp	r3, r7
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	d9f4      	bls.n	8004b1a <_printf_i+0x116>
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d10b      	bne.n	8004b4c <_printf_i+0x148>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	07de      	lsls	r6, r3, #31
 8004b38:	d508      	bpl.n	8004b4c <_printf_i+0x148>
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	6861      	ldr	r1, [r4, #4]
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	bfde      	ittt	le
 8004b42:	2330      	movle	r3, #48	; 0x30
 8004b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b4c:	1b52      	subs	r2, r2, r5
 8004b4e:	6122      	str	r2, [r4, #16]
 8004b50:	f8cd a000 	str.w	sl, [sp]
 8004b54:	464b      	mov	r3, r9
 8004b56:	aa03      	add	r2, sp, #12
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	f7ff fee4 	bl	8004928 <_printf_common>
 8004b60:	3001      	adds	r0, #1
 8004b62:	d14a      	bne.n	8004bfa <_printf_i+0x1f6>
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	b004      	add	sp, #16
 8004b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	f043 0320 	orr.w	r3, r3, #32
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	4833      	ldr	r0, [pc, #204]	; (8004c44 <_printf_i+0x240>)
 8004b78:	2778      	movs	r7, #120	; 0x78
 8004b7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	6829      	ldr	r1, [r5, #0]
 8004b82:	061f      	lsls	r7, r3, #24
 8004b84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b88:	d402      	bmi.n	8004b90 <_printf_i+0x18c>
 8004b8a:	065f      	lsls	r7, r3, #25
 8004b8c:	bf48      	it	mi
 8004b8e:	b2b6      	uxthmi	r6, r6
 8004b90:	07df      	lsls	r7, r3, #31
 8004b92:	bf48      	it	mi
 8004b94:	f043 0320 	orrmi.w	r3, r3, #32
 8004b98:	6029      	str	r1, [r5, #0]
 8004b9a:	bf48      	it	mi
 8004b9c:	6023      	strmi	r3, [r4, #0]
 8004b9e:	b91e      	cbnz	r6, 8004ba8 <_printf_i+0x1a4>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f023 0320 	bic.w	r3, r3, #32
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	2310      	movs	r3, #16
 8004baa:	e7a7      	b.n	8004afc <_printf_i+0xf8>
 8004bac:	4824      	ldr	r0, [pc, #144]	; (8004c40 <_printf_i+0x23c>)
 8004bae:	e7e4      	b.n	8004b7a <_printf_i+0x176>
 8004bb0:	4615      	mov	r5, r2
 8004bb2:	e7bd      	b.n	8004b30 <_printf_i+0x12c>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	6826      	ldr	r6, [r4, #0]
 8004bb8:	6961      	ldr	r1, [r4, #20]
 8004bba:	1d18      	adds	r0, r3, #4
 8004bbc:	6028      	str	r0, [r5, #0]
 8004bbe:	0635      	lsls	r5, r6, #24
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_i+0x1c4>
 8004bc4:	6019      	str	r1, [r3, #0]
 8004bc6:	e002      	b.n	8004bce <_printf_i+0x1ca>
 8004bc8:	0670      	lsls	r0, r6, #25
 8004bca:	d5fb      	bpl.n	8004bc4 <_printf_i+0x1c0>
 8004bcc:	8019      	strh	r1, [r3, #0]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6123      	str	r3, [r4, #16]
 8004bd2:	4615      	mov	r5, r2
 8004bd4:	e7bc      	b.n	8004b50 <_printf_i+0x14c>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	1d1a      	adds	r2, r3, #4
 8004bda:	602a      	str	r2, [r5, #0]
 8004bdc:	681d      	ldr	r5, [r3, #0]
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4628      	mov	r0, r5
 8004be4:	f7fb fb24 	bl	8000230 <memchr>
 8004be8:	b108      	cbz	r0, 8004bee <_printf_i+0x1ea>
 8004bea:	1b40      	subs	r0, r0, r5
 8004bec:	6060      	str	r0, [r4, #4]
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf8:	e7aa      	b.n	8004b50 <_printf_i+0x14c>
 8004bfa:	6923      	ldr	r3, [r4, #16]
 8004bfc:	462a      	mov	r2, r5
 8004bfe:	4649      	mov	r1, r9
 8004c00:	4640      	mov	r0, r8
 8004c02:	47d0      	blx	sl
 8004c04:	3001      	adds	r0, #1
 8004c06:	d0ad      	beq.n	8004b64 <_printf_i+0x160>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	079b      	lsls	r3, r3, #30
 8004c0c:	d413      	bmi.n	8004c36 <_printf_i+0x232>
 8004c0e:	68e0      	ldr	r0, [r4, #12]
 8004c10:	9b03      	ldr	r3, [sp, #12]
 8004c12:	4298      	cmp	r0, r3
 8004c14:	bfb8      	it	lt
 8004c16:	4618      	movlt	r0, r3
 8004c18:	e7a6      	b.n	8004b68 <_printf_i+0x164>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4632      	mov	r2, r6
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4640      	mov	r0, r8
 8004c22:	47d0      	blx	sl
 8004c24:	3001      	adds	r0, #1
 8004c26:	d09d      	beq.n	8004b64 <_printf_i+0x160>
 8004c28:	3501      	adds	r5, #1
 8004c2a:	68e3      	ldr	r3, [r4, #12]
 8004c2c:	9903      	ldr	r1, [sp, #12]
 8004c2e:	1a5b      	subs	r3, r3, r1
 8004c30:	42ab      	cmp	r3, r5
 8004c32:	dcf2      	bgt.n	8004c1a <_printf_i+0x216>
 8004c34:	e7eb      	b.n	8004c0e <_printf_i+0x20a>
 8004c36:	2500      	movs	r5, #0
 8004c38:	f104 0619 	add.w	r6, r4, #25
 8004c3c:	e7f5      	b.n	8004c2a <_printf_i+0x226>
 8004c3e:	bf00      	nop
 8004c40:	08004dd5 	.word	0x08004dd5
 8004c44:	08004de6 	.word	0x08004de6

08004c48 <memmove>:
 8004c48:	4288      	cmp	r0, r1
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	eb01 0402 	add.w	r4, r1, r2
 8004c50:	d902      	bls.n	8004c58 <memmove+0x10>
 8004c52:	4284      	cmp	r4, r0
 8004c54:	4623      	mov	r3, r4
 8004c56:	d807      	bhi.n	8004c68 <memmove+0x20>
 8004c58:	1e43      	subs	r3, r0, #1
 8004c5a:	42a1      	cmp	r1, r4
 8004c5c:	d008      	beq.n	8004c70 <memmove+0x28>
 8004c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c66:	e7f8      	b.n	8004c5a <memmove+0x12>
 8004c68:	4402      	add	r2, r0
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	428a      	cmp	r2, r1
 8004c6e:	d100      	bne.n	8004c72 <memmove+0x2a>
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c7a:	e7f7      	b.n	8004c6c <memmove+0x24>

08004c7c <_sbrk_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d06      	ldr	r5, [pc, #24]	; (8004c98 <_sbrk_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fb feb6 	bl	80009f8 <_sbrk>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_sbrk_r+0x1a>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_sbrk_r+0x1a>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	200002b8 	.word	0x200002b8

08004c9c <memcpy>:
 8004c9c:	440a      	add	r2, r1
 8004c9e:	4291      	cmp	r1, r2
 8004ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca4:	d100      	bne.n	8004ca8 <memcpy+0xc>
 8004ca6:	4770      	bx	lr
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	d1f9      	bne.n	8004caa <memcpy+0xe>
 8004cb6:	bd10      	pop	{r4, pc}

08004cb8 <_realloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	b921      	cbnz	r1, 8004cce <_realloc_r+0x16>
 8004cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	4611      	mov	r1, r2
 8004cca:	f7ff bc49 	b.w	8004560 <_malloc_r>
 8004cce:	b92a      	cbnz	r2, 8004cdc <_realloc_r+0x24>
 8004cd0:	f7ff fbda 	bl	8004488 <_free_r>
 8004cd4:	4625      	mov	r5, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	f000 f81b 	bl	8004d16 <_malloc_usable_size_r>
 8004ce0:	4284      	cmp	r4, r0
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	d802      	bhi.n	8004cec <_realloc_r+0x34>
 8004ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cea:	d812      	bhi.n	8004d12 <_realloc_r+0x5a>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7ff fc36 	bl	8004560 <_malloc_r>
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d0ed      	beq.n	8004cd6 <_realloc_r+0x1e>
 8004cfa:	42bc      	cmp	r4, r7
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	4631      	mov	r1, r6
 8004d00:	bf28      	it	cs
 8004d02:	463a      	movcs	r2, r7
 8004d04:	f7ff ffca 	bl	8004c9c <memcpy>
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	f7ff fbbc 	bl	8004488 <_free_r>
 8004d10:	e7e1      	b.n	8004cd6 <_realloc_r+0x1e>
 8004d12:	4635      	mov	r5, r6
 8004d14:	e7df      	b.n	8004cd6 <_realloc_r+0x1e>

08004d16 <_malloc_usable_size_r>:
 8004d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1a:	1f18      	subs	r0, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bfbc      	itt	lt
 8004d20:	580b      	ldrlt	r3, [r1, r0]
 8004d22:	18c0      	addlt	r0, r0, r3
 8004d24:	4770      	bx	lr
	...

08004d28 <_init>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr

08004d34 <_fini>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr
